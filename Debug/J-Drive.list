
J-Drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064ec  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  080066b8  080066b8  000166b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068a8  080068a8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080068a8  080068a8  000168a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068b0  080068b0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068b0  080068b0  000168b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068b4  080068b4  000168b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080068b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042ec  20000010  080068c8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200042fc  080068c8  000242fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017990  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003554  00000000  00000000  000379d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001120  00000000  00000000  0003af28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f68  00000000  00000000  0003c048  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000270bf  00000000  00000000  0003cfb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011aa0  00000000  00000000  0006406f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8560  00000000  00000000  00075b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014e06f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048a4  00000000  00000000  0014e0ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800669c 	.word	0x0800669c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	0800669c 	.word	0x0800669c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_d2f>:
 8000b44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b4c:	bf24      	itt	cs
 8000b4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b56:	d90d      	bls.n	8000b74 <__aeabi_d2f+0x30>
 8000b58:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b64:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b6c:	bf08      	it	eq
 8000b6e:	f020 0001 	biceq.w	r0, r0, #1
 8000b72:	4770      	bx	lr
 8000b74:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b78:	d121      	bne.n	8000bbe <__aeabi_d2f+0x7a>
 8000b7a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7e:	bfbc      	itt	lt
 8000b80:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	4770      	bxlt	lr
 8000b86:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8e:	f1c2 0218 	rsb	r2, r2, #24
 8000b92:	f1c2 0c20 	rsb	ip, r2, #32
 8000b96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9e:	bf18      	it	ne
 8000ba0:	f040 0001 	orrne.w	r0, r0, #1
 8000ba4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb0:	ea40 000c 	orr.w	r0, r0, ip
 8000bb4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bbc:	e7cc      	b.n	8000b58 <__aeabi_d2f+0x14>
 8000bbe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc2:	d107      	bne.n	8000bd4 <__aeabi_d2f+0x90>
 8000bc4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc8:	bf1e      	ittt	ne
 8000bca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd2:	4770      	bxne	lr
 8000bd4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bdc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <__aeabi_uldivmod>:
 8000be4:	b953      	cbnz	r3, 8000bfc <__aeabi_uldivmod+0x18>
 8000be6:	b94a      	cbnz	r2, 8000bfc <__aeabi_uldivmod+0x18>
 8000be8:	2900      	cmp	r1, #0
 8000bea:	bf08      	it	eq
 8000bec:	2800      	cmpeq	r0, #0
 8000bee:	bf1c      	itt	ne
 8000bf0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf8:	f000 b972 	b.w	8000ee0 <__aeabi_idiv0>
 8000bfc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c04:	f000 f806 	bl	8000c14 <__udivmoddi4>
 8000c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c10:	b004      	add	sp, #16
 8000c12:	4770      	bx	lr

08000c14 <__udivmoddi4>:
 8000c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c18:	9e08      	ldr	r6, [sp, #32]
 8000c1a:	4604      	mov	r4, r0
 8000c1c:	4688      	mov	r8, r1
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d14b      	bne.n	8000cba <__udivmoddi4+0xa6>
 8000c22:	428a      	cmp	r2, r1
 8000c24:	4615      	mov	r5, r2
 8000c26:	d967      	bls.n	8000cf8 <__udivmoddi4+0xe4>
 8000c28:	fab2 f282 	clz	r2, r2
 8000c2c:	b14a      	cbz	r2, 8000c42 <__udivmoddi4+0x2e>
 8000c2e:	f1c2 0720 	rsb	r7, r2, #32
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3a:	4095      	lsls	r5, r2
 8000c3c:	ea47 0803 	orr.w	r8, r7, r3
 8000c40:	4094      	lsls	r4, r2
 8000c42:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c46:	0c23      	lsrs	r3, r4, #16
 8000c48:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c4c:	fa1f fc85 	uxth.w	ip, r5
 8000c50:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c54:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c58:	fb07 f10c 	mul.w	r1, r7, ip
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x60>
 8000c60:	18eb      	adds	r3, r5, r3
 8000c62:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c66:	f080 811b 	bcs.w	8000ea0 <__udivmoddi4+0x28c>
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	f240 8118 	bls.w	8000ea0 <__udivmoddi4+0x28c>
 8000c70:	3f02      	subs	r7, #2
 8000c72:	442b      	add	r3, r5
 8000c74:	1a5b      	subs	r3, r3, r1
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c84:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c88:	45a4      	cmp	ip, r4
 8000c8a:	d909      	bls.n	8000ca0 <__udivmoddi4+0x8c>
 8000c8c:	192c      	adds	r4, r5, r4
 8000c8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c92:	f080 8107 	bcs.w	8000ea4 <__udivmoddi4+0x290>
 8000c96:	45a4      	cmp	ip, r4
 8000c98:	f240 8104 	bls.w	8000ea4 <__udivmoddi4+0x290>
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	442c      	add	r4, r5
 8000ca0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca4:	eba4 040c 	sub.w	r4, r4, ip
 8000ca8:	2700      	movs	r7, #0
 8000caa:	b11e      	cbz	r6, 8000cb4 <__udivmoddi4+0xa0>
 8000cac:	40d4      	lsrs	r4, r2
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb4:	4639      	mov	r1, r7
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d909      	bls.n	8000cd2 <__udivmoddi4+0xbe>
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f000 80eb 	beq.w	8000e9a <__udivmoddi4+0x286>
 8000cc4:	2700      	movs	r7, #0
 8000cc6:	e9c6 0100 	strd	r0, r1, [r6]
 8000cca:	4638      	mov	r0, r7
 8000ccc:	4639      	mov	r1, r7
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	fab3 f783 	clz	r7, r3
 8000cd6:	2f00      	cmp	r7, #0
 8000cd8:	d147      	bne.n	8000d6a <__udivmoddi4+0x156>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xd0>
 8000cde:	4282      	cmp	r2, r0
 8000ce0:	f200 80fa 	bhi.w	8000ed8 <__udivmoddi4+0x2c4>
 8000ce4:	1a84      	subs	r4, r0, r2
 8000ce6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	4698      	mov	r8, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d0e0      	beq.n	8000cb4 <__udivmoddi4+0xa0>
 8000cf2:	e9c6 4800 	strd	r4, r8, [r6]
 8000cf6:	e7dd      	b.n	8000cb4 <__udivmoddi4+0xa0>
 8000cf8:	b902      	cbnz	r2, 8000cfc <__udivmoddi4+0xe8>
 8000cfa:	deff      	udf	#255	; 0xff
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f040 808f 	bne.w	8000e24 <__udivmoddi4+0x210>
 8000d06:	1b49      	subs	r1, r1, r5
 8000d08:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0c:	fa1f f885 	uxth.w	r8, r5
 8000d10:	2701      	movs	r7, #1
 8000d12:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d16:	0c23      	lsrs	r3, r4, #16
 8000d18:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d20:	fb08 f10c 	mul.w	r1, r8, ip
 8000d24:	4299      	cmp	r1, r3
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0x124>
 8000d28:	18eb      	adds	r3, r5, r3
 8000d2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x122>
 8000d30:	4299      	cmp	r1, r3
 8000d32:	f200 80cd 	bhi.w	8000ed0 <__udivmoddi4+0x2bc>
 8000d36:	4684      	mov	ip, r0
 8000d38:	1a59      	subs	r1, r3, r1
 8000d3a:	b2a3      	uxth	r3, r4
 8000d3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d40:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d44:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d48:	fb08 f800 	mul.w	r8, r8, r0
 8000d4c:	45a0      	cmp	r8, r4
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0x14c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x14a>
 8000d58:	45a0      	cmp	r8, r4
 8000d5a:	f200 80b6 	bhi.w	8000eca <__udivmoddi4+0x2b6>
 8000d5e:	4618      	mov	r0, r3
 8000d60:	eba4 0408 	sub.w	r4, r4, r8
 8000d64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d68:	e79f      	b.n	8000caa <__udivmoddi4+0x96>
 8000d6a:	f1c7 0c20 	rsb	ip, r7, #32
 8000d6e:	40bb      	lsls	r3, r7
 8000d70:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d74:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d78:	fa01 f407 	lsl.w	r4, r1, r7
 8000d7c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d80:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d84:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d88:	4325      	orrs	r5, r4
 8000d8a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d8e:	0c2c      	lsrs	r4, r5, #16
 8000d90:	fb08 3319 	mls	r3, r8, r9, r3
 8000d94:	fa1f fa8e 	uxth.w	sl, lr
 8000d98:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d9c:	fb09 f40a 	mul.w	r4, r9, sl
 8000da0:	429c      	cmp	r4, r3
 8000da2:	fa02 f207 	lsl.w	r2, r2, r7
 8000da6:	fa00 f107 	lsl.w	r1, r0, r7
 8000daa:	d90b      	bls.n	8000dc4 <__udivmoddi4+0x1b0>
 8000dac:	eb1e 0303 	adds.w	r3, lr, r3
 8000db0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db4:	f080 8087 	bcs.w	8000ec6 <__udivmoddi4+0x2b2>
 8000db8:	429c      	cmp	r4, r3
 8000dba:	f240 8084 	bls.w	8000ec6 <__udivmoddi4+0x2b2>
 8000dbe:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc2:	4473      	add	r3, lr
 8000dc4:	1b1b      	subs	r3, r3, r4
 8000dc6:	b2ad      	uxth	r5, r5
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dd8:	45a2      	cmp	sl, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x1da>
 8000ddc:	eb1e 0404 	adds.w	r4, lr, r4
 8000de0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de4:	d26b      	bcs.n	8000ebe <__udivmoddi4+0x2aa>
 8000de6:	45a2      	cmp	sl, r4
 8000de8:	d969      	bls.n	8000ebe <__udivmoddi4+0x2aa>
 8000dea:	3802      	subs	r0, #2
 8000dec:	4474      	add	r4, lr
 8000dee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df2:	fba0 8902 	umull	r8, r9, r0, r2
 8000df6:	eba4 040a 	sub.w	r4, r4, sl
 8000dfa:	454c      	cmp	r4, r9
 8000dfc:	46c2      	mov	sl, r8
 8000dfe:	464b      	mov	r3, r9
 8000e00:	d354      	bcc.n	8000eac <__udivmoddi4+0x298>
 8000e02:	d051      	beq.n	8000ea8 <__udivmoddi4+0x294>
 8000e04:	2e00      	cmp	r6, #0
 8000e06:	d069      	beq.n	8000edc <__udivmoddi4+0x2c8>
 8000e08:	ebb1 050a 	subs.w	r5, r1, sl
 8000e0c:	eb64 0403 	sbc.w	r4, r4, r3
 8000e10:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e14:	40fd      	lsrs	r5, r7
 8000e16:	40fc      	lsrs	r4, r7
 8000e18:	ea4c 0505 	orr.w	r5, ip, r5
 8000e1c:	e9c6 5400 	strd	r5, r4, [r6]
 8000e20:	2700      	movs	r7, #0
 8000e22:	e747      	b.n	8000cb4 <__udivmoddi4+0xa0>
 8000e24:	f1c2 0320 	rsb	r3, r2, #32
 8000e28:	fa20 f703 	lsr.w	r7, r0, r3
 8000e2c:	4095      	lsls	r5, r2
 8000e2e:	fa01 f002 	lsl.w	r0, r1, r2
 8000e32:	fa21 f303 	lsr.w	r3, r1, r3
 8000e36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3a:	4338      	orrs	r0, r7
 8000e3c:	0c01      	lsrs	r1, r0, #16
 8000e3e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e42:	fa1f f885 	uxth.w	r8, r5
 8000e46:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb07 f308 	mul.w	r3, r7, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	fa04 f402 	lsl.w	r4, r4, r2
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x256>
 8000e5a:	1869      	adds	r1, r5, r1
 8000e5c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e60:	d22f      	bcs.n	8000ec2 <__udivmoddi4+0x2ae>
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d92d      	bls.n	8000ec2 <__udivmoddi4+0x2ae>
 8000e66:	3f02      	subs	r7, #2
 8000e68:	4429      	add	r1, r5
 8000e6a:	1acb      	subs	r3, r1, r3
 8000e6c:	b281      	uxth	r1, r0
 8000e6e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e72:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e76:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7a:	fb00 f308 	mul.w	r3, r0, r8
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x27e>
 8000e82:	1869      	adds	r1, r5, r1
 8000e84:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e88:	d217      	bcs.n	8000eba <__udivmoddi4+0x2a6>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d915      	bls.n	8000eba <__udivmoddi4+0x2a6>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4429      	add	r1, r5
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e98:	e73b      	b.n	8000d12 <__udivmoddi4+0xfe>
 8000e9a:	4637      	mov	r7, r6
 8000e9c:	4630      	mov	r0, r6
 8000e9e:	e709      	b.n	8000cb4 <__udivmoddi4+0xa0>
 8000ea0:	4607      	mov	r7, r0
 8000ea2:	e6e7      	b.n	8000c74 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fb      	b.n	8000ca0 <__udivmoddi4+0x8c>
 8000ea8:	4541      	cmp	r1, r8
 8000eaa:	d2ab      	bcs.n	8000e04 <__udivmoddi4+0x1f0>
 8000eac:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb0:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	e7a4      	b.n	8000e04 <__udivmoddi4+0x1f0>
 8000eba:	4660      	mov	r0, ip
 8000ebc:	e7e9      	b.n	8000e92 <__udivmoddi4+0x27e>
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	e795      	b.n	8000dee <__udivmoddi4+0x1da>
 8000ec2:	4667      	mov	r7, ip
 8000ec4:	e7d1      	b.n	8000e6a <__udivmoddi4+0x256>
 8000ec6:	4681      	mov	r9, r0
 8000ec8:	e77c      	b.n	8000dc4 <__udivmoddi4+0x1b0>
 8000eca:	3802      	subs	r0, #2
 8000ecc:	442c      	add	r4, r5
 8000ece:	e747      	b.n	8000d60 <__udivmoddi4+0x14c>
 8000ed0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed4:	442b      	add	r3, r5
 8000ed6:	e72f      	b.n	8000d38 <__udivmoddi4+0x124>
 8000ed8:	4638      	mov	r0, r7
 8000eda:	e708      	b.n	8000cee <__udivmoddi4+0xda>
 8000edc:	4637      	mov	r7, r6
 8000ede:	e6e9      	b.n	8000cb4 <__udivmoddi4+0xa0>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eea:	463b      	mov	r3, r7
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ef6:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <MX_ADC1_Init+0x9c>)
 8000ef8:	4a22      	ldr	r2, [pc, #136]	; (8000f84 <MX_ADC1_Init+0xa0>)
 8000efa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000efc:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <MX_ADC1_Init+0x9c>)
 8000efe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f02:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f04:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <MX_ADC1_Init+0x9c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <MX_ADC1_Init+0x9c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f10:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <MX_ADC1_Init+0x9c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f16:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <MX_ADC1_Init+0x9c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <MX_ADC1_Init+0x9c>)
 8000f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f24:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000f26:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <MX_ADC1_Init+0x9c>)
 8000f28:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000f2c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f2e:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <MX_ADC1_Init+0x9c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <MX_ADC1_Init+0x9c>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <MX_ADC1_Init+0x9c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <MX_ADC1_Init+0x9c>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f48:	480d      	ldr	r0, [pc, #52]	; (8000f80 <MX_ADC1_Init+0x9c>)
 8000f4a:	f001 f865 	bl	8002018 <HAL_ADC_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000f54:	f000 fba4 	bl	80016a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000f58:	230e      	movs	r3, #14
 8000f5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f64:	463b      	mov	r3, r7
 8000f66:	4619      	mov	r1, r3
 8000f68:	4805      	ldr	r0, [pc, #20]	; (8000f80 <MX_ADC1_Init+0x9c>)
 8000f6a:	f001 f96d 	bl	8002248 <HAL_ADC_ConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000f74:	f000 fb94 	bl	80016a0 <Error_Handler>
  }

}
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20004108 	.word	0x20004108
 8000f84:	40012000 	.word	0x40012000

08000f88 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8e:	463b      	mov	r3, r7
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000f9a:	4b22      	ldr	r3, [pc, #136]	; (8001024 <MX_ADC2_Init+0x9c>)
 8000f9c:	4a22      	ldr	r2, [pc, #136]	; (8001028 <MX_ADC2_Init+0xa0>)
 8000f9e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fa0:	4b20      	ldr	r3, [pc, #128]	; (8001024 <MX_ADC2_Init+0x9c>)
 8000fa2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fa6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa8:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <MX_ADC2_Init+0x9c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000fae:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <MX_ADC2_Init+0x9c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <MX_ADC2_Init+0x9c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fba:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <MX_ADC2_Init+0x9c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <MX_ADC2_Init+0x9c>)
 8000fc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <MX_ADC2_Init+0x9c>)
 8000fcc:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000fd0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fd2:	4b14      	ldr	r3, [pc, #80]	; (8001024 <MX_ADC2_Init+0x9c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <MX_ADC2_Init+0x9c>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <MX_ADC2_Init+0x9c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <MX_ADC2_Init+0x9c>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fec:	480d      	ldr	r0, [pc, #52]	; (8001024 <MX_ADC2_Init+0x9c>)
 8000fee:	f001 f813 	bl	8002018 <HAL_ADC_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8000ff8:	f000 fb52 	bl	80016a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001000:	2301      	movs	r3, #1
 8001002:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001008:	463b      	mov	r3, r7
 800100a:	4619      	mov	r1, r3
 800100c:	4805      	ldr	r0, [pc, #20]	; (8001024 <MX_ADC2_Init+0x9c>)
 800100e:	f001 f91b 	bl	8002248 <HAL_ADC_ConfigChannel>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8001018:	f000 fb42 	bl	80016a0 <Error_Handler>
  }

}
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	200040c0 	.word	0x200040c0
 8001028:	40012100 	.word	0x40012100

0800102c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001032:	463b      	mov	r3, r7
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800103e:	4b32      	ldr	r3, [pc, #200]	; (8001108 <MX_ADC3_Init+0xdc>)
 8001040:	4a32      	ldr	r2, [pc, #200]	; (800110c <MX_ADC3_Init+0xe0>)
 8001042:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001044:	4b30      	ldr	r3, [pc, #192]	; (8001108 <MX_ADC3_Init+0xdc>)
 8001046:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800104a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800104c:	4b2e      	ldr	r3, [pc, #184]	; (8001108 <MX_ADC3_Init+0xdc>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8001052:	4b2d      	ldr	r3, [pc, #180]	; (8001108 <MX_ADC3_Init+0xdc>)
 8001054:	2201      	movs	r2, #1
 8001056:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001058:	4b2b      	ldr	r3, [pc, #172]	; (8001108 <MX_ADC3_Init+0xdc>)
 800105a:	2200      	movs	r2, #0
 800105c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = ENABLE;
 800105e:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <MX_ADC3_Init+0xdc>)
 8001060:	2201      	movs	r2, #1
 8001062:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.NbrOfDiscConversion = 1;
 8001066:	4b28      	ldr	r3, [pc, #160]	; (8001108 <MX_ADC3_Init+0xdc>)
 8001068:	2201      	movs	r2, #1
 800106a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800106c:	4b26      	ldr	r3, [pc, #152]	; (8001108 <MX_ADC3_Init+0xdc>)
 800106e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001072:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8001074:	4b24      	ldr	r3, [pc, #144]	; (8001108 <MX_ADC3_Init+0xdc>)
 8001076:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800107a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107c:	4b22      	ldr	r3, [pc, #136]	; (8001108 <MX_ADC3_Init+0xdc>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 3;
 8001082:	4b21      	ldr	r3, [pc, #132]	; (8001108 <MX_ADC3_Init+0xdc>)
 8001084:	2203      	movs	r2, #3
 8001086:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001088:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <MX_ADC3_Init+0xdc>)
 800108a:	2200      	movs	r2, #0
 800108c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001090:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <MX_ADC3_Init+0xdc>)
 8001092:	2201      	movs	r2, #1
 8001094:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001096:	481c      	ldr	r0, [pc, #112]	; (8001108 <MX_ADC3_Init+0xdc>)
 8001098:	f000 ffbe 	bl	8002018 <HAL_ADC_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_ADC3_Init+0x7a>
  {
    Error_Handler();
 80010a2:	f000 fafd 	bl	80016a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010aa:	2301      	movs	r3, #1
 80010ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010b2:	463b      	mov	r3, r7
 80010b4:	4619      	mov	r1, r3
 80010b6:	4814      	ldr	r0, [pc, #80]	; (8001108 <MX_ADC3_Init+0xdc>)
 80010b8:	f001 f8c6 	bl	8002248 <HAL_ADC_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 80010c2:	f000 faed 	bl	80016a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010c6:	2301      	movs	r3, #1
 80010c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80010ca:	2302      	movs	r3, #2
 80010cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010ce:	463b      	mov	r3, r7
 80010d0:	4619      	mov	r1, r3
 80010d2:	480d      	ldr	r0, [pc, #52]	; (8001108 <MX_ADC3_Init+0xdc>)
 80010d4:	f001 f8b8 	bl	8002248 <HAL_ADC_ConfigChannel>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 80010de:	f000 fadf 	bl	80016a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010e2:	230a      	movs	r3, #10
 80010e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80010e6:	2303      	movs	r3, #3
 80010e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010ea:	463b      	mov	r3, r7
 80010ec:	4619      	mov	r1, r3
 80010ee:	4806      	ldr	r0, [pc, #24]	; (8001108 <MX_ADC3_Init+0xdc>)
 80010f0:	f001 f8aa 	bl	8002248 <HAL_ADC_ConfigChannel>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 80010fa:	f000 fad1 	bl	80016a0 <Error_Handler>
  }

}
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20004150 	.word	0x20004150
 800110c:	40012200 	.word	0x40012200

08001110 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08e      	sub	sp, #56	; 0x38
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a52      	ldr	r2, [pc, #328]	; (8001278 <HAL_ADC_MspInit+0x168>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d128      	bne.n	8001184 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
 8001136:	4b51      	ldr	r3, [pc, #324]	; (800127c <HAL_ADC_MspInit+0x16c>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	4a50      	ldr	r2, [pc, #320]	; (800127c <HAL_ADC_MspInit+0x16c>)
 800113c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001140:	6453      	str	r3, [r2, #68]	; 0x44
 8001142:	4b4e      	ldr	r3, [pc, #312]	; (800127c <HAL_ADC_MspInit+0x16c>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800114a:	623b      	str	r3, [r7, #32]
 800114c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
 8001152:	4b4a      	ldr	r3, [pc, #296]	; (800127c <HAL_ADC_MspInit+0x16c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a49      	ldr	r2, [pc, #292]	; (800127c <HAL_ADC_MspInit+0x16c>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b47      	ldr	r3, [pc, #284]	; (800127c <HAL_ADC_MspInit+0x16c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	61fb      	str	r3, [r7, #28]
 8001168:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = A_Current_Pin;
 800116a:	2310      	movs	r3, #16
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800116e:	2303      	movs	r3, #3
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(A_Current_GPIO_Port, &GPIO_InitStruct);
 8001176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117a:	4619      	mov	r1, r3
 800117c:	4840      	ldr	r0, [pc, #256]	; (8001280 <HAL_ADC_MspInit+0x170>)
 800117e:	f001 fbbf 	bl	8002900 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001182:	e074      	b.n	800126e <HAL_ADC_MspInit+0x15e>
  else if(adcHandle->Instance==ADC2)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a3e      	ldr	r2, [pc, #248]	; (8001284 <HAL_ADC_MspInit+0x174>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d128      	bne.n	80011e0 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
 8001192:	4b3a      	ldr	r3, [pc, #232]	; (800127c <HAL_ADC_MspInit+0x16c>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	4a39      	ldr	r2, [pc, #228]	; (800127c <HAL_ADC_MspInit+0x16c>)
 8001198:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800119c:	6453      	str	r3, [r2, #68]	; 0x44
 800119e:	4b37      	ldr	r3, [pc, #220]	; (800127c <HAL_ADC_MspInit+0x16c>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011a6:	61bb      	str	r3, [r7, #24]
 80011a8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	4b33      	ldr	r3, [pc, #204]	; (800127c <HAL_ADC_MspInit+0x16c>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a32      	ldr	r2, [pc, #200]	; (800127c <HAL_ADC_MspInit+0x16c>)
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b30      	ldr	r3, [pc, #192]	; (800127c <HAL_ADC_MspInit+0x16c>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = B_Current_Pin;
 80011c6:	2320      	movs	r3, #32
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ca:	2303      	movs	r3, #3
 80011cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(B_Current_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d6:	4619      	mov	r1, r3
 80011d8:	4829      	ldr	r0, [pc, #164]	; (8001280 <HAL_ADC_MspInit+0x170>)
 80011da:	f001 fb91 	bl	8002900 <HAL_GPIO_Init>
}
 80011de:	e046      	b.n	800126e <HAL_ADC_MspInit+0x15e>
  else if(adcHandle->Instance==ADC3)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a28      	ldr	r2, [pc, #160]	; (8001288 <HAL_ADC_MspInit+0x178>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d141      	bne.n	800126e <HAL_ADC_MspInit+0x15e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	4b23      	ldr	r3, [pc, #140]	; (800127c <HAL_ADC_MspInit+0x16c>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	4a22      	ldr	r2, [pc, #136]	; (800127c <HAL_ADC_MspInit+0x16c>)
 80011f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011f8:	6453      	str	r3, [r2, #68]	; 0x44
 80011fa:	4b20      	ldr	r3, [pc, #128]	; (800127c <HAL_ADC_MspInit+0x16c>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b1c      	ldr	r3, [pc, #112]	; (800127c <HAL_ADC_MspInit+0x16c>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a1b      	ldr	r2, [pc, #108]	; (800127c <HAL_ADC_MspInit+0x16c>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <HAL_ADC_MspInit+0x16c>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <HAL_ADC_MspInit+0x16c>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a14      	ldr	r2, [pc, #80]	; (800127c <HAL_ADC_MspInit+0x16c>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_ADC_MspInit+0x16c>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FET_Temp_Pin;
 800123e:	2301      	movs	r3, #1
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001242:	2303      	movs	r3, #3
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(FET_Temp_GPIO_Port, &GPIO_InitStruct);
 800124a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124e:	4619      	mov	r1, r3
 8001250:	480b      	ldr	r0, [pc, #44]	; (8001280 <HAL_ADC_MspInit+0x170>)
 8001252:	f001 fb55 	bl	8002900 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DC_Voltage_Pin|Motor_Temp_Pin;
 8001256:	2303      	movs	r3, #3
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800125a:	2303      	movs	r3, #3
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001266:	4619      	mov	r1, r3
 8001268:	4808      	ldr	r0, [pc, #32]	; (800128c <HAL_ADC_MspInit+0x17c>)
 800126a:	f001 fb49 	bl	8002900 <HAL_GPIO_Init>
}
 800126e:	bf00      	nop
 8001270:	3738      	adds	r7, #56	; 0x38
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40012000 	.word	0x40012000
 800127c:	40023800 	.word	0x40023800
 8001280:	40020800 	.word	0x40020800
 8001284:	40012100 	.word	0x40012100
 8001288:	40012200 	.word	0x40012200
 800128c:	40020000 	.word	0x40020000

08001290 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <MX_CRC_Init+0x20>)
 8001296:	4a07      	ldr	r2, [pc, #28]	; (80012b4 <MX_CRC_Init+0x24>)
 8001298:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <MX_CRC_Init+0x20>)
 800129c:	f001 fb13 	bl	80028c6 <HAL_CRC_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80012a6:	f000 f9fb 	bl	80016a0 <Error_Handler>
  }

}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20004198 	.word	0x20004198
 80012b4:	40023000 	.word	0x40023000

080012b8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <HAL_CRC_MspInit+0x3c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d10d      	bne.n	80012e6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <HAL_CRC_MspInit+0x40>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a09      	ldr	r2, [pc, #36]	; (80012f8 <HAL_CRC_MspInit+0x40>)
 80012d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <HAL_CRC_MspInit+0x40>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40023000 	.word	0x40023000
 80012f8:	40023800 	.word	0x40023800

080012fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	4b38      	ldr	r3, [pc, #224]	; (80013f8 <MX_GPIO_Init+0xfc>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a37      	ldr	r2, [pc, #220]	; (80013f8 <MX_GPIO_Init+0xfc>)
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b35      	ldr	r3, [pc, #212]	; (80013f8 <MX_GPIO_Init+0xfc>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	4b31      	ldr	r3, [pc, #196]	; (80013f8 <MX_GPIO_Init+0xfc>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a30      	ldr	r2, [pc, #192]	; (80013f8 <MX_GPIO_Init+0xfc>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b2e      	ldr	r3, [pc, #184]	; (80013f8 <MX_GPIO_Init+0xfc>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	603b      	str	r3, [r7, #0]
 800134e:	4b2a      	ldr	r3, [pc, #168]	; (80013f8 <MX_GPIO_Init+0xfc>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a29      	ldr	r2, [pc, #164]	; (80013f8 <MX_GPIO_Init+0xfc>)
 8001354:	f043 0302 	orr.w	r3, r3, #2
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <MX_GPIO_Init+0xfc>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Encoder_CS_Pin|EN_GATE_Pin|DC_CAL_Pin|TP0_Pin
 8001366:	2200      	movs	r2, #0
 8001368:	f640 5188 	movw	r1, #3464	; 0xd88
 800136c:	4823      	ldr	r0, [pc, #140]	; (80013fc <MX_GPIO_Init+0x100>)
 800136e:	f001 fc59 	bl	8002c24 <HAL_GPIO_WritePin>
                          |TP1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ControlBus_TXEN_GPIO_Port, ControlBus_TXEN_Pin, GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	2110      	movs	r1, #16
 8001376:	4822      	ldr	r0, [pc, #136]	; (8001400 <MX_GPIO_Init+0x104>)
 8001378:	f001 fc54 	bl	8002c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Encoder_CS_Pin|EN_GATE_Pin|DC_CAL_Pin;
 800137c:	f44f 73c4 	mov.w	r3, #392	; 0x188
 8001380:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	4619      	mov	r1, r3
 8001394:	4819      	ldr	r0, [pc, #100]	; (80013fc <MX_GPIO_Init+0x100>)
 8001396:	f001 fab3 	bl	8002900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ControlBus_TXEN_Pin;
 800139a:	2310      	movs	r3, #16
 800139c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139e:	2301      	movs	r3, #1
 80013a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ControlBus_TXEN_GPIO_Port, &GPIO_InitStruct);
 80013aa:	f107 030c 	add.w	r3, r7, #12
 80013ae:	4619      	mov	r1, r3
 80013b0:	4813      	ldr	r0, [pc, #76]	; (8001400 <MX_GPIO_Init+0x104>)
 80013b2:	f001 faa5 	bl	8002900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nFAULT_Pin;
 80013b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(nFAULT_GPIO_Port, &GPIO_InitStruct);
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	4619      	mov	r1, r3
 80013ca:	480c      	ldr	r0, [pc, #48]	; (80013fc <MX_GPIO_Init+0x100>)
 80013cc:	f001 fa98 	bl	8002900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = TP0_Pin|TP1_Pin;
 80013d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013de:	2303      	movs	r3, #3
 80013e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e2:	f107 030c 	add.w	r3, r7, #12
 80013e6:	4619      	mov	r1, r3
 80013e8:	4804      	ldr	r0, [pc, #16]	; (80013fc <MX_GPIO_Init+0x100>)
 80013ea:	f001 fa89 	bl	8002900 <HAL_GPIO_Init>

}
 80013ee:	bf00      	nop
 80013f0:	3720      	adds	r7, #32
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020800 	.word	0x40020800
 8001400:	40020000 	.word	0x40020000

08001404 <JDriveMain>:
MotorControl Motor = MotorControl();

void Control();

void JDriveMain()
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
	StartOnBoardLED();
 800140a:	f003 feef 	bl	80051ec <_Z15StartOnBoardLEDv>
	for (uint8_t k = 0; k < 2; k++)
 800140e:	2300      	movs	r3, #0
 8001410:	71fb      	strb	r3, [r7, #7]
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d82b      	bhi.n	8001470 <JDriveMain+0x6c>
	{
		for (int16_t i = 0x0; i <= 0xFFF; i = i + 45)
 8001418:	2300      	movs	r3, #0
 800141a:	80bb      	strh	r3, [r7, #4]
 800141c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001424:	da0c      	bge.n	8001440 <JDriveMain+0x3c>
		{
			SetOnBoardLED(i);
 8001426:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800142a:	4618      	mov	r0, r3
 800142c:	f003 fee8 	bl	8005200 <_Z13SetOnBoardLEDm>
			Delaymillis(1);
 8001430:	2001      	movs	r0, #1
 8001432:	f004 f8e7 	bl	8005604 <_Z11Delaymillism>
		for (int16_t i = 0x0; i <= 0xFFF; i = i + 45)
 8001436:	88bb      	ldrh	r3, [r7, #4]
 8001438:	332d      	adds	r3, #45	; 0x2d
 800143a:	b29b      	uxth	r3, r3
 800143c:	80bb      	strh	r3, [r7, #4]
 800143e:	e7ed      	b.n	800141c <JDriveMain+0x18>
		}
		for (int16_t i = 0xFFF; i >= 0x0; i = i - 45)
 8001440:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001444:	807b      	strh	r3, [r7, #2]
 8001446:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800144a:	2b00      	cmp	r3, #0
 800144c:	db0c      	blt.n	8001468 <JDriveMain+0x64>
		{
			SetOnBoardLED(i);
 800144e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001452:	4618      	mov	r0, r3
 8001454:	f003 fed4 	bl	8005200 <_Z13SetOnBoardLEDm>
			Delaymillis(1);
 8001458:	2001      	movs	r0, #1
 800145a:	f004 f8d3 	bl	8005604 <_Z11Delaymillism>
		for (int16_t i = 0xFFF; i >= 0x0; i = i - 45)
 800145e:	887b      	ldrh	r3, [r7, #2]
 8001460:	3b2d      	subs	r3, #45	; 0x2d
 8001462:	b29b      	uxth	r3, r3
 8001464:	807b      	strh	r3, [r7, #2]
 8001466:	e7ee      	b.n	8001446 <JDriveMain+0x42>
	for (uint8_t k = 0; k < 2; k++)
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	3301      	adds	r3, #1
 800146c:	71fb      	strb	r3, [r7, #7]
 800146e:	e7d0      	b.n	8001412 <JDriveMain+0xe>
		}
	}

	FastMathInit();
 8001470:	f003 fd4e 	bl	8004f10 <_Z12FastMathInitv>
	StartADC();
 8001474:	f003 ff34 	bl	80052e0 <_Z8StartADCv>
	SetControlFunc(Control);
 8001478:	4830      	ldr	r0, [pc, #192]	; (800153c <JDriveMain+0x138>)
 800147a:	f003 fed1 	bl	8005220 <_Z14SetControlFuncPFvvE>
	StartControlTimer();
 800147e:	f003 fedf 	bl	8005240 <_Z17StartControlTimerv>

	for (uint8_t i = 0; i < 100; i++)
 8001482:	2300      	movs	r3, #0
 8001484:	707b      	strb	r3, [r7, #1]
 8001486:	787b      	ldrb	r3, [r7, #1]
 8001488:	2b63      	cmp	r3, #99	; 0x63
 800148a:	d819      	bhi.n	80014c0 <JDriveMain+0xbc>
	{
		Delaymillis(1);
 800148c:	2001      	movs	r0, #1
 800148e:	f004 f8b9 	bl	8005604 <_Z11Delaymillism>
		Motor.supplyVoltage += GetDCVoltageRaw() * DC_VOLTAGE_COEFF;
 8001492:	f003 ff59 	bl	8005348 <_Z15GetDCVoltageRawv>
 8001496:	4603      	mov	r3, r0
 8001498:	ee07 3a90 	vmov	s15, r3
 800149c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014a0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001540 <JDriveMain+0x13c>
 80014a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014a8:	4b26      	ldr	r3, [pc, #152]	; (8001544 <JDriveMain+0x140>)
 80014aa:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80014ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b2:	4b24      	ldr	r3, [pc, #144]	; (8001544 <JDriveMain+0x140>)
 80014b4:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	for (uint8_t i = 0; i < 100; i++)
 80014b8:	787b      	ldrb	r3, [r7, #1]
 80014ba:	3301      	adds	r3, #1
 80014bc:	707b      	strb	r3, [r7, #1]
 80014be:	e7e2      	b.n	8001486 <JDriveMain+0x82>
	}
	Motor.supplyVoltage /= 100.0f;
 80014c0:	4b20      	ldr	r3, [pc, #128]	; (8001544 <JDriveMain+0x140>)
 80014c2:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80014c6:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001548 <JDriveMain+0x144>
 80014ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ce:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <JDriveMain+0x140>)
 80014d0:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

	if (Motor.supplyVoltage >= OVERVOLTAGE_PROTECTION || Motor.supplyVoltage <= UNDERVOLTAGE_PROTECTION)
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <JDriveMain+0x140>)
 80014d6:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80014da:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800154c <JDriveMain+0x148>
 80014de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e6:	da09      	bge.n	80014fc <JDriveMain+0xf8>
 80014e8:	4b16      	ldr	r3, [pc, #88]	; (8001544 <JDriveMain+0x140>)
 80014ea:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80014ee:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001550 <JDriveMain+0x14c>
 80014f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fa:	d80d      	bhi.n	8001518 <JDriveMain+0x114>
	{
		//Supply voltage error
		while (1)
		{
			SetOnBoardLED(0xFFF);
 80014fc:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001500:	f003 fe7e 	bl	8005200 <_Z13SetOnBoardLEDm>
			Delaymillis(100);
 8001504:	2064      	movs	r0, #100	; 0x64
 8001506:	f004 f87d 	bl	8005604 <_Z11Delaymillism>
			SetOnBoardLED(0x0);
 800150a:	2000      	movs	r0, #0
 800150c:	f003 fe78 	bl	8005200 <_Z13SetOnBoardLEDm>
			Delaymillis(100);
 8001510:	2064      	movs	r0, #100	; 0x64
 8001512:	f004 f877 	bl	8005604 <_Z11Delaymillism>
			SetOnBoardLED(0xFFF);
 8001516:	e7f1      	b.n	80014fc <JDriveMain+0xf8>
		}
	}

	//Startup success
	SetOnBoardLED(0xFFF);
 8001518:	f640 70ff 	movw	r0, #4095	; 0xfff
 800151c:	f003 fe70 	bl	8005200 <_Z13SetOnBoardLEDm>
	Delaymillis(500);
 8001520:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001524:	f004 f86e 	bl	8005604 <_Z11Delaymillism>
	SetOnBoardLED(0x0);
 8001528:	2000      	movs	r0, #0
 800152a:	f003 fe69 	bl	8005200 <_Z13SetOnBoardLEDm>

	OnGateDriver();
 800152e:	f003 ff17 	bl	8005360 <_Z12OnGateDriverv>
	StartInverterPWM();
 8001532:	f003 fe93 	bl	800525c <_Z16StartInverterPWMv>
	ControlStart();
 8001536:	f003 fec7 	bl	80052c8 <_Z12ControlStartv>

	while(1);
 800153a:	e7fe      	b.n	800153a <JDriveMain+0x136>
 800153c:	08001555 	.word	0x08001555
 8001540:	3bf3cb3e 	.word	0x3bf3cb3e
 8001544:	2000002c 	.word	0x2000002c
 8001548:	42c80000 	.word	0x42c80000
 800154c:	41c0cccd 	.word	0x41c0cccd
 8001550:	40fccccd 	.word	0x40fccccd

08001554 <_Z7Controlv>:
}

void Control()
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	Motor.ControlUpdate();
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <_Z7Controlv+0x10>)
 800155a:	f003 ff0d 	bl	8005378 <_ZN12MotorControl13ControlUpdateEv>
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	2000002c 	.word	0x2000002c

08001568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800156c:	f000 fcc0 	bl	8001ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001570:	f000 f824 	bl	80015bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001574:	f7ff fec2 	bl	80012fc <MX_GPIO_Init>
  MX_TIM2_Init();
 8001578:	f000 fa80 	bl	8001a7c <MX_TIM2_Init>
  MX_CRC_Init();
 800157c:	f7ff fe88 	bl	8001290 <MX_CRC_Init>
  MX_USART2_UART_Init();
 8001580:	f000 fc1a 	bl	8001db8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001584:	f7ff fcae 	bl	8000ee4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001588:	f7ff fcfe 	bl	8000f88 <MX_ADC2_Init>
  MX_ADC3_Init();
 800158c:	f7ff fd4e 	bl	800102c <MX_ADC3_Init>
  MX_SPI2_Init();
 8001590:	f000 f88e 	bl	80016b0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001594:	f000 f9ba 	bl	800190c <MX_TIM1_Init>
  MX_TIM8_Init();
 8001598:	f000 fae6 	bl	8001b68 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(DC_CAL_GPIO_Port, DC_CAL_Pin, GPIO_PIN_SET);
 800159c:	2201      	movs	r2, #1
 800159e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <main+0x50>)
 80015a4:	f001 fb3e 	bl	8002c24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, GPIO_PIN_RESET);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2180      	movs	r1, #128	; 0x80
 80015ac:	4802      	ldr	r0, [pc, #8]	; (80015b8 <main+0x50>)
 80015ae:	f001 fb39 	bl	8002c24 <HAL_GPIO_WritePin>

  JDriveMain();
 80015b2:	f7ff ff27 	bl	8001404 <JDriveMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <main+0x4e>
 80015b8:	40020800 	.word	0x40020800

080015bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b094      	sub	sp, #80	; 0x50
 80015c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	2234      	movs	r2, #52	; 0x34
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f005 f85e 	bl	800668c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e0:	2300      	movs	r3, #0
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	4b2c      	ldr	r3, [pc, #176]	; (8001698 <SystemClock_Config+0xdc>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	4a2b      	ldr	r2, [pc, #172]	; (8001698 <SystemClock_Config+0xdc>)
 80015ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ee:	6413      	str	r3, [r2, #64]	; 0x40
 80015f0:	4b29      	ldr	r3, [pc, #164]	; (8001698 <SystemClock_Config+0xdc>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015fc:	2300      	movs	r3, #0
 80015fe:	603b      	str	r3, [r7, #0]
 8001600:	4b26      	ldr	r3, [pc, #152]	; (800169c <SystemClock_Config+0xe0>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a25      	ldr	r2, [pc, #148]	; (800169c <SystemClock_Config+0xe0>)
 8001606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	4b23      	ldr	r3, [pc, #140]	; (800169c <SystemClock_Config+0xe0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001614:	603b      	str	r3, [r7, #0]
 8001616:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001618:	2302      	movs	r3, #2
 800161a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800161c:	2301      	movs	r3, #1
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001620:	2310      	movs	r3, #16
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001624:	2302      	movs	r3, #2
 8001626:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001628:	2300      	movs	r3, #0
 800162a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800162c:	2308      	movs	r3, #8
 800162e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001630:	23b4      	movs	r3, #180	; 0xb4
 8001632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001634:	2302      	movs	r3, #2
 8001636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001638:	2302      	movs	r3, #2
 800163a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800163c:	2302      	movs	r3, #2
 800163e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	4618      	mov	r0, r3
 8001646:	f001 fe2b 	bl	80032a0 <HAL_RCC_OscConfig>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001650:	f000 f826 	bl	80016a0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001654:	f001 fb1a 	bl	8002c8c <HAL_PWREx_EnableOverDrive>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800165e:	f000 f81f 	bl	80016a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001662:	230f      	movs	r3, #15
 8001664:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001666:	2302      	movs	r3, #2
 8001668:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800166e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001678:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800167a:	f107 0308 	add.w	r3, r7, #8
 800167e:	2105      	movs	r1, #5
 8001680:	4618      	mov	r0, r3
 8001682:	f001 fb53 	bl	8002d2c <HAL_RCC_ClockConfig>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800168c:	f000 f808 	bl	80016a0 <Error_Handler>
  }
}
 8001690:	bf00      	nop
 8001692:	3750      	adds	r7, #80	; 0x50
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40023800 	.word	0x40023800
 800169c:	40007000 	.word	0x40007000

080016a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80016b4:	4b17      	ldr	r3, [pc, #92]	; (8001714 <MX_SPI2_Init+0x64>)
 80016b6:	4a18      	ldr	r2, [pc, #96]	; (8001718 <MX_SPI2_Init+0x68>)
 80016b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016ba:	4b16      	ldr	r3, [pc, #88]	; (8001714 <MX_SPI2_Init+0x64>)
 80016bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016c2:	4b14      	ldr	r3, [pc, #80]	; (8001714 <MX_SPI2_Init+0x64>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <MX_SPI2_Init+0x64>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016ce:	4b11      	ldr	r3, [pc, #68]	; (8001714 <MX_SPI2_Init+0x64>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80016d4:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <MX_SPI2_Init+0x64>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <MX_SPI2_Init+0x64>)
 80016dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80016e2:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <MX_SPI2_Init+0x64>)
 80016e4:	2208      	movs	r2, #8
 80016e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016e8:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <MX_SPI2_Init+0x64>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <MX_SPI2_Init+0x64>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016f4:	4b07      	ldr	r3, [pc, #28]	; (8001714 <MX_SPI2_Init+0x64>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <MX_SPI2_Init+0x64>)
 80016fc:	220a      	movs	r2, #10
 80016fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001700:	4804      	ldr	r0, [pc, #16]	; (8001714 <MX_SPI2_Init+0x64>)
 8001702:	f002 f827 	bl	8003754 <HAL_SPI_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800170c:	f7ff ffc8 	bl	80016a0 <Error_Handler>
  }

}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}
 8001714:	200041a0 	.word	0x200041a0
 8001718:	40003800 	.word	0x40003800

0800171c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a30      	ldr	r2, [pc, #192]	; (80017fc <HAL_SPI_MspInit+0xe0>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d15a      	bne.n	80017f4 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	4b2f      	ldr	r3, [pc, #188]	; (8001800 <HAL_SPI_MspInit+0xe4>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	4a2e      	ldr	r2, [pc, #184]	; (8001800 <HAL_SPI_MspInit+0xe4>)
 8001748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174c:	6413      	str	r3, [r2, #64]	; 0x40
 800174e:	4b2c      	ldr	r3, [pc, #176]	; (8001800 <HAL_SPI_MspInit+0xe4>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	4b28      	ldr	r3, [pc, #160]	; (8001800 <HAL_SPI_MspInit+0xe4>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a27      	ldr	r2, [pc, #156]	; (8001800 <HAL_SPI_MspInit+0xe4>)
 8001764:	f043 0304 	orr.w	r3, r3, #4
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b25      	ldr	r3, [pc, #148]	; (8001800 <HAL_SPI_MspInit+0xe4>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	4b21      	ldr	r3, [pc, #132]	; (8001800 <HAL_SPI_MspInit+0xe4>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a20      	ldr	r2, [pc, #128]	; (8001800 <HAL_SPI_MspInit+0xe4>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <HAL_SPI_MspInit+0xe4>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = Encoder_MOSI_Pin;
 8001792:	2302      	movs	r3, #2
 8001794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80017a2:	2307      	movs	r3, #7
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Encoder_MOSI_GPIO_Port, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	4815      	ldr	r0, [pc, #84]	; (8001804 <HAL_SPI_MspInit+0xe8>)
 80017ae:	f001 f8a7 	bl	8002900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Encoder_MISO_Pin;
 80017b2:	2304      	movs	r3, #4
 80017b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017be:	2303      	movs	r3, #3
 80017c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017c2:	2305      	movs	r3, #5
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Encoder_MISO_GPIO_Port, &GPIO_InitStruct);
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4619      	mov	r1, r3
 80017cc:	480d      	ldr	r0, [pc, #52]	; (8001804 <HAL_SPI_MspInit+0xe8>)
 80017ce:	f001 f897 	bl	8002900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Encoder_SCK_Pin;
 80017d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e0:	2303      	movs	r3, #3
 80017e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017e4:	2305      	movs	r3, #5
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Encoder_SCK_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	4806      	ldr	r0, [pc, #24]	; (8001808 <HAL_SPI_MspInit+0xec>)
 80017f0:	f001 f886 	bl	8002900 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80017f4:	bf00      	nop
 80017f6:	3728      	adds	r7, #40	; 0x28
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40003800 	.word	0x40003800
 8001800:	40023800 	.word	0x40023800
 8001804:	40020800 	.word	0x40020800
 8001808:	40020400 	.word	0x40020400

0800180c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <HAL_MspInit+0x4c>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	4a0f      	ldr	r2, [pc, #60]	; (8001858 <HAL_MspInit+0x4c>)
 800181c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001820:	6453      	str	r3, [r2, #68]	; 0x44
 8001822:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <HAL_MspInit+0x4c>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_MspInit+0x4c>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	4a08      	ldr	r2, [pc, #32]	; (8001858 <HAL_MspInit+0x4c>)
 8001838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183c:	6413      	str	r3, [r2, #64]	; 0x40
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_MspInit+0x4c>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	40023800 	.word	0x40023800

0800185c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800186e:	e7fe      	b.n	800186e <HardFault_Handler+0x4>

08001870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001874:	e7fe      	b.n	8001874 <MemManage_Handler+0x4>

08001876 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800187a:	e7fe      	b.n	800187a <BusFault_Handler+0x4>

0800187c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <UsageFault_Handler+0x4>

08001882 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b0:	f000 fb70 	bl	8001f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018bc:	4802      	ldr	r0, [pc, #8]	; (80018c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80018be:	f002 f86f 	bl	80039a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20004238 	.word	0x20004238

080018cc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <TIM8_UP_TIM13_IRQHandler+0x10>)
 80018d2:	f002 f865 	bl	80039a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200041f8 	.word	0x200041f8

080018e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <SystemInit+0x28>)
 80018e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ea:	4a07      	ldr	r2, [pc, #28]	; (8001908 <SystemInit+0x28>)
 80018ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <SystemInit+0x28>)
 80018f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018fa:	609a      	str	r2, [r3, #8]
#endif
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b096      	sub	sp, #88	; 0x58
 8001910:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001912:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001920:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800192a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	611a      	str	r2, [r3, #16]
 800193a:	615a      	str	r2, [r3, #20]
 800193c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	2220      	movs	r2, #32
 8001942:	2100      	movs	r1, #0
 8001944:	4618      	mov	r0, r3
 8001946:	f004 fea1 	bl	800668c <memset>

  htim1.Instance = TIM1;
 800194a:	4b4a      	ldr	r3, [pc, #296]	; (8001a74 <MX_TIM1_Init+0x168>)
 800194c:	4a4a      	ldr	r2, [pc, #296]	; (8001a78 <MX_TIM1_Init+0x16c>)
 800194e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001950:	4b48      	ldr	r3, [pc, #288]	; (8001a74 <MX_TIM1_Init+0x168>)
 8001952:	2200      	movs	r2, #0
 8001954:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8001956:	4b47      	ldr	r3, [pc, #284]	; (8001a74 <MX_TIM1_Init+0x168>)
 8001958:	2240      	movs	r2, #64	; 0x40
 800195a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xfff;
 800195c:	4b45      	ldr	r3, [pc, #276]	; (8001a74 <MX_TIM1_Init+0x168>)
 800195e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001962:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001964:	4b43      	ldr	r3, [pc, #268]	; (8001a74 <MX_TIM1_Init+0x168>)
 8001966:	2200      	movs	r2, #0
 8001968:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 800196a:	4b42      	ldr	r3, [pc, #264]	; (8001a74 <MX_TIM1_Init+0x168>)
 800196c:	2201      	movs	r2, #1
 800196e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001970:	4b40      	ldr	r3, [pc, #256]	; (8001a74 <MX_TIM1_Init+0x168>)
 8001972:	2200      	movs	r2, #0
 8001974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001976:	483f      	ldr	r0, [pc, #252]	; (8001a74 <MX_TIM1_Init+0x168>)
 8001978:	f001 ff50 	bl	800381c <HAL_TIM_Base_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001982:	f7ff fe8d 	bl	80016a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800198a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800198c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001990:	4619      	mov	r1, r3
 8001992:	4838      	ldr	r0, [pc, #224]	; (8001a74 <MX_TIM1_Init+0x168>)
 8001994:	f002 f9d2 	bl	8003d3c <HAL_TIM_ConfigClockSource>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800199e:	f7ff fe7f 	bl	80016a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019a2:	4834      	ldr	r0, [pc, #208]	; (8001a74 <MX_TIM1_Init+0x168>)
 80019a4:	f001 ff89 	bl	80038ba <HAL_TIM_PWM_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80019ae:	f7ff fe77 	bl	80016a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b2:	2300      	movs	r3, #0
 80019b4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019be:	4619      	mov	r1, r3
 80019c0:	482c      	ldr	r0, [pc, #176]	; (8001a74 <MX_TIM1_Init+0x168>)
 80019c2:	f002 fdd5 	bl	8004570 <HAL_TIMEx_MasterConfigSynchronization>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80019cc:	f7ff fe68 	bl	80016a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019d0:	2360      	movs	r3, #96	; 0x60
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d8:	2300      	movs	r3, #0
 80019da:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019dc:	2300      	movs	r3, #0
 80019de:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019e4:	2300      	movs	r3, #0
 80019e6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019e8:	2300      	movs	r3, #0
 80019ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f0:	2200      	movs	r2, #0
 80019f2:	4619      	mov	r1, r3
 80019f4:	481f      	ldr	r0, [pc, #124]	; (8001a74 <MX_TIM1_Init+0x168>)
 80019f6:	f002 f8db 	bl	8003bb0 <HAL_TIM_PWM_ConfigChannel>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001a00:	f7ff fe4e 	bl	80016a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a08:	2204      	movs	r2, #4
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4819      	ldr	r0, [pc, #100]	; (8001a74 <MX_TIM1_Init+0x168>)
 8001a0e:	f002 f8cf 	bl	8003bb0 <HAL_TIM_PWM_ConfigChannel>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001a18:	f7ff fe42 	bl	80016a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a20:	2208      	movs	r2, #8
 8001a22:	4619      	mov	r1, r3
 8001a24:	4813      	ldr	r0, [pc, #76]	; (8001a74 <MX_TIM1_Init+0x168>)
 8001a26:	f002 f8c3 	bl	8003bb0 <HAL_TIM_PWM_ConfigChannel>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001a30:	f7ff fe36 	bl	80016a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = DEADTIME_CLK;
 8001a40:	2332      	movs	r3, #50	; 0x32
 8001a42:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a4c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	4619      	mov	r1, r3
 8001a56:	4807      	ldr	r0, [pc, #28]	; (8001a74 <MX_TIM1_Init+0x168>)
 8001a58:	f002 fe06 	bl	8004668 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001a62:	f7ff fe1d 	bl	80016a0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001a66:	4803      	ldr	r0, [pc, #12]	; (8001a74 <MX_TIM1_Init+0x168>)
 8001a68:	f000 f928 	bl	8001cbc <HAL_TIM_MspPostInit>

}
 8001a6c:	bf00      	nop
 8001a6e:	3758      	adds	r7, #88	; 0x58
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20004238 	.word	0x20004238
 8001a78:	40010000 	.word	0x40010000

08001a7c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08e      	sub	sp, #56	; 0x38
 8001a80:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a90:	f107 0320 	add.w	r3, r7, #32
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
 8001aa8:	615a      	str	r2, [r3, #20]
 8001aaa:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001aac:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <MX_TIM2_Init+0xe8>)
 8001aae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ab2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ab4:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <MX_TIM2_Init+0xe8>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aba:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <MX_TIM2_Init+0xe8>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xfff;
 8001ac0:	4b28      	ldr	r3, [pc, #160]	; (8001b64 <MX_TIM2_Init+0xe8>)
 8001ac2:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001ac6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac8:	4b26      	ldr	r3, [pc, #152]	; (8001b64 <MX_TIM2_Init+0xe8>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ace:	4b25      	ldr	r3, [pc, #148]	; (8001b64 <MX_TIM2_Init+0xe8>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ad4:	4823      	ldr	r0, [pc, #140]	; (8001b64 <MX_TIM2_Init+0xe8>)
 8001ad6:	f001 fea1 	bl	800381c <HAL_TIM_Base_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001ae0:	f7ff fdde 	bl	80016a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001aea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aee:	4619      	mov	r1, r3
 8001af0:	481c      	ldr	r0, [pc, #112]	; (8001b64 <MX_TIM2_Init+0xe8>)
 8001af2:	f002 f923 	bl	8003d3c <HAL_TIM_ConfigClockSource>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001afc:	f7ff fdd0 	bl	80016a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b00:	4818      	ldr	r0, [pc, #96]	; (8001b64 <MX_TIM2_Init+0xe8>)
 8001b02:	f001 feda 	bl	80038ba <HAL_TIM_PWM_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001b0c:	f7ff fdc8 	bl	80016a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b10:	2300      	movs	r3, #0
 8001b12:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b18:	f107 0320 	add.w	r3, r7, #32
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4811      	ldr	r0, [pc, #68]	; (8001b64 <MX_TIM2_Init+0xe8>)
 8001b20:	f002 fd26 	bl	8004570 <HAL_TIMEx_MasterConfigSynchronization>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001b2a:	f7ff fdb9 	bl	80016a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b2e:	2360      	movs	r3, #96	; 0x60
 8001b30:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	220c      	movs	r2, #12
 8001b42:	4619      	mov	r1, r3
 8001b44:	4807      	ldr	r0, [pc, #28]	; (8001b64 <MX_TIM2_Init+0xe8>)
 8001b46:	f002 f833 	bl	8003bb0 <HAL_TIM_PWM_ConfigChannel>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001b50:	f7ff fda6 	bl	80016a0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001b54:	4803      	ldr	r0, [pc, #12]	; (8001b64 <MX_TIM2_Init+0xe8>)
 8001b56:	f000 f8b1 	bl	8001cbc <HAL_TIM_MspPostInit>

}
 8001b5a:	bf00      	nop
 8001b5c:	3738      	adds	r7, #56	; 0x38
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20004278 	.word	0x20004278

08001b68 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b6e:	f107 0308 	add.w	r3, r7, #8
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]

  htim8.Instance = TIM8;
 8001b84:	4b1e      	ldr	r3, [pc, #120]	; (8001c00 <MX_TIM8_Init+0x98>)
 8001b86:	4a1f      	ldr	r2, [pc, #124]	; (8001c04 <MX_TIM8_Init+0x9c>)
 8001b88:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <MX_TIM8_Init+0x98>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b90:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <MX_TIM8_Init+0x98>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0xfff;
 8001b96:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <MX_TIM8_Init+0x98>)
 8001b98:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001b9c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9e:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <MX_TIM8_Init+0x98>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001ba4:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <MX_TIM8_Init+0x98>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <MX_TIM8_Init+0x98>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001bb0:	4813      	ldr	r0, [pc, #76]	; (8001c00 <MX_TIM8_Init+0x98>)
 8001bb2:	f001 fe33 	bl	800381c <HAL_TIM_Base_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001bbc:	f7ff fd70 	bl	80016a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001bc6:	f107 0308 	add.w	r3, r7, #8
 8001bca:	4619      	mov	r1, r3
 8001bcc:	480c      	ldr	r0, [pc, #48]	; (8001c00 <MX_TIM8_Init+0x98>)
 8001bce:	f002 f8b5 	bl	8003d3c <HAL_TIM_ConfigClockSource>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001bd8:	f7ff fd62 	bl	80016a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001bdc:	2320      	movs	r3, #32
 8001bde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001be0:	2380      	movs	r3, #128	; 0x80
 8001be2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001be4:	463b      	mov	r3, r7
 8001be6:	4619      	mov	r1, r3
 8001be8:	4805      	ldr	r0, [pc, #20]	; (8001c00 <MX_TIM8_Init+0x98>)
 8001bea:	f002 fcc1 	bl	8004570 <HAL_TIMEx_MasterConfigSynchronization>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001bf4:	f7ff fd54 	bl	80016a0 <Error_Handler>
  }

}
 8001bf8:	bf00      	nop
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	200041f8 	.word	0x200041f8
 8001c04:	40010400 	.word	0x40010400

08001c08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a26      	ldr	r2, [pc, #152]	; (8001cb0 <HAL_TIM_Base_MspInit+0xa8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d116      	bne.n	8001c48 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <HAL_TIM_Base_MspInit+0xac>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	4a24      	ldr	r2, [pc, #144]	; (8001cb4 <HAL_TIM_Base_MspInit+0xac>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2a:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <HAL_TIM_Base_MspInit+0xac>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2100      	movs	r1, #0
 8001c3a:	2019      	movs	r0, #25
 8001c3c:	f000 fe0d 	bl	800285a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c40:	2019      	movs	r0, #25
 8001c42:	f000 fe26 	bl	8002892 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001c46:	e02e      	b.n	8001ca6 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM2)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c50:	d10e      	bne.n	8001c70 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <HAL_TIM_Base_MspInit+0xac>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	4a16      	ldr	r2, [pc, #88]	; (8001cb4 <HAL_TIM_Base_MspInit+0xac>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6413      	str	r3, [r2, #64]	; 0x40
 8001c62:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <HAL_TIM_Base_MspInit+0xac>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]
}
 8001c6e:	e01a      	b.n	8001ca6 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM8)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a10      	ldr	r2, [pc, #64]	; (8001cb8 <HAL_TIM_Base_MspInit+0xb0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d115      	bne.n	8001ca6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <HAL_TIM_Base_MspInit+0xac>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	4a0c      	ldr	r2, [pc, #48]	; (8001cb4 <HAL_TIM_Base_MspInit+0xac>)
 8001c84:	f043 0302 	orr.w	r3, r3, #2
 8001c88:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <HAL_TIM_Base_MspInit+0xac>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	202c      	movs	r0, #44	; 0x2c
 8001c9c:	f000 fddd 	bl	800285a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001ca0:	202c      	movs	r0, #44	; 0x2c
 8001ca2:	f000 fdf6 	bl	8002892 <HAL_NVIC_EnableIRQ>
}
 8001ca6:	bf00      	nop
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40010000 	.word	0x40010000
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40010400 	.word	0x40010400

08001cbc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a33      	ldr	r2, [pc, #204]	; (8001da8 <HAL_TIM_MspPostInit+0xec>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d13d      	bne.n	8001d5a <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	4b32      	ldr	r3, [pc, #200]	; (8001dac <HAL_TIM_MspPostInit+0xf0>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a31      	ldr	r2, [pc, #196]	; (8001dac <HAL_TIM_MspPostInit+0xf0>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b2f      	ldr	r3, [pc, #188]	; (8001dac <HAL_TIM_MspPostInit+0xf0>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b2b      	ldr	r3, [pc, #172]	; (8001dac <HAL_TIM_MspPostInit+0xf0>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a2a      	ldr	r2, [pc, #168]	; (8001dac <HAL_TIM_MspPostInit+0xf0>)
 8001d04:	f043 0302 	orr.w	r3, r3, #2
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b28      	ldr	r3, [pc, #160]	; (8001dac <HAL_TIM_MspPostInit+0xf0>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = AL_Pin|AH_Pin|BH_Pin|CH_Pin;
 8001d16:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d24:	2300      	movs	r3, #0
 8001d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	4619      	mov	r1, r3
 8001d32:	481f      	ldr	r0, [pc, #124]	; (8001db0 <HAL_TIM_MspPostInit+0xf4>)
 8001d34:	f000 fde4 	bl	8002900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BL_Pin|CL_Pin;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2300      	movs	r3, #0
 8001d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	4619      	mov	r1, r3
 8001d52:	4818      	ldr	r0, [pc, #96]	; (8001db4 <HAL_TIM_MspPostInit+0xf8>)
 8001d54:	f000 fdd4 	bl	8002900 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d58:	e022      	b.n	8001da0 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM2)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d62:	d11d      	bne.n	8001da0 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d64:	2300      	movs	r3, #0
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	4b10      	ldr	r3, [pc, #64]	; (8001dac <HAL_TIM_MspPostInit+0xf0>)
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6c:	4a0f      	ldr	r2, [pc, #60]	; (8001dac <HAL_TIM_MspPostInit+0xf0>)
 8001d6e:	f043 0302 	orr.w	r3, r3, #2
 8001d72:	6313      	str	r3, [r2, #48]	; 0x30
 8001d74:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <HAL_TIM_MspPostInit+0xf0>)
 8001d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LED_Pin;
 8001d80:	2304      	movs	r3, #4
 8001d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d90:	2301      	movs	r3, #1
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4806      	ldr	r0, [pc, #24]	; (8001db4 <HAL_TIM_MspPostInit+0xf8>)
 8001d9c:	f000 fdb0 	bl	8002900 <HAL_GPIO_Init>
}
 8001da0:	bf00      	nop
 8001da2:	3728      	adds	r7, #40	; 0x28
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40010000 	.word	0x40010000
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40020000 	.word	0x40020000
 8001db4:	40020400 	.word	0x40020400

08001db8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001dbe:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <MX_USART2_UART_Init+0x50>)
 8001dc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001dc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dca:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ddc:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001dde:	220c      	movs	r2, #12
 8001de0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001de2:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dee:	4805      	ldr	r0, [pc, #20]	; (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001df0:	f002 fcc5 	bl	800477e <HAL_UART_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001dfa:	f7ff fc51 	bl	80016a0 <Error_Handler>
  }

}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	200042b8 	.word	0x200042b8
 8001e08:	40004400 	.word	0x40004400

08001e0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	; 0x28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a19      	ldr	r2, [pc, #100]	; (8001e90 <HAL_UART_MspInit+0x84>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d12b      	bne.n	8001e86 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <HAL_UART_MspInit+0x88>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	4a17      	ldr	r2, [pc, #92]	; (8001e94 <HAL_UART_MspInit+0x88>)
 8001e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <HAL_UART_MspInit+0x88>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <HAL_UART_MspInit+0x88>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4a10      	ldr	r2, [pc, #64]	; (8001e94 <HAL_UART_MspInit+0x88>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <HAL_UART_MspInit+0x88>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = ControlBus_TX_Pin|ControlBus_RX_Pin;
 8001e66:	230c      	movs	r3, #12
 8001e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e76:	2307      	movs	r3, #7
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4805      	ldr	r0, [pc, #20]	; (8001e98 <HAL_UART_MspInit+0x8c>)
 8001e82:	f000 fd3d 	bl	8002900 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e86:	bf00      	nop
 8001e88:	3728      	adds	r7, #40	; 0x28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40004400 	.word	0x40004400
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40020000 	.word	0x40020000

08001e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ed4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ea0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ea2:	e003      	b.n	8001eac <LoopCopyDataInit>

08001ea4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ea6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ea8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001eaa:	3104      	adds	r1, #4

08001eac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001eac:	480b      	ldr	r0, [pc, #44]	; (8001edc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001eae:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001eb0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001eb2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001eb4:	d3f6      	bcc.n	8001ea4 <CopyDataInit>
  ldr  r2, =_sbss
 8001eb6:	4a0b      	ldr	r2, [pc, #44]	; (8001ee4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001eb8:	e002      	b.n	8001ec0 <LoopFillZerobss>

08001eba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001eba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ebc:	f842 3b04 	str.w	r3, [r2], #4

08001ec0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ec2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ec4:	d3f9      	bcc.n	8001eba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ec6:	f7ff fd0b 	bl	80018e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eca:	f004 fbbb 	bl	8006644 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ece:	f7ff fb4b 	bl	8001568 <main>
  bx  lr    
 8001ed2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ed4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001ed8:	080068b8 	.word	0x080068b8
  ldr  r0, =_sdata
 8001edc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ee0:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001ee4:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001ee8:	200042fc 	.word	0x200042fc

08001eec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eec:	e7fe      	b.n	8001eec <ADC_IRQHandler>
	...

08001ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ef4:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <HAL_Init+0x40>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a0d      	ldr	r2, [pc, #52]	; (8001f30 <HAL_Init+0x40>)
 8001efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001efe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_Init+0x40>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <HAL_Init+0x40>)
 8001f06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f0c:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <HAL_Init+0x40>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a07      	ldr	r2, [pc, #28]	; (8001f30 <HAL_Init+0x40>)
 8001f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f18:	2003      	movs	r0, #3
 8001f1a:	f000 fc93 	bl	8002844 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f000 f808 	bl	8001f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f24:	f7ff fc72 	bl	800180c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40023c00 	.word	0x40023c00

08001f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f3c:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HAL_InitTick+0x54>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <HAL_InitTick+0x58>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	4619      	mov	r1, r3
 8001f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 fcab 	bl	80028ae <HAL_SYSTICK_Config>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e00e      	b.n	8001f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b0f      	cmp	r3, #15
 8001f66:	d80a      	bhi.n	8001f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f70:	f000 fc73 	bl	800285a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f74:	4a06      	ldr	r2, [pc, #24]	; (8001f90 <HAL_InitTick+0x5c>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	e000      	b.n	8001f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000000 	.word	0x20000000
 8001f8c:	20000008 	.word	0x20000008
 8001f90:	20000004 	.word	0x20000004

08001f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_IncTick+0x20>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_IncTick+0x24>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	4a04      	ldr	r2, [pc, #16]	; (8001fb8 <HAL_IncTick+0x24>)
 8001fa6:	6013      	str	r3, [r2, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	20000008 	.word	0x20000008
 8001fb8:	200042f8 	.word	0x200042f8

08001fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc0:	4b03      	ldr	r3, [pc, #12]	; (8001fd0 <HAL_GetTick+0x14>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	200042f8 	.word	0x200042f8

08001fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fdc:	f7ff ffee 	bl	8001fbc <HAL_GetTick>
 8001fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fec:	d005      	beq.n	8001ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <HAL_Delay+0x40>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ffa:	bf00      	nop
 8001ffc:	f7ff ffde 	bl	8001fbc <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	429a      	cmp	r2, r3
 800200a:	d8f7      	bhi.n	8001ffc <HAL_Delay+0x28>
  {
  }
}
 800200c:	bf00      	nop
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000008 	.word	0x20000008

08002018 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e033      	b.n	8002096 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	2b00      	cmp	r3, #0
 8002034:	d109      	bne.n	800204a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff f86a 	bl	8001110 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	2b00      	cmp	r3, #0
 8002054:	d118      	bne.n	8002088 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800205e:	f023 0302 	bic.w	r3, r3, #2
 8002062:	f043 0202 	orr.w	r2, r3, #2
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 fa1e 	bl	80024ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f023 0303 	bic.w	r3, r3, #3
 800207e:	f043 0201 	orr.w	r2, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	641a      	str	r2, [r3, #64]	; 0x40
 8002086:	e001      	b.n	800208c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002094:	7bfb      	ldrb	r3, [r7, #15]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <HAL_ADC_Start+0x1a>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e0a5      	b.n	8002206 <HAL_ADC_Start+0x166>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d018      	beq.n	8002102 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0201 	orr.w	r2, r2, #1
 80020de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020e0:	4b4c      	ldr	r3, [pc, #304]	; (8002214 <HAL_ADC_Start+0x174>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a4c      	ldr	r2, [pc, #304]	; (8002218 <HAL_ADC_Start+0x178>)
 80020e6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ea:	0c9a      	lsrs	r2, r3, #18
 80020ec:	4613      	mov	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80020f4:	e002      	b.n	80020fc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	3b01      	subs	r3, #1
 80020fa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f9      	bne.n	80020f6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b01      	cmp	r3, #1
 800210e:	d179      	bne.n	8002204 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002118:	f023 0301 	bic.w	r3, r3, #1
 800211c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800212e:	2b00      	cmp	r3, #0
 8002130:	d007      	beq.n	8002142 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800213a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800214a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800214e:	d106      	bne.n	800215e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002154:	f023 0206 	bic.w	r2, r3, #6
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	645a      	str	r2, [r3, #68]	; 0x44
 800215c:	e002      	b.n	8002164 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800216c:	4b2b      	ldr	r3, [pc, #172]	; (800221c <HAL_ADC_Start+0x17c>)
 800216e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002178:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 031f 	and.w	r3, r3, #31
 8002182:	2b00      	cmp	r3, #0
 8002184:	d12a      	bne.n	80021dc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a25      	ldr	r2, [pc, #148]	; (8002220 <HAL_ADC_Start+0x180>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d015      	beq.n	80021bc <HAL_ADC_Start+0x11c>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a23      	ldr	r2, [pc, #140]	; (8002224 <HAL_ADC_Start+0x184>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d105      	bne.n	80021a6 <HAL_ADC_Start+0x106>
 800219a:	4b20      	ldr	r3, [pc, #128]	; (800221c <HAL_ADC_Start+0x17c>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 031f 	and.w	r3, r3, #31
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a1f      	ldr	r2, [pc, #124]	; (8002228 <HAL_ADC_Start+0x188>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d129      	bne.n	8002204 <HAL_ADC_Start+0x164>
 80021b0:	4b1a      	ldr	r3, [pc, #104]	; (800221c <HAL_ADC_Start+0x17c>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 031f 	and.w	r3, r3, #31
 80021b8:	2b0f      	cmp	r3, #15
 80021ba:	d823      	bhi.n	8002204 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d11c      	bne.n	8002204 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021d8:	609a      	str	r2, [r3, #8]
 80021da:	e013      	b.n	8002204 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a0f      	ldr	r2, [pc, #60]	; (8002220 <HAL_ADC_Start+0x180>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d10e      	bne.n	8002204 <HAL_ADC_Start+0x164>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d107      	bne.n	8002204 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002202:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000000 	.word	0x20000000
 8002218:	431bde83 	.word	0x431bde83
 800221c:	40012300 	.word	0x40012300
 8002220:	40012000 	.word	0x40012000
 8002224:	40012100 	.word	0x40012100
 8002228:	40012200 	.word	0x40012200

0800222c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800225c:	2b01      	cmp	r3, #1
 800225e:	d101      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x1c>
 8002260:	2302      	movs	r3, #2
 8002262:	e113      	b.n	800248c <HAL_ADC_ConfigChannel+0x244>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b09      	cmp	r3, #9
 8002272:	d925      	bls.n	80022c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68d9      	ldr	r1, [r3, #12]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	b29b      	uxth	r3, r3
 8002280:	461a      	mov	r2, r3
 8002282:	4613      	mov	r3, r2
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	4413      	add	r3, r2
 8002288:	3b1e      	subs	r3, #30
 800228a:	2207      	movs	r2, #7
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43da      	mvns	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	400a      	ands	r2, r1
 8002298:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68d9      	ldr	r1, [r3, #12]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	4618      	mov	r0, r3
 80022ac:	4603      	mov	r3, r0
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4403      	add	r3, r0
 80022b2:	3b1e      	subs	r3, #30
 80022b4:	409a      	lsls	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	e022      	b.n	8002306 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6919      	ldr	r1, [r3, #16]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	4613      	mov	r3, r2
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	4413      	add	r3, r2
 80022d4:	2207      	movs	r2, #7
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43da      	mvns	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	400a      	ands	r2, r1
 80022e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6919      	ldr	r1, [r3, #16]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	4618      	mov	r0, r3
 80022f6:	4603      	mov	r3, r0
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	4403      	add	r3, r0
 80022fc:	409a      	lsls	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b06      	cmp	r3, #6
 800230c:	d824      	bhi.n	8002358 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	3b05      	subs	r3, #5
 8002320:	221f      	movs	r2, #31
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43da      	mvns	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	400a      	ands	r2, r1
 800232e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	b29b      	uxth	r3, r3
 800233c:	4618      	mov	r0, r3
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	3b05      	subs	r3, #5
 800234a:	fa00 f203 	lsl.w	r2, r0, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	635a      	str	r2, [r3, #52]	; 0x34
 8002356:	e04c      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b0c      	cmp	r3, #12
 800235e:	d824      	bhi.n	80023aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	3b23      	subs	r3, #35	; 0x23
 8002372:	221f      	movs	r2, #31
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43da      	mvns	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	400a      	ands	r2, r1
 8002380:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	b29b      	uxth	r3, r3
 800238e:	4618      	mov	r0, r3
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	3b23      	subs	r3, #35	; 0x23
 800239c:	fa00 f203 	lsl.w	r2, r0, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	631a      	str	r2, [r3, #48]	; 0x30
 80023a8:	e023      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	3b41      	subs	r3, #65	; 0x41
 80023bc:	221f      	movs	r2, #31
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43da      	mvns	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	400a      	ands	r2, r1
 80023ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	4618      	mov	r0, r3
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	3b41      	subs	r3, #65	; 0x41
 80023e6:	fa00 f203 	lsl.w	r2, r0, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023f2:	4b29      	ldr	r3, [pc, #164]	; (8002498 <HAL_ADC_ConfigChannel+0x250>)
 80023f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a28      	ldr	r2, [pc, #160]	; (800249c <HAL_ADC_ConfigChannel+0x254>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d10f      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x1d8>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b12      	cmp	r3, #18
 8002406:	d10b      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a1d      	ldr	r2, [pc, #116]	; (800249c <HAL_ADC_ConfigChannel+0x254>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d12b      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x23a>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a1c      	ldr	r2, [pc, #112]	; (80024a0 <HAL_ADC_ConfigChannel+0x258>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d003      	beq.n	800243c <HAL_ADC_ConfigChannel+0x1f4>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b11      	cmp	r3, #17
 800243a:	d122      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a11      	ldr	r2, [pc, #68]	; (80024a0 <HAL_ADC_ConfigChannel+0x258>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d111      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800245e:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <HAL_ADC_ConfigChannel+0x25c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a11      	ldr	r2, [pc, #68]	; (80024a8 <HAL_ADC_ConfigChannel+0x260>)
 8002464:	fba2 2303 	umull	r2, r3, r2, r3
 8002468:	0c9a      	lsrs	r2, r3, #18
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002474:	e002      	b.n	800247c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	3b01      	subs	r3, #1
 800247a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f9      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	40012300 	.word	0x40012300
 800249c:	40012000 	.word	0x40012000
 80024a0:	10000012 	.word	0x10000012
 80024a4:	20000000 	.word	0x20000000
 80024a8:	431bde83 	.word	0x431bde83

080024ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024b4:	4b79      	ldr	r3, [pc, #484]	; (800269c <ADC_Init+0x1f0>)
 80024b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	431a      	orrs	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6859      	ldr	r1, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	021a      	lsls	r2, r3, #8
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002504:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6859      	ldr	r1, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002526:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6899      	ldr	r1, [r3, #8]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253e:	4a58      	ldr	r2, [pc, #352]	; (80026a0 <ADC_Init+0x1f4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d022      	beq.n	800258a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002552:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6899      	ldr	r1, [r3, #8]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002574:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6899      	ldr	r1, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	e00f      	b.n	80025aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002598:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0202 	bic.w	r2, r2, #2
 80025b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6899      	ldr	r1, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	7e1b      	ldrb	r3, [r3, #24]
 80025c4:	005a      	lsls	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d01b      	beq.n	8002610 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6859      	ldr	r1, [r3, #4]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	3b01      	subs	r3, #1
 8002604:	035a      	lsls	r2, r3, #13
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	e007      	b.n	8002620 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800261e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800262e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	3b01      	subs	r3, #1
 800263c:	051a      	lsls	r2, r3, #20
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002654:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6899      	ldr	r1, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002662:	025a      	lsls	r2, r3, #9
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800267a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6899      	ldr	r1, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	029a      	lsls	r2, r3, #10
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	609a      	str	r2, [r3, #8]
}
 8002690:	bf00      	nop
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	40012300 	.word	0x40012300
 80026a0:	0f000001 	.word	0x0f000001

080026a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <__NVIC_SetPriorityGrouping+0x44>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026c0:	4013      	ands	r3, r2
 80026c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026d6:	4a04      	ldr	r2, [pc, #16]	; (80026e8 <__NVIC_SetPriorityGrouping+0x44>)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	60d3      	str	r3, [r2, #12]
}
 80026dc:	bf00      	nop
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f0:	4b04      	ldr	r3, [pc, #16]	; (8002704 <__NVIC_GetPriorityGrouping+0x18>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	0a1b      	lsrs	r3, r3, #8
 80026f6:	f003 0307 	and.w	r3, r3, #7
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002716:	2b00      	cmp	r3, #0
 8002718:	db0b      	blt.n	8002732 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	f003 021f 	and.w	r2, r3, #31
 8002720:	4907      	ldr	r1, [pc, #28]	; (8002740 <__NVIC_EnableIRQ+0x38>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	095b      	lsrs	r3, r3, #5
 8002728:	2001      	movs	r0, #1
 800272a:	fa00 f202 	lsl.w	r2, r0, r2
 800272e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	e000e100 	.word	0xe000e100

08002744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	6039      	str	r1, [r7, #0]
 800274e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002754:	2b00      	cmp	r3, #0
 8002756:	db0a      	blt.n	800276e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	b2da      	uxtb	r2, r3
 800275c:	490c      	ldr	r1, [pc, #48]	; (8002790 <__NVIC_SetPriority+0x4c>)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	0112      	lsls	r2, r2, #4
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	440b      	add	r3, r1
 8002768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800276c:	e00a      	b.n	8002784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	b2da      	uxtb	r2, r3
 8002772:	4908      	ldr	r1, [pc, #32]	; (8002794 <__NVIC_SetPriority+0x50>)
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	3b04      	subs	r3, #4
 800277c:	0112      	lsls	r2, r2, #4
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	440b      	add	r3, r1
 8002782:	761a      	strb	r2, [r3, #24]
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	e000e100 	.word	0xe000e100
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002798:	b480      	push	{r7}
 800279a:	b089      	sub	sp, #36	; 0x24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f1c3 0307 	rsb	r3, r3, #7
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	bf28      	it	cs
 80027b6:	2304      	movcs	r3, #4
 80027b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3304      	adds	r3, #4
 80027be:	2b06      	cmp	r3, #6
 80027c0:	d902      	bls.n	80027c8 <NVIC_EncodePriority+0x30>
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3b03      	subs	r3, #3
 80027c6:	e000      	b.n	80027ca <NVIC_EncodePriority+0x32>
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	f04f 32ff 	mov.w	r2, #4294967295
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43da      	mvns	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	401a      	ands	r2, r3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e0:	f04f 31ff 	mov.w	r1, #4294967295
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ea:	43d9      	mvns	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f0:	4313      	orrs	r3, r2
         );
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3724      	adds	r7, #36	; 0x24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3b01      	subs	r3, #1
 800280c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002810:	d301      	bcc.n	8002816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002812:	2301      	movs	r3, #1
 8002814:	e00f      	b.n	8002836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002816:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <SysTick_Config+0x40>)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3b01      	subs	r3, #1
 800281c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800281e:	210f      	movs	r1, #15
 8002820:	f04f 30ff 	mov.w	r0, #4294967295
 8002824:	f7ff ff8e 	bl	8002744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002828:	4b05      	ldr	r3, [pc, #20]	; (8002840 <SysTick_Config+0x40>)
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800282e:	4b04      	ldr	r3, [pc, #16]	; (8002840 <SysTick_Config+0x40>)
 8002830:	2207      	movs	r2, #7
 8002832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	e000e010 	.word	0xe000e010

08002844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff ff29 	bl	80026a4 <__NVIC_SetPriorityGrouping>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800285a:	b580      	push	{r7, lr}
 800285c:	b086      	sub	sp, #24
 800285e:	af00      	add	r7, sp, #0
 8002860:	4603      	mov	r3, r0
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
 8002866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800286c:	f7ff ff3e 	bl	80026ec <__NVIC_GetPriorityGrouping>
 8002870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	68b9      	ldr	r1, [r7, #8]
 8002876:	6978      	ldr	r0, [r7, #20]
 8002878:	f7ff ff8e 	bl	8002798 <NVIC_EncodePriority>
 800287c:	4602      	mov	r2, r0
 800287e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002882:	4611      	mov	r1, r2
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ff5d 	bl	8002744 <__NVIC_SetPriority>
}
 800288a:	bf00      	nop
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	4603      	mov	r3, r0
 800289a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800289c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ff31 	bl	8002708 <__NVIC_EnableIRQ>
}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b082      	sub	sp, #8
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ffa2 	bl	8002800 <SysTick_Config>
 80028bc:	4603      	mov	r3, r0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e00e      	b.n	80028f6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	795b      	ldrb	r3, [r3, #5]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d105      	bne.n	80028ee <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7fe fce5 	bl	80012b8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
	...

08002900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002900:	b480      	push	{r7}
 8002902:	b089      	sub	sp, #36	; 0x24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800290a:	2300      	movs	r3, #0
 800290c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	e165      	b.n	8002be8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800291c:	2201      	movs	r2, #1
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	429a      	cmp	r2, r3
 8002936:	f040 8154 	bne.w	8002be2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d00b      	beq.n	800295a <HAL_GPIO_Init+0x5a>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d007      	beq.n	800295a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800294e:	2b11      	cmp	r3, #17
 8002950:	d003      	beq.n	800295a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b12      	cmp	r3, #18
 8002958:	d130      	bne.n	80029bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	2203      	movs	r2, #3
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002990:	2201      	movs	r2, #1
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	f003 0201 	and.w	r2, r3, #1
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	2203      	movs	r2, #3
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d003      	beq.n	80029fc <HAL_GPIO_Init+0xfc>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b12      	cmp	r3, #18
 80029fa:	d123      	bne.n	8002a44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	08da      	lsrs	r2, r3, #3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3208      	adds	r2, #8
 8002a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	220f      	movs	r2, #15
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	08da      	lsrs	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3208      	adds	r2, #8
 8002a3e:	69b9      	ldr	r1, [r7, #24]
 8002a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	2203      	movs	r2, #3
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 0203 	and.w	r2, r3, #3
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 80ae 	beq.w	8002be2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	4b5c      	ldr	r3, [pc, #368]	; (8002bfc <HAL_GPIO_Init+0x2fc>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	4a5b      	ldr	r2, [pc, #364]	; (8002bfc <HAL_GPIO_Init+0x2fc>)
 8002a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a94:	6453      	str	r3, [r2, #68]	; 0x44
 8002a96:	4b59      	ldr	r3, [pc, #356]	; (8002bfc <HAL_GPIO_Init+0x2fc>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aa2:	4a57      	ldr	r2, [pc, #348]	; (8002c00 <HAL_GPIO_Init+0x300>)
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	089b      	lsrs	r3, r3, #2
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	220f      	movs	r2, #15
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a4e      	ldr	r2, [pc, #312]	; (8002c04 <HAL_GPIO_Init+0x304>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d025      	beq.n	8002b1a <HAL_GPIO_Init+0x21a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a4d      	ldr	r2, [pc, #308]	; (8002c08 <HAL_GPIO_Init+0x308>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d01f      	beq.n	8002b16 <HAL_GPIO_Init+0x216>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a4c      	ldr	r2, [pc, #304]	; (8002c0c <HAL_GPIO_Init+0x30c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d019      	beq.n	8002b12 <HAL_GPIO_Init+0x212>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a4b      	ldr	r2, [pc, #300]	; (8002c10 <HAL_GPIO_Init+0x310>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d013      	beq.n	8002b0e <HAL_GPIO_Init+0x20e>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a4a      	ldr	r2, [pc, #296]	; (8002c14 <HAL_GPIO_Init+0x314>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d00d      	beq.n	8002b0a <HAL_GPIO_Init+0x20a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a49      	ldr	r2, [pc, #292]	; (8002c18 <HAL_GPIO_Init+0x318>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d007      	beq.n	8002b06 <HAL_GPIO_Init+0x206>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a48      	ldr	r2, [pc, #288]	; (8002c1c <HAL_GPIO_Init+0x31c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d101      	bne.n	8002b02 <HAL_GPIO_Init+0x202>
 8002afe:	2306      	movs	r3, #6
 8002b00:	e00c      	b.n	8002b1c <HAL_GPIO_Init+0x21c>
 8002b02:	2307      	movs	r3, #7
 8002b04:	e00a      	b.n	8002b1c <HAL_GPIO_Init+0x21c>
 8002b06:	2305      	movs	r3, #5
 8002b08:	e008      	b.n	8002b1c <HAL_GPIO_Init+0x21c>
 8002b0a:	2304      	movs	r3, #4
 8002b0c:	e006      	b.n	8002b1c <HAL_GPIO_Init+0x21c>
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e004      	b.n	8002b1c <HAL_GPIO_Init+0x21c>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e002      	b.n	8002b1c <HAL_GPIO_Init+0x21c>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <HAL_GPIO_Init+0x21c>
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	69fa      	ldr	r2, [r7, #28]
 8002b1e:	f002 0203 	and.w	r2, r2, #3
 8002b22:	0092      	lsls	r2, r2, #2
 8002b24:	4093      	lsls	r3, r2
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b2c:	4934      	ldr	r1, [pc, #208]	; (8002c00 <HAL_GPIO_Init+0x300>)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	089b      	lsrs	r3, r3, #2
 8002b32:	3302      	adds	r3, #2
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b3a:	4b39      	ldr	r3, [pc, #228]	; (8002c20 <HAL_GPIO_Init+0x320>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	43db      	mvns	r3, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4013      	ands	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b5e:	4a30      	ldr	r2, [pc, #192]	; (8002c20 <HAL_GPIO_Init+0x320>)
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b64:	4b2e      	ldr	r3, [pc, #184]	; (8002c20 <HAL_GPIO_Init+0x320>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b88:	4a25      	ldr	r2, [pc, #148]	; (8002c20 <HAL_GPIO_Init+0x320>)
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b8e:	4b24      	ldr	r3, [pc, #144]	; (8002c20 <HAL_GPIO_Init+0x320>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	43db      	mvns	r3, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bb2:	4a1b      	ldr	r2, [pc, #108]	; (8002c20 <HAL_GPIO_Init+0x320>)
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bb8:	4b19      	ldr	r3, [pc, #100]	; (8002c20 <HAL_GPIO_Init+0x320>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bdc:	4a10      	ldr	r2, [pc, #64]	; (8002c20 <HAL_GPIO_Init+0x320>)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	3301      	adds	r3, #1
 8002be6:	61fb      	str	r3, [r7, #28]
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	2b0f      	cmp	r3, #15
 8002bec:	f67f ae96 	bls.w	800291c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bf0:	bf00      	nop
 8002bf2:	3724      	adds	r7, #36	; 0x24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40013800 	.word	0x40013800
 8002c04:	40020000 	.word	0x40020000
 8002c08:	40020400 	.word	0x40020400
 8002c0c:	40020800 	.word	0x40020800
 8002c10:	40020c00 	.word	0x40020c00
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40021400 	.word	0x40021400
 8002c1c:	40021800 	.word	0x40021800
 8002c20:	40013c00 	.word	0x40013c00

08002c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	807b      	strh	r3, [r7, #2]
 8002c30:	4613      	mov	r3, r2
 8002c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c34:	787b      	ldrb	r3, [r7, #1]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c3a:	887a      	ldrh	r2, [r7, #2]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c40:	e003      	b.n	8002c4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c42:	887b      	ldrh	r3, [r7, #2]
 8002c44:	041a      	lsls	r2, r3, #16
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	619a      	str	r2, [r3, #24]
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695a      	ldr	r2, [r3, #20]
 8002c66:	887b      	ldrh	r3, [r7, #2]
 8002c68:	401a      	ands	r2, r3
 8002c6a:	887b      	ldrh	r3, [r7, #2]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d104      	bne.n	8002c7a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002c70:	887b      	ldrh	r3, [r7, #2]
 8002c72:	041a      	lsls	r2, r3, #16
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002c78:	e002      	b.n	8002c80 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002c7a:	887a      	ldrh	r2, [r7, #2]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	619a      	str	r2, [r3, #24]
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	603b      	str	r3, [r7, #0]
 8002c9a:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <HAL_PWREx_EnableOverDrive+0x90>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	4a1f      	ldr	r2, [pc, #124]	; (8002d1c <HAL_PWREx_EnableOverDrive+0x90>)
 8002ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca6:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <HAL_PWREx_EnableOverDrive+0x90>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002cb2:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <HAL_PWREx_EnableOverDrive+0x94>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cb8:	f7ff f980 	bl	8001fbc <HAL_GetTick>
 8002cbc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cbe:	e009      	b.n	8002cd4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cc0:	f7ff f97c 	bl	8001fbc <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cce:	d901      	bls.n	8002cd4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e01f      	b.n	8002d14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cd4:	4b13      	ldr	r3, [pc, #76]	; (8002d24 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce0:	d1ee      	bne.n	8002cc0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ce2:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ce8:	f7ff f968 	bl	8001fbc <HAL_GetTick>
 8002cec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cee:	e009      	b.n	8002d04 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cf0:	f7ff f964 	bl	8001fbc <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cfe:	d901      	bls.n	8002d04 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e007      	b.n	8002d14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d04:	4b07      	ldr	r3, [pc, #28]	; (8002d24 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d10:	d1ee      	bne.n	8002cf0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	420e0040 	.word	0x420e0040
 8002d24:	40007000 	.word	0x40007000
 8002d28:	420e0044 	.word	0x420e0044

08002d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0cc      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d40:	4b68      	ldr	r3, [pc, #416]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 030f 	and.w	r3, r3, #15
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d90c      	bls.n	8002d68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4e:	4b65      	ldr	r3, [pc, #404]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b63      	ldr	r3, [pc, #396]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e0b8      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d020      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d80:	4b59      	ldr	r3, [pc, #356]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	4a58      	ldr	r2, [pc, #352]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d98:	4b53      	ldr	r3, [pc, #332]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4a52      	ldr	r2, [pc, #328]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002da2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da4:	4b50      	ldr	r3, [pc, #320]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	494d      	ldr	r1, [pc, #308]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d044      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d107      	bne.n	8002dda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dca:	4b47      	ldr	r3, [pc, #284]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d119      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e07f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d003      	beq.n	8002dea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d107      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dea:	4b3f      	ldr	r3, [pc, #252]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e06f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfa:	4b3b      	ldr	r3, [pc, #236]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e067      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e0a:	4b37      	ldr	r3, [pc, #220]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f023 0203 	bic.w	r2, r3, #3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	4934      	ldr	r1, [pc, #208]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e1c:	f7ff f8ce 	bl	8001fbc <HAL_GetTick>
 8002e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e22:	e00a      	b.n	8002e3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e24:	f7ff f8ca 	bl	8001fbc <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e04f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 020c 	and.w	r2, r3, #12
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d1eb      	bne.n	8002e24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e4c:	4b25      	ldr	r3, [pc, #148]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 030f 	and.w	r3, r3, #15
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d20c      	bcs.n	8002e74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5a:	4b22      	ldr	r3, [pc, #136]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b20      	ldr	r3, [pc, #128]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e032      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e80:	4b19      	ldr	r3, [pc, #100]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	4916      	ldr	r1, [pc, #88]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d009      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e9e:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	490e      	ldr	r1, [pc, #56]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eb2:	f000 f855 	bl	8002f60 <HAL_RCC_GetSysClockFreq>
 8002eb6:	4601      	mov	r1, r0
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	091b      	lsrs	r3, r3, #4
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	4a0a      	ldr	r2, [pc, #40]	; (8002eec <HAL_RCC_ClockConfig+0x1c0>)
 8002ec4:	5cd3      	ldrb	r3, [r2, r3]
 8002ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8002eca:	4a09      	ldr	r2, [pc, #36]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff f82e 	bl	8001f34 <HAL_InitTick>

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40023c00 	.word	0x40023c00
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	080066b8 	.word	0x080066b8
 8002ef0:	20000000 	.word	0x20000000
 8002ef4:	20000004 	.word	0x20000004

08002ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002efc:	4b03      	ldr	r3, [pc, #12]	; (8002f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002efe:	681b      	ldr	r3, [r3, #0]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	20000000 	.word	0x20000000

08002f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f14:	f7ff fff0 	bl	8002ef8 <HAL_RCC_GetHCLKFreq>
 8002f18:	4601      	mov	r1, r0
 8002f1a:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	0a9b      	lsrs	r3, r3, #10
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	4a03      	ldr	r2, [pc, #12]	; (8002f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f26:	5cd3      	ldrb	r3, [r2, r3]
 8002f28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40023800 	.word	0x40023800
 8002f34:	080066c8 	.word	0x080066c8

08002f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f3c:	f7ff ffdc 	bl	8002ef8 <HAL_RCC_GetHCLKFreq>
 8002f40:	4601      	mov	r1, r0
 8002f42:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	0b5b      	lsrs	r3, r3, #13
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	4a03      	ldr	r2, [pc, #12]	; (8002f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f4e:	5cd3      	ldrb	r3, [r2, r3]
 8002f50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	080066c8 	.word	0x080066c8

08002f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f7a:	4bc6      	ldr	r3, [pc, #792]	; (8003294 <HAL_RCC_GetSysClockFreq+0x334>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
 8002f82:	2b0c      	cmp	r3, #12
 8002f84:	f200 817e 	bhi.w	8003284 <HAL_RCC_GetSysClockFreq+0x324>
 8002f88:	a201      	add	r2, pc, #4	; (adr r2, 8002f90 <HAL_RCC_GetSysClockFreq+0x30>)
 8002f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8e:	bf00      	nop
 8002f90:	08002fc5 	.word	0x08002fc5
 8002f94:	08003285 	.word	0x08003285
 8002f98:	08003285 	.word	0x08003285
 8002f9c:	08003285 	.word	0x08003285
 8002fa0:	08002fcb 	.word	0x08002fcb
 8002fa4:	08003285 	.word	0x08003285
 8002fa8:	08003285 	.word	0x08003285
 8002fac:	08003285 	.word	0x08003285
 8002fb0:	08002fd1 	.word	0x08002fd1
 8002fb4:	08003285 	.word	0x08003285
 8002fb8:	08003285 	.word	0x08003285
 8002fbc:	08003285 	.word	0x08003285
 8002fc0:	0800312d 	.word	0x0800312d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fc4:	4bb4      	ldr	r3, [pc, #720]	; (8003298 <HAL_RCC_GetSysClockFreq+0x338>)
 8002fc6:	613b      	str	r3, [r7, #16]
       break;
 8002fc8:	e15f      	b.n	800328a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fca:	4bb4      	ldr	r3, [pc, #720]	; (800329c <HAL_RCC_GetSysClockFreq+0x33c>)
 8002fcc:	613b      	str	r3, [r7, #16]
      break;
 8002fce:	e15c      	b.n	800328a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fd0:	4bb0      	ldr	r3, [pc, #704]	; (8003294 <HAL_RCC_GetSysClockFreq+0x334>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fd8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fda:	4bae      	ldr	r3, [pc, #696]	; (8003294 <HAL_RCC_GetSysClockFreq+0x334>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d04a      	beq.n	800307c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe6:	4bab      	ldr	r3, [pc, #684]	; (8003294 <HAL_RCC_GetSysClockFreq+0x334>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	099b      	lsrs	r3, r3, #6
 8002fec:	f04f 0400 	mov.w	r4, #0
 8002ff0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	ea03 0501 	and.w	r5, r3, r1
 8002ffc:	ea04 0602 	and.w	r6, r4, r2
 8003000:	4629      	mov	r1, r5
 8003002:	4632      	mov	r2, r6
 8003004:	f04f 0300 	mov.w	r3, #0
 8003008:	f04f 0400 	mov.w	r4, #0
 800300c:	0154      	lsls	r4, r2, #5
 800300e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003012:	014b      	lsls	r3, r1, #5
 8003014:	4619      	mov	r1, r3
 8003016:	4622      	mov	r2, r4
 8003018:	1b49      	subs	r1, r1, r5
 800301a:	eb62 0206 	sbc.w	r2, r2, r6
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	f04f 0400 	mov.w	r4, #0
 8003026:	0194      	lsls	r4, r2, #6
 8003028:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800302c:	018b      	lsls	r3, r1, #6
 800302e:	1a5b      	subs	r3, r3, r1
 8003030:	eb64 0402 	sbc.w	r4, r4, r2
 8003034:	f04f 0100 	mov.w	r1, #0
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	00e2      	lsls	r2, r4, #3
 800303e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003042:	00d9      	lsls	r1, r3, #3
 8003044:	460b      	mov	r3, r1
 8003046:	4614      	mov	r4, r2
 8003048:	195b      	adds	r3, r3, r5
 800304a:	eb44 0406 	adc.w	r4, r4, r6
 800304e:	f04f 0100 	mov.w	r1, #0
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	0262      	lsls	r2, r4, #9
 8003058:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800305c:	0259      	lsls	r1, r3, #9
 800305e:	460b      	mov	r3, r1
 8003060:	4614      	mov	r4, r2
 8003062:	4618      	mov	r0, r3
 8003064:	4621      	mov	r1, r4
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f04f 0400 	mov.w	r4, #0
 800306c:	461a      	mov	r2, r3
 800306e:	4623      	mov	r3, r4
 8003070:	f7fd fdb8 	bl	8000be4 <__aeabi_uldivmod>
 8003074:	4603      	mov	r3, r0
 8003076:	460c      	mov	r4, r1
 8003078:	617b      	str	r3, [r7, #20]
 800307a:	e049      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800307c:	4b85      	ldr	r3, [pc, #532]	; (8003294 <HAL_RCC_GetSysClockFreq+0x334>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	099b      	lsrs	r3, r3, #6
 8003082:	f04f 0400 	mov.w	r4, #0
 8003086:	f240 11ff 	movw	r1, #511	; 0x1ff
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	ea03 0501 	and.w	r5, r3, r1
 8003092:	ea04 0602 	and.w	r6, r4, r2
 8003096:	4629      	mov	r1, r5
 8003098:	4632      	mov	r2, r6
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	f04f 0400 	mov.w	r4, #0
 80030a2:	0154      	lsls	r4, r2, #5
 80030a4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030a8:	014b      	lsls	r3, r1, #5
 80030aa:	4619      	mov	r1, r3
 80030ac:	4622      	mov	r2, r4
 80030ae:	1b49      	subs	r1, r1, r5
 80030b0:	eb62 0206 	sbc.w	r2, r2, r6
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	f04f 0400 	mov.w	r4, #0
 80030bc:	0194      	lsls	r4, r2, #6
 80030be:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030c2:	018b      	lsls	r3, r1, #6
 80030c4:	1a5b      	subs	r3, r3, r1
 80030c6:	eb64 0402 	sbc.w	r4, r4, r2
 80030ca:	f04f 0100 	mov.w	r1, #0
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	00e2      	lsls	r2, r4, #3
 80030d4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030d8:	00d9      	lsls	r1, r3, #3
 80030da:	460b      	mov	r3, r1
 80030dc:	4614      	mov	r4, r2
 80030de:	195b      	adds	r3, r3, r5
 80030e0:	eb44 0406 	adc.w	r4, r4, r6
 80030e4:	f04f 0100 	mov.w	r1, #0
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	02a2      	lsls	r2, r4, #10
 80030ee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80030f2:	0299      	lsls	r1, r3, #10
 80030f4:	460b      	mov	r3, r1
 80030f6:	4614      	mov	r4, r2
 80030f8:	4618      	mov	r0, r3
 80030fa:	4621      	mov	r1, r4
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f04f 0400 	mov.w	r4, #0
 8003102:	461a      	mov	r2, r3
 8003104:	4623      	mov	r3, r4
 8003106:	f7fd fd6d 	bl	8000be4 <__aeabi_uldivmod>
 800310a:	4603      	mov	r3, r0
 800310c:	460c      	mov	r4, r1
 800310e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003110:	4b60      	ldr	r3, [pc, #384]	; (8003294 <HAL_RCC_GetSysClockFreq+0x334>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	0c1b      	lsrs	r3, r3, #16
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	3301      	adds	r3, #1
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	fbb2 f3f3 	udiv	r3, r2, r3
 8003128:	613b      	str	r3, [r7, #16]
      break;
 800312a:	e0ae      	b.n	800328a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800312c:	4b59      	ldr	r3, [pc, #356]	; (8003294 <HAL_RCC_GetSysClockFreq+0x334>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003134:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003136:	4b57      	ldr	r3, [pc, #348]	; (8003294 <HAL_RCC_GetSysClockFreq+0x334>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d04a      	beq.n	80031d8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003142:	4b54      	ldr	r3, [pc, #336]	; (8003294 <HAL_RCC_GetSysClockFreq+0x334>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	099b      	lsrs	r3, r3, #6
 8003148:	f04f 0400 	mov.w	r4, #0
 800314c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	ea03 0501 	and.w	r5, r3, r1
 8003158:	ea04 0602 	and.w	r6, r4, r2
 800315c:	4629      	mov	r1, r5
 800315e:	4632      	mov	r2, r6
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	f04f 0400 	mov.w	r4, #0
 8003168:	0154      	lsls	r4, r2, #5
 800316a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800316e:	014b      	lsls	r3, r1, #5
 8003170:	4619      	mov	r1, r3
 8003172:	4622      	mov	r2, r4
 8003174:	1b49      	subs	r1, r1, r5
 8003176:	eb62 0206 	sbc.w	r2, r2, r6
 800317a:	f04f 0300 	mov.w	r3, #0
 800317e:	f04f 0400 	mov.w	r4, #0
 8003182:	0194      	lsls	r4, r2, #6
 8003184:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003188:	018b      	lsls	r3, r1, #6
 800318a:	1a5b      	subs	r3, r3, r1
 800318c:	eb64 0402 	sbc.w	r4, r4, r2
 8003190:	f04f 0100 	mov.w	r1, #0
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	00e2      	lsls	r2, r4, #3
 800319a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800319e:	00d9      	lsls	r1, r3, #3
 80031a0:	460b      	mov	r3, r1
 80031a2:	4614      	mov	r4, r2
 80031a4:	195b      	adds	r3, r3, r5
 80031a6:	eb44 0406 	adc.w	r4, r4, r6
 80031aa:	f04f 0100 	mov.w	r1, #0
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	0262      	lsls	r2, r4, #9
 80031b4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80031b8:	0259      	lsls	r1, r3, #9
 80031ba:	460b      	mov	r3, r1
 80031bc:	4614      	mov	r4, r2
 80031be:	4618      	mov	r0, r3
 80031c0:	4621      	mov	r1, r4
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f04f 0400 	mov.w	r4, #0
 80031c8:	461a      	mov	r2, r3
 80031ca:	4623      	mov	r3, r4
 80031cc:	f7fd fd0a 	bl	8000be4 <__aeabi_uldivmod>
 80031d0:	4603      	mov	r3, r0
 80031d2:	460c      	mov	r4, r1
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	e049      	b.n	800326c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031d8:	4b2e      	ldr	r3, [pc, #184]	; (8003294 <HAL_RCC_GetSysClockFreq+0x334>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	099b      	lsrs	r3, r3, #6
 80031de:	f04f 0400 	mov.w	r4, #0
 80031e2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	ea03 0501 	and.w	r5, r3, r1
 80031ee:	ea04 0602 	and.w	r6, r4, r2
 80031f2:	4629      	mov	r1, r5
 80031f4:	4632      	mov	r2, r6
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	f04f 0400 	mov.w	r4, #0
 80031fe:	0154      	lsls	r4, r2, #5
 8003200:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003204:	014b      	lsls	r3, r1, #5
 8003206:	4619      	mov	r1, r3
 8003208:	4622      	mov	r2, r4
 800320a:	1b49      	subs	r1, r1, r5
 800320c:	eb62 0206 	sbc.w	r2, r2, r6
 8003210:	f04f 0300 	mov.w	r3, #0
 8003214:	f04f 0400 	mov.w	r4, #0
 8003218:	0194      	lsls	r4, r2, #6
 800321a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800321e:	018b      	lsls	r3, r1, #6
 8003220:	1a5b      	subs	r3, r3, r1
 8003222:	eb64 0402 	sbc.w	r4, r4, r2
 8003226:	f04f 0100 	mov.w	r1, #0
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	00e2      	lsls	r2, r4, #3
 8003230:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003234:	00d9      	lsls	r1, r3, #3
 8003236:	460b      	mov	r3, r1
 8003238:	4614      	mov	r4, r2
 800323a:	195b      	adds	r3, r3, r5
 800323c:	eb44 0406 	adc.w	r4, r4, r6
 8003240:	f04f 0100 	mov.w	r1, #0
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	02a2      	lsls	r2, r4, #10
 800324a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800324e:	0299      	lsls	r1, r3, #10
 8003250:	460b      	mov	r3, r1
 8003252:	4614      	mov	r4, r2
 8003254:	4618      	mov	r0, r3
 8003256:	4621      	mov	r1, r4
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f04f 0400 	mov.w	r4, #0
 800325e:	461a      	mov	r2, r3
 8003260:	4623      	mov	r3, r4
 8003262:	f7fd fcbf 	bl	8000be4 <__aeabi_uldivmod>
 8003266:	4603      	mov	r3, r0
 8003268:	460c      	mov	r4, r1
 800326a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800326c:	4b09      	ldr	r3, [pc, #36]	; (8003294 <HAL_RCC_GetSysClockFreq+0x334>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	0f1b      	lsrs	r3, r3, #28
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003280:	613b      	str	r3, [r7, #16]
      break;
 8003282:	e002      	b.n	800328a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003284:	4b04      	ldr	r3, [pc, #16]	; (8003298 <HAL_RCC_GetSysClockFreq+0x338>)
 8003286:	613b      	str	r3, [r7, #16]
      break;
 8003288:	bf00      	nop
    }
  }
  return sysclockfreq;
 800328a:	693b      	ldr	r3, [r7, #16]
}
 800328c:	4618      	mov	r0, r3
 800328e:	371c      	adds	r7, #28
 8003290:	46bd      	mov	sp, r7
 8003292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003294:	40023800 	.word	0x40023800
 8003298:	00f42400 	.word	0x00f42400
 800329c:	007a1200 	.word	0x007a1200

080032a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 8083 	beq.w	80033c0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032ba:	4b95      	ldr	r3, [pc, #596]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d019      	beq.n	80032fa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032c6:	4b92      	ldr	r3, [pc, #584]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d106      	bne.n	80032e0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032d2:	4b8f      	ldr	r3, [pc, #572]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032de:	d00c      	beq.n	80032fa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032e0:	4b8b      	ldr	r3, [pc, #556]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032e8:	2b0c      	cmp	r3, #12
 80032ea:	d112      	bne.n	8003312 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ec:	4b88      	ldr	r3, [pc, #544]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032f8:	d10b      	bne.n	8003312 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032fa:	4b85      	ldr	r3, [pc, #532]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d05b      	beq.n	80033be <HAL_RCC_OscConfig+0x11e>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d157      	bne.n	80033be <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e216      	b.n	8003740 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800331a:	d106      	bne.n	800332a <HAL_RCC_OscConfig+0x8a>
 800331c:	4b7c      	ldr	r3, [pc, #496]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a7b      	ldr	r2, [pc, #492]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 8003322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	e01d      	b.n	8003366 <HAL_RCC_OscConfig+0xc6>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003332:	d10c      	bne.n	800334e <HAL_RCC_OscConfig+0xae>
 8003334:	4b76      	ldr	r3, [pc, #472]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a75      	ldr	r2, [pc, #468]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 800333a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800333e:	6013      	str	r3, [r2, #0]
 8003340:	4b73      	ldr	r3, [pc, #460]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a72      	ldr	r2, [pc, #456]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 8003346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	e00b      	b.n	8003366 <HAL_RCC_OscConfig+0xc6>
 800334e:	4b70      	ldr	r3, [pc, #448]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a6f      	ldr	r2, [pc, #444]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 8003354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	4b6d      	ldr	r3, [pc, #436]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a6c      	ldr	r2, [pc, #432]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 8003360:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003364:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d013      	beq.n	8003396 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336e:	f7fe fe25 	bl	8001fbc <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003376:	f7fe fe21 	bl	8001fbc <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b64      	cmp	r3, #100	; 0x64
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e1db      	b.n	8003740 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003388:	4b61      	ldr	r3, [pc, #388]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0f0      	beq.n	8003376 <HAL_RCC_OscConfig+0xd6>
 8003394:	e014      	b.n	80033c0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003396:	f7fe fe11 	bl	8001fbc <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800339e:	f7fe fe0d 	bl	8001fbc <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b64      	cmp	r3, #100	; 0x64
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e1c7      	b.n	8003740 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033b0:	4b57      	ldr	r3, [pc, #348]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1f0      	bne.n	800339e <HAL_RCC_OscConfig+0xfe>
 80033bc:	e000      	b.n	80033c0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033be:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d06f      	beq.n	80034ac <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033cc:	4b50      	ldr	r3, [pc, #320]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 030c 	and.w	r3, r3, #12
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d017      	beq.n	8003408 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033d8:	4b4d      	ldr	r3, [pc, #308]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d105      	bne.n	80033f0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033e4:	4b4a      	ldr	r3, [pc, #296]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00b      	beq.n	8003408 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033f0:	4b47      	ldr	r3, [pc, #284]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033f8:	2b0c      	cmp	r3, #12
 80033fa:	d11c      	bne.n	8003436 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033fc:	4b44      	ldr	r3, [pc, #272]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d116      	bne.n	8003436 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003408:	4b41      	ldr	r3, [pc, #260]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_RCC_OscConfig+0x180>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d001      	beq.n	8003420 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e18f      	b.n	8003740 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003420:	4b3b      	ldr	r3, [pc, #236]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	4938      	ldr	r1, [pc, #224]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 8003430:	4313      	orrs	r3, r2
 8003432:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003434:	e03a      	b.n	80034ac <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d020      	beq.n	8003480 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800343e:	4b35      	ldr	r3, [pc, #212]	; (8003514 <HAL_RCC_OscConfig+0x274>)
 8003440:	2201      	movs	r2, #1
 8003442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003444:	f7fe fdba 	bl	8001fbc <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800344c:	f7fe fdb6 	bl	8001fbc <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e170      	b.n	8003740 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800345e:	4b2c      	ldr	r3, [pc, #176]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f0      	beq.n	800344c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800346a:	4b29      	ldr	r3, [pc, #164]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	4925      	ldr	r1, [pc, #148]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 800347a:	4313      	orrs	r3, r2
 800347c:	600b      	str	r3, [r1, #0]
 800347e:	e015      	b.n	80034ac <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003480:	4b24      	ldr	r3, [pc, #144]	; (8003514 <HAL_RCC_OscConfig+0x274>)
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003486:	f7fe fd99 	bl	8001fbc <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800348e:	f7fe fd95 	bl	8001fbc <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e14f      	b.n	8003740 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a0:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1f0      	bne.n	800348e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d037      	beq.n	8003528 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d016      	beq.n	80034ee <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034c0:	4b15      	ldr	r3, [pc, #84]	; (8003518 <HAL_RCC_OscConfig+0x278>)
 80034c2:	2201      	movs	r2, #1
 80034c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c6:	f7fe fd79 	bl	8001fbc <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ce:	f7fe fd75 	bl	8001fbc <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e12f      	b.n	8003740 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e0:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 80034e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0f0      	beq.n	80034ce <HAL_RCC_OscConfig+0x22e>
 80034ec:	e01c      	b.n	8003528 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ee:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <HAL_RCC_OscConfig+0x278>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f4:	f7fe fd62 	bl	8001fbc <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034fa:	e00f      	b.n	800351c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034fc:	f7fe fd5e 	bl	8001fbc <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d908      	bls.n	800351c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e118      	b.n	8003740 <HAL_RCC_OscConfig+0x4a0>
 800350e:	bf00      	nop
 8003510:	40023800 	.word	0x40023800
 8003514:	42470000 	.word	0x42470000
 8003518:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800351c:	4b8a      	ldr	r3, [pc, #552]	; (8003748 <HAL_RCC_OscConfig+0x4a8>)
 800351e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1e9      	bne.n	80034fc <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 8097 	beq.w	8003664 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003536:	2300      	movs	r3, #0
 8003538:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800353a:	4b83      	ldr	r3, [pc, #524]	; (8003748 <HAL_RCC_OscConfig+0x4a8>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10f      	bne.n	8003566 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003546:	2300      	movs	r3, #0
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	4b7f      	ldr	r3, [pc, #508]	; (8003748 <HAL_RCC_OscConfig+0x4a8>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	4a7e      	ldr	r2, [pc, #504]	; (8003748 <HAL_RCC_OscConfig+0x4a8>)
 8003550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003554:	6413      	str	r3, [r2, #64]	; 0x40
 8003556:	4b7c      	ldr	r3, [pc, #496]	; (8003748 <HAL_RCC_OscConfig+0x4a8>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003562:	2301      	movs	r3, #1
 8003564:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003566:	4b79      	ldr	r3, [pc, #484]	; (800374c <HAL_RCC_OscConfig+0x4ac>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356e:	2b00      	cmp	r3, #0
 8003570:	d118      	bne.n	80035a4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003572:	4b76      	ldr	r3, [pc, #472]	; (800374c <HAL_RCC_OscConfig+0x4ac>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a75      	ldr	r2, [pc, #468]	; (800374c <HAL_RCC_OscConfig+0x4ac>)
 8003578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800357c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800357e:	f7fe fd1d 	bl	8001fbc <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003586:	f7fe fd19 	bl	8001fbc <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e0d3      	b.n	8003740 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003598:	4b6c      	ldr	r3, [pc, #432]	; (800374c <HAL_RCC_OscConfig+0x4ac>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0f0      	beq.n	8003586 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d106      	bne.n	80035ba <HAL_RCC_OscConfig+0x31a>
 80035ac:	4b66      	ldr	r3, [pc, #408]	; (8003748 <HAL_RCC_OscConfig+0x4a8>)
 80035ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b0:	4a65      	ldr	r2, [pc, #404]	; (8003748 <HAL_RCC_OscConfig+0x4a8>)
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	6713      	str	r3, [r2, #112]	; 0x70
 80035b8:	e01c      	b.n	80035f4 <HAL_RCC_OscConfig+0x354>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	2b05      	cmp	r3, #5
 80035c0:	d10c      	bne.n	80035dc <HAL_RCC_OscConfig+0x33c>
 80035c2:	4b61      	ldr	r3, [pc, #388]	; (8003748 <HAL_RCC_OscConfig+0x4a8>)
 80035c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c6:	4a60      	ldr	r2, [pc, #384]	; (8003748 <HAL_RCC_OscConfig+0x4a8>)
 80035c8:	f043 0304 	orr.w	r3, r3, #4
 80035cc:	6713      	str	r3, [r2, #112]	; 0x70
 80035ce:	4b5e      	ldr	r3, [pc, #376]	; (8003748 <HAL_RCC_OscConfig+0x4a8>)
 80035d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d2:	4a5d      	ldr	r2, [pc, #372]	; (8003748 <HAL_RCC_OscConfig+0x4a8>)
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	6713      	str	r3, [r2, #112]	; 0x70
 80035da:	e00b      	b.n	80035f4 <HAL_RCC_OscConfig+0x354>
 80035dc:	4b5a      	ldr	r3, [pc, #360]	; (8003748 <HAL_RCC_OscConfig+0x4a8>)
 80035de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e0:	4a59      	ldr	r2, [pc, #356]	; (8003748 <HAL_RCC_OscConfig+0x4a8>)
 80035e2:	f023 0301 	bic.w	r3, r3, #1
 80035e6:	6713      	str	r3, [r2, #112]	; 0x70
 80035e8:	4b57      	ldr	r3, [pc, #348]	; (8003748 <HAL_RCC_OscConfig+0x4a8>)
 80035ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ec:	4a56      	ldr	r2, [pc, #344]	; (8003748 <HAL_RCC_OscConfig+0x4a8>)
 80035ee:	f023 0304 	bic.w	r3, r3, #4
 80035f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d015      	beq.n	8003628 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fc:	f7fe fcde 	bl	8001fbc <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003602:	e00a      	b.n	800361a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003604:	f7fe fcda 	bl	8001fbc <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003612:	4293      	cmp	r3, r2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e092      	b.n	8003740 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800361a:	4b4b      	ldr	r3, [pc, #300]	; (8003748 <HAL_RCC_OscConfig+0x4a8>)
 800361c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0ee      	beq.n	8003604 <HAL_RCC_OscConfig+0x364>
 8003626:	e014      	b.n	8003652 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003628:	f7fe fcc8 	bl	8001fbc <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800362e:	e00a      	b.n	8003646 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003630:	f7fe fcc4 	bl	8001fbc <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	f241 3288 	movw	r2, #5000	; 0x1388
 800363e:	4293      	cmp	r3, r2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e07c      	b.n	8003740 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003646:	4b40      	ldr	r3, [pc, #256]	; (8003748 <HAL_RCC_OscConfig+0x4a8>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1ee      	bne.n	8003630 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003652:	7dfb      	ldrb	r3, [r7, #23]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d105      	bne.n	8003664 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003658:	4b3b      	ldr	r3, [pc, #236]	; (8003748 <HAL_RCC_OscConfig+0x4a8>)
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	4a3a      	ldr	r2, [pc, #232]	; (8003748 <HAL_RCC_OscConfig+0x4a8>)
 800365e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003662:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d068      	beq.n	800373e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800366c:	4b36      	ldr	r3, [pc, #216]	; (8003748 <HAL_RCC_OscConfig+0x4a8>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f003 030c 	and.w	r3, r3, #12
 8003674:	2b08      	cmp	r3, #8
 8003676:	d060      	beq.n	800373a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d145      	bne.n	800370c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003680:	4b33      	ldr	r3, [pc, #204]	; (8003750 <HAL_RCC_OscConfig+0x4b0>)
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003686:	f7fe fc99 	bl	8001fbc <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800368e:	f7fe fc95 	bl	8001fbc <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e04f      	b.n	8003740 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a0:	4b29      	ldr	r3, [pc, #164]	; (8003748 <HAL_RCC_OscConfig+0x4a8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1f0      	bne.n	800368e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	69da      	ldr	r2, [r3, #28]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	431a      	orrs	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	019b      	lsls	r3, r3, #6
 80036bc:	431a      	orrs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c2:	085b      	lsrs	r3, r3, #1
 80036c4:	3b01      	subs	r3, #1
 80036c6:	041b      	lsls	r3, r3, #16
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ce:	061b      	lsls	r3, r3, #24
 80036d0:	431a      	orrs	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	071b      	lsls	r3, r3, #28
 80036d8:	491b      	ldr	r1, [pc, #108]	; (8003748 <HAL_RCC_OscConfig+0x4a8>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036de:	4b1c      	ldr	r3, [pc, #112]	; (8003750 <HAL_RCC_OscConfig+0x4b0>)
 80036e0:	2201      	movs	r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fe fc6a 	bl	8001fbc <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ec:	f7fe fc66 	bl	8001fbc <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e020      	b.n	8003740 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036fe:	4b12      	ldr	r3, [pc, #72]	; (8003748 <HAL_RCC_OscConfig+0x4a8>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f0      	beq.n	80036ec <HAL_RCC_OscConfig+0x44c>
 800370a:	e018      	b.n	800373e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800370c:	4b10      	ldr	r3, [pc, #64]	; (8003750 <HAL_RCC_OscConfig+0x4b0>)
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003712:	f7fe fc53 	bl	8001fbc <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800371a:	f7fe fc4f 	bl	8001fbc <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e009      	b.n	8003740 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372c:	4b06      	ldr	r3, [pc, #24]	; (8003748 <HAL_RCC_OscConfig+0x4a8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1f0      	bne.n	800371a <HAL_RCC_OscConfig+0x47a>
 8003738:	e001      	b.n	800373e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e000      	b.n	8003740 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40023800 	.word	0x40023800
 800374c:	40007000 	.word	0x40007000
 8003750:	42470060 	.word	0x42470060

08003754 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e056      	b.n	8003814 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d106      	bne.n	8003786 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7fd ffcb 	bl	800171c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2202      	movs	r2, #2
 800378a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800379c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	431a      	orrs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	431a      	orrs	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	ea42 0103 	orr.w	r1, r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	0c1b      	lsrs	r3, r3, #16
 80037e4:	f003 0104 	and.w	r1, r3, #4
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	69da      	ldr	r2, [r3, #28]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003802:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e01d      	b.n	800386a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d106      	bne.n	8003848 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fe f9e0 	bl	8001c08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3304      	adds	r3, #4
 8003858:	4619      	mov	r1, r3
 800385a:	4610      	mov	r0, r2
 800385c:	f000 fb4e 	bl	8003efc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003872:	b480      	push	{r7}
 8003874:	b085      	sub	sp, #20
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f042 0201 	orr.w	r2, r2, #1
 8003888:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2b06      	cmp	r3, #6
 800389a:	d007      	beq.n	80038ac <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e01d      	b.n	8003908 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d106      	bne.n	80038e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f815 	bl	8003910 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2202      	movs	r2, #2
 80038ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	3304      	adds	r3, #4
 80038f6:	4619      	mov	r1, r3
 80038f8:	4610      	mov	r0, r2
 80038fa:	f000 faff 	bl	8003efc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2201      	movs	r2, #1
 8003934:	6839      	ldr	r1, [r7, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f000 fdca 	bl	80044d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a15      	ldr	r2, [pc, #84]	; (8003998 <HAL_TIM_PWM_Start+0x74>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d004      	beq.n	8003950 <HAL_TIM_PWM_Start+0x2c>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a14      	ldr	r2, [pc, #80]	; (800399c <HAL_TIM_PWM_Start+0x78>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d101      	bne.n	8003954 <HAL_TIM_PWM_Start+0x30>
 8003950:	2301      	movs	r3, #1
 8003952:	e000      	b.n	8003956 <HAL_TIM_PWM_Start+0x32>
 8003954:	2300      	movs	r3, #0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d007      	beq.n	800396a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003968:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2b06      	cmp	r3, #6
 800397a:	d007      	beq.n	800398c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0201 	orr.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40010000 	.word	0x40010000
 800399c:	40010400 	.word	0x40010400

080039a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d122      	bne.n	80039fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d11b      	bne.n	80039fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f06f 0202 	mvn.w	r2, #2
 80039cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 fa6b 	bl	8003ebe <HAL_TIM_IC_CaptureCallback>
 80039e8:	e005      	b.n	80039f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 fa5d 	bl	8003eaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 fa6e 	bl	8003ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	f003 0304 	and.w	r3, r3, #4
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d122      	bne.n	8003a50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d11b      	bne.n	8003a50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f06f 0204 	mvn.w	r2, #4
 8003a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2202      	movs	r2, #2
 8003a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fa41 	bl	8003ebe <HAL_TIM_IC_CaptureCallback>
 8003a3c:	e005      	b.n	8003a4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fa33 	bl	8003eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 fa44 	bl	8003ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d122      	bne.n	8003aa4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f003 0308 	and.w	r3, r3, #8
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d11b      	bne.n	8003aa4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f06f 0208 	mvn.w	r2, #8
 8003a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2204      	movs	r2, #4
 8003a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fa17 	bl	8003ebe <HAL_TIM_IC_CaptureCallback>
 8003a90:	e005      	b.n	8003a9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 fa09 	bl	8003eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 fa1a 	bl	8003ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	f003 0310 	and.w	r3, r3, #16
 8003aae:	2b10      	cmp	r3, #16
 8003ab0:	d122      	bne.n	8003af8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	f003 0310 	and.w	r3, r3, #16
 8003abc:	2b10      	cmp	r3, #16
 8003abe:	d11b      	bne.n	8003af8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f06f 0210 	mvn.w	r2, #16
 8003ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2208      	movs	r2, #8
 8003ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f9ed 	bl	8003ebe <HAL_TIM_IC_CaptureCallback>
 8003ae4:	e005      	b.n	8003af2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f9df 	bl	8003eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f9f0 	bl	8003ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d10e      	bne.n	8003b24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d107      	bne.n	8003b24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f06f 0201 	mvn.w	r2, #1
 8003b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f001 fabc 	bl	800509c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2e:	2b80      	cmp	r3, #128	; 0x80
 8003b30:	d10e      	bne.n	8003b50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3c:	2b80      	cmp	r3, #128	; 0x80
 8003b3e:	d107      	bne.n	8003b50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 fde8 	bl	8004720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5a:	2b40      	cmp	r3, #64	; 0x40
 8003b5c:	d10e      	bne.n	8003b7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b68:	2b40      	cmp	r3, #64	; 0x40
 8003b6a:	d107      	bne.n	8003b7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f9b5 	bl	8003ee6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	f003 0320 	and.w	r3, r3, #32
 8003b86:	2b20      	cmp	r3, #32
 8003b88:	d10e      	bne.n	8003ba8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f003 0320 	and.w	r3, r3, #32
 8003b94:	2b20      	cmp	r3, #32
 8003b96:	d107      	bne.n	8003ba8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f06f 0220 	mvn.w	r2, #32
 8003ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 fdb2 	bl	800470c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ba8:	bf00      	nop
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d101      	bne.n	8003bca <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	e0b4      	b.n	8003d34 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b0c      	cmp	r3, #12
 8003bde:	f200 809f 	bhi.w	8003d20 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003be2:	a201      	add	r2, pc, #4	; (adr r2, 8003be8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be8:	08003c1d 	.word	0x08003c1d
 8003bec:	08003d21 	.word	0x08003d21
 8003bf0:	08003d21 	.word	0x08003d21
 8003bf4:	08003d21 	.word	0x08003d21
 8003bf8:	08003c5d 	.word	0x08003c5d
 8003bfc:	08003d21 	.word	0x08003d21
 8003c00:	08003d21 	.word	0x08003d21
 8003c04:	08003d21 	.word	0x08003d21
 8003c08:	08003c9f 	.word	0x08003c9f
 8003c0c:	08003d21 	.word	0x08003d21
 8003c10:	08003d21 	.word	0x08003d21
 8003c14:	08003d21 	.word	0x08003d21
 8003c18:	08003cdf 	.word	0x08003cdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68b9      	ldr	r1, [r7, #8]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fa0a 	bl	800403c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699a      	ldr	r2, [r3, #24]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0208 	orr.w	r2, r2, #8
 8003c36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	699a      	ldr	r2, [r3, #24]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0204 	bic.w	r2, r2, #4
 8003c46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6999      	ldr	r1, [r3, #24]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	691a      	ldr	r2, [r3, #16]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	619a      	str	r2, [r3, #24]
      break;
 8003c5a:	e062      	b.n	8003d22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68b9      	ldr	r1, [r7, #8]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fa5a 	bl	800411c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699a      	ldr	r2, [r3, #24]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699a      	ldr	r2, [r3, #24]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6999      	ldr	r1, [r3, #24]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	021a      	lsls	r2, r3, #8
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	619a      	str	r2, [r3, #24]
      break;
 8003c9c:	e041      	b.n	8003d22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68b9      	ldr	r1, [r7, #8]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 faaf 	bl	8004208 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69da      	ldr	r2, [r3, #28]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f042 0208 	orr.w	r2, r2, #8
 8003cb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	69da      	ldr	r2, [r3, #28]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0204 	bic.w	r2, r2, #4
 8003cc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69d9      	ldr	r1, [r3, #28]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	691a      	ldr	r2, [r3, #16]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	61da      	str	r2, [r3, #28]
      break;
 8003cdc:	e021      	b.n	8003d22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68b9      	ldr	r1, [r7, #8]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fb03 	bl	80042f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69da      	ldr	r2, [r3, #28]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	69da      	ldr	r2, [r3, #28]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69d9      	ldr	r1, [r3, #28]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	021a      	lsls	r2, r3, #8
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	61da      	str	r2, [r3, #28]
      break;
 8003d1e:	e000      	b.n	8003d22 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003d20:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_TIM_ConfigClockSource+0x18>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e0a6      	b.n	8003ea2 <HAL_TIM_ConfigClockSource+0x166>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d7a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b40      	cmp	r3, #64	; 0x40
 8003d8a:	d067      	beq.n	8003e5c <HAL_TIM_ConfigClockSource+0x120>
 8003d8c:	2b40      	cmp	r3, #64	; 0x40
 8003d8e:	d80b      	bhi.n	8003da8 <HAL_TIM_ConfigClockSource+0x6c>
 8003d90:	2b10      	cmp	r3, #16
 8003d92:	d073      	beq.n	8003e7c <HAL_TIM_ConfigClockSource+0x140>
 8003d94:	2b10      	cmp	r3, #16
 8003d96:	d802      	bhi.n	8003d9e <HAL_TIM_ConfigClockSource+0x62>
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d06f      	beq.n	8003e7c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003d9c:	e078      	b.n	8003e90 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	d06c      	beq.n	8003e7c <HAL_TIM_ConfigClockSource+0x140>
 8003da2:	2b30      	cmp	r3, #48	; 0x30
 8003da4:	d06a      	beq.n	8003e7c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003da6:	e073      	b.n	8003e90 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003da8:	2b70      	cmp	r3, #112	; 0x70
 8003daa:	d00d      	beq.n	8003dc8 <HAL_TIM_ConfigClockSource+0x8c>
 8003dac:	2b70      	cmp	r3, #112	; 0x70
 8003dae:	d804      	bhi.n	8003dba <HAL_TIM_ConfigClockSource+0x7e>
 8003db0:	2b50      	cmp	r3, #80	; 0x50
 8003db2:	d033      	beq.n	8003e1c <HAL_TIM_ConfigClockSource+0xe0>
 8003db4:	2b60      	cmp	r3, #96	; 0x60
 8003db6:	d041      	beq.n	8003e3c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003db8:	e06a      	b.n	8003e90 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dbe:	d066      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x152>
 8003dc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc4:	d017      	beq.n	8003df6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003dc6:	e063      	b.n	8003e90 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6818      	ldr	r0, [r3, #0]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	6899      	ldr	r1, [r3, #8]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f000 fb5a 	bl	8004490 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	609a      	str	r2, [r3, #8]
      break;
 8003df4:	e04c      	b.n	8003e90 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6818      	ldr	r0, [r3, #0]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	6899      	ldr	r1, [r3, #8]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f000 fb43 	bl	8004490 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e18:	609a      	str	r2, [r3, #8]
      break;
 8003e1a:	e039      	b.n	8003e90 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	6859      	ldr	r1, [r3, #4]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	f000 fab7 	bl	800439c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2150      	movs	r1, #80	; 0x50
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 fb10 	bl	800445a <TIM_ITRx_SetConfig>
      break;
 8003e3a:	e029      	b.n	8003e90 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6818      	ldr	r0, [r3, #0]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	6859      	ldr	r1, [r3, #4]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	f000 fad6 	bl	80043fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2160      	movs	r1, #96	; 0x60
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 fb00 	bl	800445a <TIM_ITRx_SetConfig>
      break;
 8003e5a:	e019      	b.n	8003e90 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6818      	ldr	r0, [r3, #0]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	6859      	ldr	r1, [r3, #4]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	f000 fa97 	bl	800439c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2140      	movs	r1, #64	; 0x40
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 faf0 	bl	800445a <TIM_ITRx_SetConfig>
      break;
 8003e7a:	e009      	b.n	8003e90 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4619      	mov	r1, r3
 8003e86:	4610      	mov	r0, r2
 8003e88:	f000 fae7 	bl	800445a <TIM_ITRx_SetConfig>
      break;
 8003e8c:	e000      	b.n	8003e90 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003e8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b083      	sub	sp, #12
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
	...

08003efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a40      	ldr	r2, [pc, #256]	; (8004010 <TIM_Base_SetConfig+0x114>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d013      	beq.n	8003f3c <TIM_Base_SetConfig+0x40>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1a:	d00f      	beq.n	8003f3c <TIM_Base_SetConfig+0x40>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a3d      	ldr	r2, [pc, #244]	; (8004014 <TIM_Base_SetConfig+0x118>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d00b      	beq.n	8003f3c <TIM_Base_SetConfig+0x40>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a3c      	ldr	r2, [pc, #240]	; (8004018 <TIM_Base_SetConfig+0x11c>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d007      	beq.n	8003f3c <TIM_Base_SetConfig+0x40>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a3b      	ldr	r2, [pc, #236]	; (800401c <TIM_Base_SetConfig+0x120>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d003      	beq.n	8003f3c <TIM_Base_SetConfig+0x40>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a3a      	ldr	r2, [pc, #232]	; (8004020 <TIM_Base_SetConfig+0x124>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d108      	bne.n	8003f4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a2f      	ldr	r2, [pc, #188]	; (8004010 <TIM_Base_SetConfig+0x114>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d02b      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f5c:	d027      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a2c      	ldr	r2, [pc, #176]	; (8004014 <TIM_Base_SetConfig+0x118>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d023      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a2b      	ldr	r2, [pc, #172]	; (8004018 <TIM_Base_SetConfig+0x11c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d01f      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a2a      	ldr	r2, [pc, #168]	; (800401c <TIM_Base_SetConfig+0x120>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d01b      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a29      	ldr	r2, [pc, #164]	; (8004020 <TIM_Base_SetConfig+0x124>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d017      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a28      	ldr	r2, [pc, #160]	; (8004024 <TIM_Base_SetConfig+0x128>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d013      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a27      	ldr	r2, [pc, #156]	; (8004028 <TIM_Base_SetConfig+0x12c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d00f      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a26      	ldr	r2, [pc, #152]	; (800402c <TIM_Base_SetConfig+0x130>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d00b      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a25      	ldr	r2, [pc, #148]	; (8004030 <TIM_Base_SetConfig+0x134>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d007      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a24      	ldr	r2, [pc, #144]	; (8004034 <TIM_Base_SetConfig+0x138>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d003      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a23      	ldr	r2, [pc, #140]	; (8004038 <TIM_Base_SetConfig+0x13c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d108      	bne.n	8003fc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a0a      	ldr	r2, [pc, #40]	; (8004010 <TIM_Base_SetConfig+0x114>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d003      	beq.n	8003ff4 <TIM_Base_SetConfig+0xf8>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a0c      	ldr	r2, [pc, #48]	; (8004020 <TIM_Base_SetConfig+0x124>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d103      	bne.n	8003ffc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	615a      	str	r2, [r3, #20]
}
 8004002:	bf00      	nop
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	40010000 	.word	0x40010000
 8004014:	40000400 	.word	0x40000400
 8004018:	40000800 	.word	0x40000800
 800401c:	40000c00 	.word	0x40000c00
 8004020:	40010400 	.word	0x40010400
 8004024:	40014000 	.word	0x40014000
 8004028:	40014400 	.word	0x40014400
 800402c:	40014800 	.word	0x40014800
 8004030:	40001800 	.word	0x40001800
 8004034:	40001c00 	.word	0x40001c00
 8004038:	40002000 	.word	0x40002000

0800403c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	f023 0201 	bic.w	r2, r3, #1
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800406a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 0303 	bic.w	r3, r3, #3
 8004072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	4313      	orrs	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f023 0302 	bic.w	r3, r3, #2
 8004084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	4313      	orrs	r3, r2
 800408e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a20      	ldr	r2, [pc, #128]	; (8004114 <TIM_OC1_SetConfig+0xd8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d003      	beq.n	80040a0 <TIM_OC1_SetConfig+0x64>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a1f      	ldr	r2, [pc, #124]	; (8004118 <TIM_OC1_SetConfig+0xdc>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d10c      	bne.n	80040ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f023 0308 	bic.w	r3, r3, #8
 80040a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f023 0304 	bic.w	r3, r3, #4
 80040b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a15      	ldr	r2, [pc, #84]	; (8004114 <TIM_OC1_SetConfig+0xd8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d003      	beq.n	80040ca <TIM_OC1_SetConfig+0x8e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a14      	ldr	r2, [pc, #80]	; (8004118 <TIM_OC1_SetConfig+0xdc>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d111      	bne.n	80040ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	621a      	str	r2, [r3, #32]
}
 8004108:	bf00      	nop
 800410a:	371c      	adds	r7, #28
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	40010000 	.word	0x40010000
 8004118:	40010400 	.word	0x40010400

0800411c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	f023 0210 	bic.w	r2, r3, #16
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800414a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004152:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	021b      	lsls	r3, r3, #8
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	4313      	orrs	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f023 0320 	bic.w	r3, r3, #32
 8004166:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4313      	orrs	r3, r2
 8004172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a22      	ldr	r2, [pc, #136]	; (8004200 <TIM_OC2_SetConfig+0xe4>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d003      	beq.n	8004184 <TIM_OC2_SetConfig+0x68>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a21      	ldr	r2, [pc, #132]	; (8004204 <TIM_OC2_SetConfig+0xe8>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d10d      	bne.n	80041a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800418a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	4313      	orrs	r3, r2
 8004196:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800419e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a17      	ldr	r2, [pc, #92]	; (8004200 <TIM_OC2_SetConfig+0xe4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d003      	beq.n	80041b0 <TIM_OC2_SetConfig+0x94>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a16      	ldr	r2, [pc, #88]	; (8004204 <TIM_OC2_SetConfig+0xe8>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d113      	bne.n	80041d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	621a      	str	r2, [r3, #32]
}
 80041f2:	bf00      	nop
 80041f4:	371c      	adds	r7, #28
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	40010000 	.word	0x40010000
 8004204:	40010400 	.word	0x40010400

08004208 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f023 0303 	bic.w	r3, r3, #3
 800423e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	021b      	lsls	r3, r3, #8
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	4313      	orrs	r3, r2
 800425c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a21      	ldr	r2, [pc, #132]	; (80042e8 <TIM_OC3_SetConfig+0xe0>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d003      	beq.n	800426e <TIM_OC3_SetConfig+0x66>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a20      	ldr	r2, [pc, #128]	; (80042ec <TIM_OC3_SetConfig+0xe4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d10d      	bne.n	800428a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004274:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	021b      	lsls	r3, r3, #8
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	4313      	orrs	r3, r2
 8004280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a16      	ldr	r2, [pc, #88]	; (80042e8 <TIM_OC3_SetConfig+0xe0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d003      	beq.n	800429a <TIM_OC3_SetConfig+0x92>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a15      	ldr	r2, [pc, #84]	; (80042ec <TIM_OC3_SetConfig+0xe4>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d113      	bne.n	80042c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4313      	orrs	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	621a      	str	r2, [r3, #32]
}
 80042dc:	bf00      	nop
 80042de:	371c      	adds	r7, #28
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	40010000 	.word	0x40010000
 80042ec:	40010400 	.word	0x40010400

080042f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800431e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	021b      	lsls	r3, r3, #8
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	4313      	orrs	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800433a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	031b      	lsls	r3, r3, #12
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	4313      	orrs	r3, r2
 8004346:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a12      	ldr	r2, [pc, #72]	; (8004394 <TIM_OC4_SetConfig+0xa4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d003      	beq.n	8004358 <TIM_OC4_SetConfig+0x68>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a11      	ldr	r2, [pc, #68]	; (8004398 <TIM_OC4_SetConfig+0xa8>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d109      	bne.n	800436c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800435e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	019b      	lsls	r3, r3, #6
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	4313      	orrs	r3, r2
 800436a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	621a      	str	r2, [r3, #32]
}
 8004386:	bf00      	nop
 8004388:	371c      	adds	r7, #28
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40010000 	.word	0x40010000
 8004398:	40010400 	.word	0x40010400

0800439c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	f023 0201 	bic.w	r2, r3, #1
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f023 030a 	bic.w	r3, r3, #10
 80043d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	4313      	orrs	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	621a      	str	r2, [r3, #32]
}
 80043ee:	bf00      	nop
 80043f0:	371c      	adds	r7, #28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b087      	sub	sp, #28
 80043fe:	af00      	add	r7, sp, #0
 8004400:	60f8      	str	r0, [r7, #12]
 8004402:	60b9      	str	r1, [r7, #8]
 8004404:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	f023 0210 	bic.w	r2, r3, #16
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004424:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	031b      	lsls	r3, r3, #12
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004436:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	621a      	str	r2, [r3, #32]
}
 800444e:	bf00      	nop
 8004450:	371c      	adds	r7, #28
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800445a:	b480      	push	{r7}
 800445c:	b085      	sub	sp, #20
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
 8004462:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004470:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4313      	orrs	r3, r2
 8004478:	f043 0307 	orr.w	r3, r3, #7
 800447c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	609a      	str	r2, [r3, #8]
}
 8004484:	bf00      	nop
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	021a      	lsls	r2, r3, #8
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	431a      	orrs	r2, r3
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	609a      	str	r2, [r3, #8]
}
 80044c4:	bf00      	nop
 80044c6:	371c      	adds	r7, #28
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f003 031f 	and.w	r3, r3, #31
 80044e2:	2201      	movs	r2, #1
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a1a      	ldr	r2, [r3, #32]
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	43db      	mvns	r3, r3
 80044f2:	401a      	ands	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a1a      	ldr	r2, [r3, #32]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f003 031f 	and.w	r3, r3, #31
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	fa01 f303 	lsl.w	r3, r1, r3
 8004508:	431a      	orrs	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	621a      	str	r2, [r3, #32]
}
 800450e:	bf00      	nop
 8004510:	371c      	adds	r7, #28
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b084      	sub	sp, #16
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2204      	movs	r2, #4
 800452a:	6839      	ldr	r1, [r7, #0]
 800452c:	4618      	mov	r0, r3
 800452e:	f000 f901 	bl	8004734 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004540:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2b06      	cmp	r3, #6
 8004552:	d007      	beq.n	8004564 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0201 	orr.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
	...

08004570 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004580:	2b01      	cmp	r3, #1
 8004582:	d101      	bne.n	8004588 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004584:	2302      	movs	r3, #2
 8004586:	e05a      	b.n	800463e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a21      	ldr	r2, [pc, #132]	; (800464c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d022      	beq.n	8004612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d4:	d01d      	beq.n	8004612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a1d      	ldr	r2, [pc, #116]	; (8004650 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d018      	beq.n	8004612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a1b      	ldr	r2, [pc, #108]	; (8004654 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d013      	beq.n	8004612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a1a      	ldr	r2, [pc, #104]	; (8004658 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d00e      	beq.n	8004612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a18      	ldr	r2, [pc, #96]	; (800465c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d009      	beq.n	8004612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a17      	ldr	r2, [pc, #92]	; (8004660 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d004      	beq.n	8004612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a15      	ldr	r2, [pc, #84]	; (8004664 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d10c      	bne.n	800462c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004618:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	4313      	orrs	r3, r2
 8004622:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	40010000 	.word	0x40010000
 8004650:	40000400 	.word	0x40000400
 8004654:	40000800 	.word	0x40000800
 8004658:	40000c00 	.word	0x40000c00
 800465c:	40010400 	.word	0x40010400
 8004660:	40014000 	.word	0x40014000
 8004664:	40001800 	.word	0x40001800

08004668 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004672:	2300      	movs	r3, #0
 8004674:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800467c:	2b01      	cmp	r3, #1
 800467e:	d101      	bne.n	8004684 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004680:	2302      	movs	r3, #2
 8004682:	e03d      	b.n	8004700 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	4313      	orrs	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	f003 031f 	and.w	r3, r3, #31
 8004746:	2204      	movs	r2, #4
 8004748:	fa02 f303 	lsl.w	r3, r2, r3
 800474c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a1a      	ldr	r2, [r3, #32]
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	43db      	mvns	r3, r3
 8004756:	401a      	ands	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a1a      	ldr	r2, [r3, #32]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f003 031f 	and.w	r3, r3, #31
 8004766:	6879      	ldr	r1, [r7, #4]
 8004768:	fa01 f303 	lsl.w	r3, r1, r3
 800476c:	431a      	orrs	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	621a      	str	r2, [r3, #32]
}
 8004772:	bf00      	nop
 8004774:	371c      	adds	r7, #28
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b082      	sub	sp, #8
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e03f      	b.n	8004810 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	d106      	bne.n	80047aa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7fd fb31 	bl	8001e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2224      	movs	r2, #36	; 0x24
 80047ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047c0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f828 	bl	8004818 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	691a      	ldr	r2, [r3, #16]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695a      	ldr	r2, [r3, #20]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047e6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047f6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2220      	movs	r2, #32
 8004802:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2220      	movs	r2, #32
 800480a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800481c:	b085      	sub	sp, #20
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	430a      	orrs	r2, r1
 8004836:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	431a      	orrs	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	4313      	orrs	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800485a:	f023 030c 	bic.w	r3, r3, #12
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	6812      	ldr	r2, [r2, #0]
 8004862:	68f9      	ldr	r1, [r7, #12]
 8004864:	430b      	orrs	r3, r1
 8004866:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	699a      	ldr	r2, [r3, #24]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004886:	f040 818b 	bne.w	8004ba0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4ac1      	ldr	r2, [pc, #772]	; (8004b94 <UART_SetConfig+0x37c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d005      	beq.n	80048a0 <UART_SetConfig+0x88>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4abf      	ldr	r2, [pc, #764]	; (8004b98 <UART_SetConfig+0x380>)
 800489a:	4293      	cmp	r3, r2
 800489c:	f040 80bd 	bne.w	8004a1a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048a0:	f7fe fb4a 	bl	8002f38 <HAL_RCC_GetPCLK2Freq>
 80048a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	461d      	mov	r5, r3
 80048aa:	f04f 0600 	mov.w	r6, #0
 80048ae:	46a8      	mov	r8, r5
 80048b0:	46b1      	mov	r9, r6
 80048b2:	eb18 0308 	adds.w	r3, r8, r8
 80048b6:	eb49 0409 	adc.w	r4, r9, r9
 80048ba:	4698      	mov	r8, r3
 80048bc:	46a1      	mov	r9, r4
 80048be:	eb18 0805 	adds.w	r8, r8, r5
 80048c2:	eb49 0906 	adc.w	r9, r9, r6
 80048c6:	f04f 0100 	mov.w	r1, #0
 80048ca:	f04f 0200 	mov.w	r2, #0
 80048ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80048d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80048d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80048da:	4688      	mov	r8, r1
 80048dc:	4691      	mov	r9, r2
 80048de:	eb18 0005 	adds.w	r0, r8, r5
 80048e2:	eb49 0106 	adc.w	r1, r9, r6
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	461d      	mov	r5, r3
 80048ec:	f04f 0600 	mov.w	r6, #0
 80048f0:	196b      	adds	r3, r5, r5
 80048f2:	eb46 0406 	adc.w	r4, r6, r6
 80048f6:	461a      	mov	r2, r3
 80048f8:	4623      	mov	r3, r4
 80048fa:	f7fc f973 	bl	8000be4 <__aeabi_uldivmod>
 80048fe:	4603      	mov	r3, r0
 8004900:	460c      	mov	r4, r1
 8004902:	461a      	mov	r2, r3
 8004904:	4ba5      	ldr	r3, [pc, #660]	; (8004b9c <UART_SetConfig+0x384>)
 8004906:	fba3 2302 	umull	r2, r3, r3, r2
 800490a:	095b      	lsrs	r3, r3, #5
 800490c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	461d      	mov	r5, r3
 8004914:	f04f 0600 	mov.w	r6, #0
 8004918:	46a9      	mov	r9, r5
 800491a:	46b2      	mov	sl, r6
 800491c:	eb19 0309 	adds.w	r3, r9, r9
 8004920:	eb4a 040a 	adc.w	r4, sl, sl
 8004924:	4699      	mov	r9, r3
 8004926:	46a2      	mov	sl, r4
 8004928:	eb19 0905 	adds.w	r9, r9, r5
 800492c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004930:	f04f 0100 	mov.w	r1, #0
 8004934:	f04f 0200 	mov.w	r2, #0
 8004938:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800493c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004940:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004944:	4689      	mov	r9, r1
 8004946:	4692      	mov	sl, r2
 8004948:	eb19 0005 	adds.w	r0, r9, r5
 800494c:	eb4a 0106 	adc.w	r1, sl, r6
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	461d      	mov	r5, r3
 8004956:	f04f 0600 	mov.w	r6, #0
 800495a:	196b      	adds	r3, r5, r5
 800495c:	eb46 0406 	adc.w	r4, r6, r6
 8004960:	461a      	mov	r2, r3
 8004962:	4623      	mov	r3, r4
 8004964:	f7fc f93e 	bl	8000be4 <__aeabi_uldivmod>
 8004968:	4603      	mov	r3, r0
 800496a:	460c      	mov	r4, r1
 800496c:	461a      	mov	r2, r3
 800496e:	4b8b      	ldr	r3, [pc, #556]	; (8004b9c <UART_SetConfig+0x384>)
 8004970:	fba3 1302 	umull	r1, r3, r3, r2
 8004974:	095b      	lsrs	r3, r3, #5
 8004976:	2164      	movs	r1, #100	; 0x64
 8004978:	fb01 f303 	mul.w	r3, r1, r3
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	3332      	adds	r3, #50	; 0x32
 8004982:	4a86      	ldr	r2, [pc, #536]	; (8004b9c <UART_SetConfig+0x384>)
 8004984:	fba2 2303 	umull	r2, r3, r2, r3
 8004988:	095b      	lsrs	r3, r3, #5
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004990:	4498      	add	r8, r3
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	461d      	mov	r5, r3
 8004996:	f04f 0600 	mov.w	r6, #0
 800499a:	46a9      	mov	r9, r5
 800499c:	46b2      	mov	sl, r6
 800499e:	eb19 0309 	adds.w	r3, r9, r9
 80049a2:	eb4a 040a 	adc.w	r4, sl, sl
 80049a6:	4699      	mov	r9, r3
 80049a8:	46a2      	mov	sl, r4
 80049aa:	eb19 0905 	adds.w	r9, r9, r5
 80049ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80049b2:	f04f 0100 	mov.w	r1, #0
 80049b6:	f04f 0200 	mov.w	r2, #0
 80049ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80049c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049c6:	4689      	mov	r9, r1
 80049c8:	4692      	mov	sl, r2
 80049ca:	eb19 0005 	adds.w	r0, r9, r5
 80049ce:	eb4a 0106 	adc.w	r1, sl, r6
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	461d      	mov	r5, r3
 80049d8:	f04f 0600 	mov.w	r6, #0
 80049dc:	196b      	adds	r3, r5, r5
 80049de:	eb46 0406 	adc.w	r4, r6, r6
 80049e2:	461a      	mov	r2, r3
 80049e4:	4623      	mov	r3, r4
 80049e6:	f7fc f8fd 	bl	8000be4 <__aeabi_uldivmod>
 80049ea:	4603      	mov	r3, r0
 80049ec:	460c      	mov	r4, r1
 80049ee:	461a      	mov	r2, r3
 80049f0:	4b6a      	ldr	r3, [pc, #424]	; (8004b9c <UART_SetConfig+0x384>)
 80049f2:	fba3 1302 	umull	r1, r3, r3, r2
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	2164      	movs	r1, #100	; 0x64
 80049fa:	fb01 f303 	mul.w	r3, r1, r3
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	3332      	adds	r3, #50	; 0x32
 8004a04:	4a65      	ldr	r2, [pc, #404]	; (8004b9c <UART_SetConfig+0x384>)
 8004a06:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0a:	095b      	lsrs	r3, r3, #5
 8004a0c:	f003 0207 	and.w	r2, r3, #7
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4442      	add	r2, r8
 8004a16:	609a      	str	r2, [r3, #8]
 8004a18:	e26f      	b.n	8004efa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a1a:	f7fe fa79 	bl	8002f10 <HAL_RCC_GetPCLK1Freq>
 8004a1e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	461d      	mov	r5, r3
 8004a24:	f04f 0600 	mov.w	r6, #0
 8004a28:	46a8      	mov	r8, r5
 8004a2a:	46b1      	mov	r9, r6
 8004a2c:	eb18 0308 	adds.w	r3, r8, r8
 8004a30:	eb49 0409 	adc.w	r4, r9, r9
 8004a34:	4698      	mov	r8, r3
 8004a36:	46a1      	mov	r9, r4
 8004a38:	eb18 0805 	adds.w	r8, r8, r5
 8004a3c:	eb49 0906 	adc.w	r9, r9, r6
 8004a40:	f04f 0100 	mov.w	r1, #0
 8004a44:	f04f 0200 	mov.w	r2, #0
 8004a48:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a4c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a50:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a54:	4688      	mov	r8, r1
 8004a56:	4691      	mov	r9, r2
 8004a58:	eb18 0005 	adds.w	r0, r8, r5
 8004a5c:	eb49 0106 	adc.w	r1, r9, r6
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	461d      	mov	r5, r3
 8004a66:	f04f 0600 	mov.w	r6, #0
 8004a6a:	196b      	adds	r3, r5, r5
 8004a6c:	eb46 0406 	adc.w	r4, r6, r6
 8004a70:	461a      	mov	r2, r3
 8004a72:	4623      	mov	r3, r4
 8004a74:	f7fc f8b6 	bl	8000be4 <__aeabi_uldivmod>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	460c      	mov	r4, r1
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	4b47      	ldr	r3, [pc, #284]	; (8004b9c <UART_SetConfig+0x384>)
 8004a80:	fba3 2302 	umull	r2, r3, r3, r2
 8004a84:	095b      	lsrs	r3, r3, #5
 8004a86:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	461d      	mov	r5, r3
 8004a8e:	f04f 0600 	mov.w	r6, #0
 8004a92:	46a9      	mov	r9, r5
 8004a94:	46b2      	mov	sl, r6
 8004a96:	eb19 0309 	adds.w	r3, r9, r9
 8004a9a:	eb4a 040a 	adc.w	r4, sl, sl
 8004a9e:	4699      	mov	r9, r3
 8004aa0:	46a2      	mov	sl, r4
 8004aa2:	eb19 0905 	adds.w	r9, r9, r5
 8004aa6:	eb4a 0a06 	adc.w	sl, sl, r6
 8004aaa:	f04f 0100 	mov.w	r1, #0
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ab6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004aba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004abe:	4689      	mov	r9, r1
 8004ac0:	4692      	mov	sl, r2
 8004ac2:	eb19 0005 	adds.w	r0, r9, r5
 8004ac6:	eb4a 0106 	adc.w	r1, sl, r6
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	461d      	mov	r5, r3
 8004ad0:	f04f 0600 	mov.w	r6, #0
 8004ad4:	196b      	adds	r3, r5, r5
 8004ad6:	eb46 0406 	adc.w	r4, r6, r6
 8004ada:	461a      	mov	r2, r3
 8004adc:	4623      	mov	r3, r4
 8004ade:	f7fc f881 	bl	8000be4 <__aeabi_uldivmod>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	460c      	mov	r4, r1
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	4b2c      	ldr	r3, [pc, #176]	; (8004b9c <UART_SetConfig+0x384>)
 8004aea:	fba3 1302 	umull	r1, r3, r3, r2
 8004aee:	095b      	lsrs	r3, r3, #5
 8004af0:	2164      	movs	r1, #100	; 0x64
 8004af2:	fb01 f303 	mul.w	r3, r1, r3
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	00db      	lsls	r3, r3, #3
 8004afa:	3332      	adds	r3, #50	; 0x32
 8004afc:	4a27      	ldr	r2, [pc, #156]	; (8004b9c <UART_SetConfig+0x384>)
 8004afe:	fba2 2303 	umull	r2, r3, r2, r3
 8004b02:	095b      	lsrs	r3, r3, #5
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b0a:	4498      	add	r8, r3
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	461d      	mov	r5, r3
 8004b10:	f04f 0600 	mov.w	r6, #0
 8004b14:	46a9      	mov	r9, r5
 8004b16:	46b2      	mov	sl, r6
 8004b18:	eb19 0309 	adds.w	r3, r9, r9
 8004b1c:	eb4a 040a 	adc.w	r4, sl, sl
 8004b20:	4699      	mov	r9, r3
 8004b22:	46a2      	mov	sl, r4
 8004b24:	eb19 0905 	adds.w	r9, r9, r5
 8004b28:	eb4a 0a06 	adc.w	sl, sl, r6
 8004b2c:	f04f 0100 	mov.w	r1, #0
 8004b30:	f04f 0200 	mov.w	r2, #0
 8004b34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b40:	4689      	mov	r9, r1
 8004b42:	4692      	mov	sl, r2
 8004b44:	eb19 0005 	adds.w	r0, r9, r5
 8004b48:	eb4a 0106 	adc.w	r1, sl, r6
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	461d      	mov	r5, r3
 8004b52:	f04f 0600 	mov.w	r6, #0
 8004b56:	196b      	adds	r3, r5, r5
 8004b58:	eb46 0406 	adc.w	r4, r6, r6
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4623      	mov	r3, r4
 8004b60:	f7fc f840 	bl	8000be4 <__aeabi_uldivmod>
 8004b64:	4603      	mov	r3, r0
 8004b66:	460c      	mov	r4, r1
 8004b68:	461a      	mov	r2, r3
 8004b6a:	4b0c      	ldr	r3, [pc, #48]	; (8004b9c <UART_SetConfig+0x384>)
 8004b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b70:	095b      	lsrs	r3, r3, #5
 8004b72:	2164      	movs	r1, #100	; 0x64
 8004b74:	fb01 f303 	mul.w	r3, r1, r3
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	3332      	adds	r3, #50	; 0x32
 8004b7e:	4a07      	ldr	r2, [pc, #28]	; (8004b9c <UART_SetConfig+0x384>)
 8004b80:	fba2 2303 	umull	r2, r3, r2, r3
 8004b84:	095b      	lsrs	r3, r3, #5
 8004b86:	f003 0207 	and.w	r2, r3, #7
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4442      	add	r2, r8
 8004b90:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004b92:	e1b2      	b.n	8004efa <UART_SetConfig+0x6e2>
 8004b94:	40011000 	.word	0x40011000
 8004b98:	40011400 	.word	0x40011400
 8004b9c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4ad7      	ldr	r2, [pc, #860]	; (8004f04 <UART_SetConfig+0x6ec>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d005      	beq.n	8004bb6 <UART_SetConfig+0x39e>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4ad6      	ldr	r2, [pc, #856]	; (8004f08 <UART_SetConfig+0x6f0>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	f040 80d1 	bne.w	8004d58 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bb6:	f7fe f9bf 	bl	8002f38 <HAL_RCC_GetPCLK2Freq>
 8004bba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	469a      	mov	sl, r3
 8004bc0:	f04f 0b00 	mov.w	fp, #0
 8004bc4:	46d0      	mov	r8, sl
 8004bc6:	46d9      	mov	r9, fp
 8004bc8:	eb18 0308 	adds.w	r3, r8, r8
 8004bcc:	eb49 0409 	adc.w	r4, r9, r9
 8004bd0:	4698      	mov	r8, r3
 8004bd2:	46a1      	mov	r9, r4
 8004bd4:	eb18 080a 	adds.w	r8, r8, sl
 8004bd8:	eb49 090b 	adc.w	r9, r9, fp
 8004bdc:	f04f 0100 	mov.w	r1, #0
 8004be0:	f04f 0200 	mov.w	r2, #0
 8004be4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004be8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004bec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004bf0:	4688      	mov	r8, r1
 8004bf2:	4691      	mov	r9, r2
 8004bf4:	eb1a 0508 	adds.w	r5, sl, r8
 8004bf8:	eb4b 0609 	adc.w	r6, fp, r9
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	4619      	mov	r1, r3
 8004c02:	f04f 0200 	mov.w	r2, #0
 8004c06:	f04f 0300 	mov.w	r3, #0
 8004c0a:	f04f 0400 	mov.w	r4, #0
 8004c0e:	0094      	lsls	r4, r2, #2
 8004c10:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c14:	008b      	lsls	r3, r1, #2
 8004c16:	461a      	mov	r2, r3
 8004c18:	4623      	mov	r3, r4
 8004c1a:	4628      	mov	r0, r5
 8004c1c:	4631      	mov	r1, r6
 8004c1e:	f7fb ffe1 	bl	8000be4 <__aeabi_uldivmod>
 8004c22:	4603      	mov	r3, r0
 8004c24:	460c      	mov	r4, r1
 8004c26:	461a      	mov	r2, r3
 8004c28:	4bb8      	ldr	r3, [pc, #736]	; (8004f0c <UART_SetConfig+0x6f4>)
 8004c2a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c2e:	095b      	lsrs	r3, r3, #5
 8004c30:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	469b      	mov	fp, r3
 8004c38:	f04f 0c00 	mov.w	ip, #0
 8004c3c:	46d9      	mov	r9, fp
 8004c3e:	46e2      	mov	sl, ip
 8004c40:	eb19 0309 	adds.w	r3, r9, r9
 8004c44:	eb4a 040a 	adc.w	r4, sl, sl
 8004c48:	4699      	mov	r9, r3
 8004c4a:	46a2      	mov	sl, r4
 8004c4c:	eb19 090b 	adds.w	r9, r9, fp
 8004c50:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c54:	f04f 0100 	mov.w	r1, #0
 8004c58:	f04f 0200 	mov.w	r2, #0
 8004c5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c68:	4689      	mov	r9, r1
 8004c6a:	4692      	mov	sl, r2
 8004c6c:	eb1b 0509 	adds.w	r5, fp, r9
 8004c70:	eb4c 060a 	adc.w	r6, ip, sl
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	4619      	mov	r1, r3
 8004c7a:	f04f 0200 	mov.w	r2, #0
 8004c7e:	f04f 0300 	mov.w	r3, #0
 8004c82:	f04f 0400 	mov.w	r4, #0
 8004c86:	0094      	lsls	r4, r2, #2
 8004c88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c8c:	008b      	lsls	r3, r1, #2
 8004c8e:	461a      	mov	r2, r3
 8004c90:	4623      	mov	r3, r4
 8004c92:	4628      	mov	r0, r5
 8004c94:	4631      	mov	r1, r6
 8004c96:	f7fb ffa5 	bl	8000be4 <__aeabi_uldivmod>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	460c      	mov	r4, r1
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	4b9a      	ldr	r3, [pc, #616]	; (8004f0c <UART_SetConfig+0x6f4>)
 8004ca2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ca6:	095b      	lsrs	r3, r3, #5
 8004ca8:	2164      	movs	r1, #100	; 0x64
 8004caa:	fb01 f303 	mul.w	r3, r1, r3
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	011b      	lsls	r3, r3, #4
 8004cb2:	3332      	adds	r3, #50	; 0x32
 8004cb4:	4a95      	ldr	r2, [pc, #596]	; (8004f0c <UART_SetConfig+0x6f4>)
 8004cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cba:	095b      	lsrs	r3, r3, #5
 8004cbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cc0:	4498      	add	r8, r3
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	469b      	mov	fp, r3
 8004cc6:	f04f 0c00 	mov.w	ip, #0
 8004cca:	46d9      	mov	r9, fp
 8004ccc:	46e2      	mov	sl, ip
 8004cce:	eb19 0309 	adds.w	r3, r9, r9
 8004cd2:	eb4a 040a 	adc.w	r4, sl, sl
 8004cd6:	4699      	mov	r9, r3
 8004cd8:	46a2      	mov	sl, r4
 8004cda:	eb19 090b 	adds.w	r9, r9, fp
 8004cde:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004ce2:	f04f 0100 	mov.w	r1, #0
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cf2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cf6:	4689      	mov	r9, r1
 8004cf8:	4692      	mov	sl, r2
 8004cfa:	eb1b 0509 	adds.w	r5, fp, r9
 8004cfe:	eb4c 060a 	adc.w	r6, ip, sl
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	4619      	mov	r1, r3
 8004d08:	f04f 0200 	mov.w	r2, #0
 8004d0c:	f04f 0300 	mov.w	r3, #0
 8004d10:	f04f 0400 	mov.w	r4, #0
 8004d14:	0094      	lsls	r4, r2, #2
 8004d16:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d1a:	008b      	lsls	r3, r1, #2
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	4623      	mov	r3, r4
 8004d20:	4628      	mov	r0, r5
 8004d22:	4631      	mov	r1, r6
 8004d24:	f7fb ff5e 	bl	8000be4 <__aeabi_uldivmod>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	460c      	mov	r4, r1
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	4b77      	ldr	r3, [pc, #476]	; (8004f0c <UART_SetConfig+0x6f4>)
 8004d30:	fba3 1302 	umull	r1, r3, r3, r2
 8004d34:	095b      	lsrs	r3, r3, #5
 8004d36:	2164      	movs	r1, #100	; 0x64
 8004d38:	fb01 f303 	mul.w	r3, r1, r3
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	3332      	adds	r3, #50	; 0x32
 8004d42:	4a72      	ldr	r2, [pc, #456]	; (8004f0c <UART_SetConfig+0x6f4>)
 8004d44:	fba2 2303 	umull	r2, r3, r2, r3
 8004d48:	095b      	lsrs	r3, r3, #5
 8004d4a:	f003 020f 	and.w	r2, r3, #15
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4442      	add	r2, r8
 8004d54:	609a      	str	r2, [r3, #8]
 8004d56:	e0d0      	b.n	8004efa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d58:	f7fe f8da 	bl	8002f10 <HAL_RCC_GetPCLK1Freq>
 8004d5c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	469a      	mov	sl, r3
 8004d62:	f04f 0b00 	mov.w	fp, #0
 8004d66:	46d0      	mov	r8, sl
 8004d68:	46d9      	mov	r9, fp
 8004d6a:	eb18 0308 	adds.w	r3, r8, r8
 8004d6e:	eb49 0409 	adc.w	r4, r9, r9
 8004d72:	4698      	mov	r8, r3
 8004d74:	46a1      	mov	r9, r4
 8004d76:	eb18 080a 	adds.w	r8, r8, sl
 8004d7a:	eb49 090b 	adc.w	r9, r9, fp
 8004d7e:	f04f 0100 	mov.w	r1, #0
 8004d82:	f04f 0200 	mov.w	r2, #0
 8004d86:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d8a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d8e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d92:	4688      	mov	r8, r1
 8004d94:	4691      	mov	r9, r2
 8004d96:	eb1a 0508 	adds.w	r5, sl, r8
 8004d9a:	eb4b 0609 	adc.w	r6, fp, r9
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	4619      	mov	r1, r3
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	f04f 0400 	mov.w	r4, #0
 8004db0:	0094      	lsls	r4, r2, #2
 8004db2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004db6:	008b      	lsls	r3, r1, #2
 8004db8:	461a      	mov	r2, r3
 8004dba:	4623      	mov	r3, r4
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	4631      	mov	r1, r6
 8004dc0:	f7fb ff10 	bl	8000be4 <__aeabi_uldivmod>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	460c      	mov	r4, r1
 8004dc8:	461a      	mov	r2, r3
 8004dca:	4b50      	ldr	r3, [pc, #320]	; (8004f0c <UART_SetConfig+0x6f4>)
 8004dcc:	fba3 2302 	umull	r2, r3, r3, r2
 8004dd0:	095b      	lsrs	r3, r3, #5
 8004dd2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	469b      	mov	fp, r3
 8004dda:	f04f 0c00 	mov.w	ip, #0
 8004dde:	46d9      	mov	r9, fp
 8004de0:	46e2      	mov	sl, ip
 8004de2:	eb19 0309 	adds.w	r3, r9, r9
 8004de6:	eb4a 040a 	adc.w	r4, sl, sl
 8004dea:	4699      	mov	r9, r3
 8004dec:	46a2      	mov	sl, r4
 8004dee:	eb19 090b 	adds.w	r9, r9, fp
 8004df2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004df6:	f04f 0100 	mov.w	r1, #0
 8004dfa:	f04f 0200 	mov.w	r2, #0
 8004dfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e0a:	4689      	mov	r9, r1
 8004e0c:	4692      	mov	sl, r2
 8004e0e:	eb1b 0509 	adds.w	r5, fp, r9
 8004e12:	eb4c 060a 	adc.w	r6, ip, sl
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	f04f 0200 	mov.w	r2, #0
 8004e20:	f04f 0300 	mov.w	r3, #0
 8004e24:	f04f 0400 	mov.w	r4, #0
 8004e28:	0094      	lsls	r4, r2, #2
 8004e2a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e2e:	008b      	lsls	r3, r1, #2
 8004e30:	461a      	mov	r2, r3
 8004e32:	4623      	mov	r3, r4
 8004e34:	4628      	mov	r0, r5
 8004e36:	4631      	mov	r1, r6
 8004e38:	f7fb fed4 	bl	8000be4 <__aeabi_uldivmod>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	460c      	mov	r4, r1
 8004e40:	461a      	mov	r2, r3
 8004e42:	4b32      	ldr	r3, [pc, #200]	; (8004f0c <UART_SetConfig+0x6f4>)
 8004e44:	fba3 1302 	umull	r1, r3, r3, r2
 8004e48:	095b      	lsrs	r3, r3, #5
 8004e4a:	2164      	movs	r1, #100	; 0x64
 8004e4c:	fb01 f303 	mul.w	r3, r1, r3
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	011b      	lsls	r3, r3, #4
 8004e54:	3332      	adds	r3, #50	; 0x32
 8004e56:	4a2d      	ldr	r2, [pc, #180]	; (8004f0c <UART_SetConfig+0x6f4>)
 8004e58:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5c:	095b      	lsrs	r3, r3, #5
 8004e5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e62:	4498      	add	r8, r3
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	469b      	mov	fp, r3
 8004e68:	f04f 0c00 	mov.w	ip, #0
 8004e6c:	46d9      	mov	r9, fp
 8004e6e:	46e2      	mov	sl, ip
 8004e70:	eb19 0309 	adds.w	r3, r9, r9
 8004e74:	eb4a 040a 	adc.w	r4, sl, sl
 8004e78:	4699      	mov	r9, r3
 8004e7a:	46a2      	mov	sl, r4
 8004e7c:	eb19 090b 	adds.w	r9, r9, fp
 8004e80:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004e84:	f04f 0100 	mov.w	r1, #0
 8004e88:	f04f 0200 	mov.w	r2, #0
 8004e8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e98:	4689      	mov	r9, r1
 8004e9a:	4692      	mov	sl, r2
 8004e9c:	eb1b 0509 	adds.w	r5, fp, r9
 8004ea0:	eb4c 060a 	adc.w	r6, ip, sl
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	f04f 0200 	mov.w	r2, #0
 8004eae:	f04f 0300 	mov.w	r3, #0
 8004eb2:	f04f 0400 	mov.w	r4, #0
 8004eb6:	0094      	lsls	r4, r2, #2
 8004eb8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ebc:	008b      	lsls	r3, r1, #2
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	4623      	mov	r3, r4
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	4631      	mov	r1, r6
 8004ec6:	f7fb fe8d 	bl	8000be4 <__aeabi_uldivmod>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	460c      	mov	r4, r1
 8004ece:	461a      	mov	r2, r3
 8004ed0:	4b0e      	ldr	r3, [pc, #56]	; (8004f0c <UART_SetConfig+0x6f4>)
 8004ed2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ed6:	095b      	lsrs	r3, r3, #5
 8004ed8:	2164      	movs	r1, #100	; 0x64
 8004eda:	fb01 f303 	mul.w	r3, r1, r3
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	011b      	lsls	r3, r3, #4
 8004ee2:	3332      	adds	r3, #50	; 0x32
 8004ee4:	4a09      	ldr	r2, [pc, #36]	; (8004f0c <UART_SetConfig+0x6f4>)
 8004ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	f003 020f 	and.w	r2, r3, #15
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4442      	add	r2, r8
 8004ef6:	609a      	str	r2, [r3, #8]
}
 8004ef8:	e7ff      	b.n	8004efa <UART_SetConfig+0x6e2>
 8004efa:	bf00      	nop
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f04:	40011000 	.word	0x40011000
 8004f08:	40011400 	.word	0x40011400
 8004f0c:	51eb851f 	.word	0x51eb851f

08004f10 <_Z12FastMathInitv>:
#include <cstdint>

float sineTable[FAST_MATH_TABLE_SIZE];

void FastMathInit()
{
 8004f10:	b590      	push	{r4, r7, lr}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
	double x = 0.0f;
 8004f16:	f04f 0300 	mov.w	r3, #0
 8004f1a:	f04f 0400 	mov.w	r4, #0
 8004f1e:	e9c7 3402 	strd	r3, r4, [r7, #8]

	for (uint32_t i = 0; i < FAST_MATH_TABLE_SIZE; i++)
 8004f22:	2300      	movs	r3, #0
 8004f24:	607b      	str	r3, [r7, #4]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d81e      	bhi.n	8004f6e <_Z12FastMathInitv+0x5e>
	{
		sineTable[i] = (float) sin(x);
 8004f30:	ed97 0b02 	vldr	d0, [r7, #8]
 8004f34:	f000 fb74 	bl	8005620 <sin>
 8004f38:	ec54 3b10 	vmov	r3, r4, d0
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	4621      	mov	r1, r4
 8004f40:	f7fb fe00 	bl	8000b44 <__aeabi_d2f>
 8004f44:	4601      	mov	r1, r0
 8004f46:	4a0e      	ldr	r2, [pc, #56]	; (8004f80 <_Z12FastMathInitv+0x70>)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	6019      	str	r1, [r3, #0]

		x += (M_PI * 2.0) / (double) FAST_MATH_TABLE_SIZE;
 8004f50:	a309      	add	r3, pc, #36	; (adr r3, 8004f78 <_Z12FastMathInitv+0x68>)
 8004f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f5a:	f7fb f95b 	bl	8000214 <__adddf3>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	460c      	mov	r4, r1
 8004f62:	e9c7 3402 	strd	r3, r4, [r7, #8]
	for (uint32_t i = 0; i < FAST_MATH_TABLE_SIZE; i++)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	607b      	str	r3, [r7, #4]
 8004f6c:	e7db      	b.n	8004f26 <_Z12FastMathInitv+0x16>
	}
}
 8004f6e:	bf00      	nop
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd90      	pop	{r4, r7, pc}
 8004f76:	bf00      	nop
 8004f78:	8d1cfee8 	.word	0x8d1cfee8
 8004f7c:	3f59238d 	.word	0x3f59238d
 8004f80:	2000008c 	.word	0x2000008c
 8004f84:	00000000 	.word	0x00000000

08004f88 <_Z7FastSinf>:

float FastSin(float x)
{
 8004f88:	b590      	push	{r4, r7, lr}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	ed87 0a01 	vstr	s0, [r7, #4]
	x -= (float) (M_PI * 2.0) * (float) ((int32_t) (x / (float) (M_PI * 2.0)));
 8004f92:	ed97 7a01 	vldr	s14, [r7, #4]
 8004f96:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8005000 <_Z7FastSinf+0x78>
 8004f9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fa6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005000 <_Z7FastSinf+0x78>
 8004faa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fae:	ed97 7a01 	vldr	s14, [r7, #4]
 8004fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fb6:	edc7 7a01 	vstr	s15, [r7, #4]

	uint32_t idx = (uint32_t) (x * ((double) FAST_MATH_TABLE_SIZE / (M_PI * 2.0)));
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7fb fa88 	bl	80004d0 <__aeabi_f2d>
 8004fc0:	a30d      	add	r3, pc, #52	; (adr r3, 8004ff8 <_Z7FastSinf+0x70>)
 8004fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc6:	f7fb fadb 	bl	8000580 <__aeabi_dmul>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	460c      	mov	r4, r1
 8004fce:	4618      	mov	r0, r3
 8004fd0:	4621      	mov	r1, r4
 8004fd2:	f7fb fd97 	bl	8000b04 <__aeabi_d2uiz>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	60fb      	str	r3, [r7, #12]

	return sineTable[idx];
 8004fda:	4a0a      	ldr	r2, [pc, #40]	; (8005004 <_Z7FastSinf+0x7c>)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	ee07 3a90 	vmov	s15, r3
}
 8004fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd90      	pop	{r4, r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	f3af 8000 	nop.w
 8004ff8:	7ac2ebe6 	.word	0x7ac2ebe6
 8004ffc:	40845dea 	.word	0x40845dea
 8005000:	40c90fdb 	.word	0x40c90fdb
 8005004:	2000008c 	.word	0x2000008c

08005008 <_Z7FastCosf>:

float FastCos(float x)
{
 8005008:	b590      	push	{r4, r7, lr}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	ed87 0a01 	vstr	s0, [r7, #4]
	x += (float) M_PI / 2.0f;
 8005012:	edd7 7a01 	vldr	s15, [r7, #4]
 8005016:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8005090 <_Z7FastCosf+0x88>
 800501a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800501e:	edc7 7a01 	vstr	s15, [r7, #4]
	x -= (float) (M_PI * 2.0) * (float) ((int32_t) (x / (float) (M_PI * 2.0)));
 8005022:	ed97 7a01 	vldr	s14, [r7, #4]
 8005026:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8005094 <_Z7FastCosf+0x8c>
 800502a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800502e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005036:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005094 <_Z7FastCosf+0x8c>
 800503a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800503e:	ed97 7a01 	vldr	s14, [r7, #4]
 8005042:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005046:	edc7 7a01 	vstr	s15, [r7, #4]

	uint32_t idx = (uint32_t) (x * ((double) FAST_MATH_TABLE_SIZE / (M_PI * 2.0)));
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7fb fa40 	bl	80004d0 <__aeabi_f2d>
 8005050:	a30d      	add	r3, pc, #52	; (adr r3, 8005088 <_Z7FastCosf+0x80>)
 8005052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005056:	f7fb fa93 	bl	8000580 <__aeabi_dmul>
 800505a:	4603      	mov	r3, r0
 800505c:	460c      	mov	r4, r1
 800505e:	4618      	mov	r0, r3
 8005060:	4621      	mov	r1, r4
 8005062:	f7fb fd4f 	bl	8000b04 <__aeabi_d2uiz>
 8005066:	4603      	mov	r3, r0
 8005068:	60fb      	str	r3, [r7, #12]

	return sineTable[idx];
 800506a:	4a0b      	ldr	r2, [pc, #44]	; (8005098 <_Z7FastCosf+0x90>)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	ee07 3a90 	vmov	s15, r3
}
 8005078:	eeb0 0a67 	vmov.f32	s0, s15
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	bd90      	pop	{r4, r7, pc}
 8005082:	bf00      	nop
 8005084:	f3af 8000 	nop.w
 8005088:	7ac2ebe6 	.word	0x7ac2ebe6
 800508c:	40845dea 	.word	0x40845dea
 8005090:	3fc90fdb 	.word	0x3fc90fdb
 8005094:	40c90fdb 	.word	0x40c90fdb
 8005098:	2000008c 	.word	0x2000008c

0800509c <HAL_TIM_PeriodElapsedCallback>:
void (*Control)();

uint8_t controlStart = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a43      	ldr	r2, [pc, #268]	; (80051b8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d13e      	bne.n	800512c <HAL_TIM_PeriodElapsedCallback+0x90>
	{
		__HAL_TIM_DISABLE_IT(&htim8, TIM_IT_UPDATE);
 80050ae:	4b43      	ldr	r3, [pc, #268]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x120>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68da      	ldr	r2, [r3, #12]
 80050b4:	4b41      	ldr	r3, [pc, #260]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x120>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 0201 	bic.w	r2, r2, #1
 80050bc:	60da      	str	r2, [r3, #12]
		__HAL_TIM_DISABLE(&htim8);
 80050be:	4b3f      	ldr	r3, [pc, #252]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x120>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6a1a      	ldr	r2, [r3, #32]
 80050c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80050c8:	4013      	ands	r3, r2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	bf0c      	ite	eq
 80050ce:	2301      	moveq	r3, #1
 80050d0:	2300      	movne	r3, #0
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d014      	beq.n	8005102 <HAL_TIM_PeriodElapsedCallback+0x66>
 80050d8:	4b38      	ldr	r3, [pc, #224]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x120>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6a1a      	ldr	r2, [r3, #32]
 80050de:	f240 4344 	movw	r3, #1092	; 0x444
 80050e2:	4013      	ands	r3, r2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	bf0c      	ite	eq
 80050e8:	2301      	moveq	r3, #1
 80050ea:	2300      	movne	r3, #0
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d007      	beq.n	8005102 <HAL_TIM_PeriodElapsedCallback+0x66>
 80050f2:	4b32      	ldr	r3, [pc, #200]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x120>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	4b30      	ldr	r3, [pc, #192]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x120>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0201 	bic.w	r2, r2, #1
 8005100:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim8, 0x0);
 8005102:	4b2e      	ldr	r3, [pc, #184]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2200      	movs	r2, #0
 8005108:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_ENABLE_IT(&htim8, TIM_IT_UPDATE);
 800510a:	4b2c      	ldr	r3, [pc, #176]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x120>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68da      	ldr	r2, [r3, #12]
 8005110:	4b2a      	ldr	r3, [pc, #168]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f042 0201 	orr.w	r2, r2, #1
 8005118:	60da      	str	r2, [r3, #12]
		__HAL_TIM_ENABLE(&htim8);
 800511a:	4b28      	ldr	r3, [pc, #160]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x120>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	4b26      	ldr	r3, [pc, #152]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f042 0201 	orr.w	r2, r2, #1
 8005128:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start(&hadc2);
		HAL_ADC_Start(&hadc3);

		HAL_GPIO_TogglePin(TP1_GPIO_Port, TP1_Pin);
	}
}
 800512a:	e041      	b.n	80051b0 <HAL_TIM_PeriodElapsedCallback+0x114>
	else if (htim->Instance == TIM8)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a23      	ldr	r2, [pc, #140]	; (80051c0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d13c      	bne.n	80051b0 <HAL_TIM_PeriodElapsedCallback+0x114>
		HAL_GPIO_TogglePin(TP1_GPIO_Port, TP1_Pin);
 8005136:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800513a:	4822      	ldr	r0, [pc, #136]	; (80051c4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800513c:	f7fd fd8b 	bl	8002c56 <HAL_GPIO_TogglePin>
		SO1 = HAL_ADC_GetValue(&hadc1);
 8005140:	4821      	ldr	r0, [pc, #132]	; (80051c8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8005142:	f7fd f873 	bl	800222c <HAL_ADC_GetValue>
 8005146:	4603      	mov	r3, r0
 8005148:	b29a      	uxth	r2, r3
 800514a:	4b20      	ldr	r3, [pc, #128]	; (80051cc <HAL_TIM_PeriodElapsedCallback+0x130>)
 800514c:	801a      	strh	r2, [r3, #0]
		SO2 = HAL_ADC_GetValue(&hadc2);
 800514e:	4820      	ldr	r0, [pc, #128]	; (80051d0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8005150:	f7fd f86c 	bl	800222c <HAL_ADC_GetValue>
 8005154:	4603      	mov	r3, r0
 8005156:	b29a      	uxth	r2, r3
 8005158:	4b1e      	ldr	r3, [pc, #120]	; (80051d4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800515a:	801a      	strh	r2, [r3, #0]
		if (controlStart)
 800515c:	4b1e      	ldr	r3, [pc, #120]	; (80051d8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <HAL_TIM_PeriodElapsedCallback+0xce>
			Control();
 8005164:	4b1d      	ldr	r3, [pc, #116]	; (80051dc <HAL_TIM_PeriodElapsedCallback+0x140>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4798      	blx	r3
		ADC3Raw[adcIdx++] = HAL_ADC_GetValue(&hadc3);
 800516a:	481d      	ldr	r0, [pc, #116]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800516c:	f7fd f85e 	bl	800222c <HAL_ADC_GetValue>
 8005170:	4b1c      	ldr	r3, [pc, #112]	; (80051e4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	b2d1      	uxtb	r1, r2
 8005178:	4a1a      	ldr	r2, [pc, #104]	; (80051e4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800517a:	7011      	strb	r1, [r2, #0]
 800517c:	461a      	mov	r2, r3
 800517e:	b281      	uxth	r1, r0
 8005180:	4b19      	ldr	r3, [pc, #100]	; (80051e8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8005182:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		if (adcIdx == 3)
 8005186:	4b17      	ldr	r3, [pc, #92]	; (80051e4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	2b03      	cmp	r3, #3
 800518c:	d102      	bne.n	8005194 <HAL_TIM_PeriodElapsedCallback+0xf8>
			adcIdx = 0;
 800518e:	4b15      	ldr	r3, [pc, #84]	; (80051e4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8005190:	2200      	movs	r2, #0
 8005192:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start(&hadc1);
 8005194:	480c      	ldr	r0, [pc, #48]	; (80051c8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8005196:	f7fc ff83 	bl	80020a0 <HAL_ADC_Start>
		HAL_ADC_Start(&hadc2);
 800519a:	480d      	ldr	r0, [pc, #52]	; (80051d0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800519c:	f7fc ff80 	bl	80020a0 <HAL_ADC_Start>
		HAL_ADC_Start(&hadc3);
 80051a0:	480f      	ldr	r0, [pc, #60]	; (80051e0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80051a2:	f7fc ff7d 	bl	80020a0 <HAL_ADC_Start>
		HAL_GPIO_TogglePin(TP1_GPIO_Port, TP1_Pin);
 80051a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80051aa:	4806      	ldr	r0, [pc, #24]	; (80051c4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80051ac:	f7fd fd53 	bl	8002c56 <HAL_GPIO_TogglePin>
}
 80051b0:	bf00      	nop
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	40010000 	.word	0x40010000
 80051bc:	200041f8 	.word	0x200041f8
 80051c0:	40010400 	.word	0x40010400
 80051c4:	40020800 	.word	0x40020800
 80051c8:	20004108 	.word	0x20004108
 80051cc:	20004088 	.word	0x20004088
 80051d0:	200040c0 	.word	0x200040c0
 80051d4:	2000408a 	.word	0x2000408a
 80051d8:	20004098 	.word	0x20004098
 80051dc:	20004094 	.word	0x20004094
 80051e0:	20004150 	.word	0x20004150
 80051e4:	20004092 	.word	0x20004092
 80051e8:	2000408c 	.word	0x2000408c

080051ec <_Z15StartOnBoardLEDv>:

void StartOnBoardLED()
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80051f0:	210c      	movs	r1, #12
 80051f2:	4802      	ldr	r0, [pc, #8]	; (80051fc <_Z15StartOnBoardLEDv+0x10>)
 80051f4:	f7fe fb96 	bl	8003924 <HAL_TIM_PWM_Start>
}
 80051f8:	bf00      	nop
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	20004278 	.word	0x20004278

08005200 <_Z13SetOnBoardLEDm>:

void SetOnBoardLED(uint32_t duty)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
	htim2.Instance->CCR4 = duty;
 8005208:	4b04      	ldr	r3, [pc, #16]	; (800521c <_Z13SetOnBoardLEDm+0x1c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	20004278 	.word	0x20004278

08005220 <_Z14SetControlFuncPFvvE>:

void SetControlFunc(void (*funcPtr)())
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
	Control = funcPtr;
 8005228:	4a04      	ldr	r2, [pc, #16]	; (800523c <_Z14SetControlFuncPFvvE+0x1c>)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6013      	str	r3, [r2, #0]
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	20004094 	.word	0x20004094

08005240 <_Z17StartControlTimerv>:

void StartControlTimer()
{
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim1);
 8005244:	4803      	ldr	r0, [pc, #12]	; (8005254 <_Z17StartControlTimerv+0x14>)
 8005246:	f7fe fb14 	bl	8003872 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800524a:	4803      	ldr	r0, [pc, #12]	; (8005258 <_Z17StartControlTimerv+0x18>)
 800524c:	f7fe fb11 	bl	8003872 <HAL_TIM_Base_Start_IT>
}
 8005250:	bf00      	nop
 8005252:	bd80      	pop	{r7, pc}
 8005254:	20004238 	.word	0x20004238
 8005258:	200041f8 	.word	0x200041f8

0800525c <_Z16StartInverterPWMv>:

void StartInverterPWM()
{
 800525c:	b580      	push	{r7, lr}
 800525e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8005260:	2100      	movs	r1, #0
 8005262:	480c      	ldr	r0, [pc, #48]	; (8005294 <_Z16StartInverterPWMv+0x38>)
 8005264:	f7fe fb5e 	bl	8003924 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8005268:	2104      	movs	r1, #4
 800526a:	480a      	ldr	r0, [pc, #40]	; (8005294 <_Z16StartInverterPWMv+0x38>)
 800526c:	f7fe fb5a 	bl	8003924 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8005270:	2108      	movs	r1, #8
 8005272:	4808      	ldr	r0, [pc, #32]	; (8005294 <_Z16StartInverterPWMv+0x38>)
 8005274:	f7fe fb56 	bl	8003924 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8005278:	2100      	movs	r1, #0
 800527a:	4806      	ldr	r0, [pc, #24]	; (8005294 <_Z16StartInverterPWMv+0x38>)
 800527c:	f7ff f94d 	bl	800451a <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8005280:	2104      	movs	r1, #4
 8005282:	4804      	ldr	r0, [pc, #16]	; (8005294 <_Z16StartInverterPWMv+0x38>)
 8005284:	f7ff f949 	bl	800451a <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8005288:	2108      	movs	r1, #8
 800528a:	4802      	ldr	r0, [pc, #8]	; (8005294 <_Z16StartInverterPWMv+0x38>)
 800528c:	f7ff f945 	bl	800451a <HAL_TIMEx_PWMN_Start>
}
 8005290:	bf00      	nop
 8005292:	bd80      	pop	{r7, pc}
 8005294:	20004238 	.word	0x20004238

08005298 <_Z18SetInverterPWMDutymmm>:

void SetInverterPWMDuty(uint32_t aDuty, uint32_t bDuty, uint32_t cDuty)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
	TIM1->CCR1 = aDuty;
 80052a4:	4a07      	ldr	r2, [pc, #28]	; (80052c4 <_Z18SetInverterPWMDutymmm+0x2c>)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = bDuty;
 80052aa:	4a06      	ldr	r2, [pc, #24]	; (80052c4 <_Z18SetInverterPWMDutymmm+0x2c>)
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = cDuty;
 80052b0:	4a04      	ldr	r2, [pc, #16]	; (80052c4 <_Z18SetInverterPWMDutymmm+0x2c>)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80052b6:	bf00      	nop
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	40010000 	.word	0x40010000

080052c8 <_Z12ControlStartv>:

void ControlStart()
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
	controlStart = 1;
 80052cc:	4b03      	ldr	r3, [pc, #12]	; (80052dc <_Z12ControlStartv+0x14>)
 80052ce:	2201      	movs	r2, #1
 80052d0:	701a      	strb	r2, [r3, #0]
}
 80052d2:	bf00      	nop
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	20004098 	.word	0x20004098

080052e0 <_Z8StartADCv>:

void StartADC()
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_CAL_GPIO_Port, DC_CAL_Pin, GPIO_PIN_RESET);
 80052e4:	2200      	movs	r2, #0
 80052e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052ea:	4807      	ldr	r0, [pc, #28]	; (8005308 <_Z8StartADCv+0x28>)
 80052ec:	f7fd fc9a 	bl	8002c24 <HAL_GPIO_WritePin>
	HAL_ADC_Start(&hadc1);
 80052f0:	4806      	ldr	r0, [pc, #24]	; (800530c <_Z8StartADCv+0x2c>)
 80052f2:	f7fc fed5 	bl	80020a0 <HAL_ADC_Start>
	HAL_ADC_Start(&hadc2);
 80052f6:	4806      	ldr	r0, [pc, #24]	; (8005310 <_Z8StartADCv+0x30>)
 80052f8:	f7fc fed2 	bl	80020a0 <HAL_ADC_Start>
	HAL_ADC_Start(&hadc3);
 80052fc:	4805      	ldr	r0, [pc, #20]	; (8005314 <_Z8StartADCv+0x34>)
 80052fe:	f7fc fecf 	bl	80020a0 <HAL_ADC_Start>
}
 8005302:	bf00      	nop
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	40020800 	.word	0x40020800
 800530c:	20004108 	.word	0x20004108
 8005310:	200040c0 	.word	0x200040c0
 8005314:	20004150 	.word	0x20004150

08005318 <_Z6GetSO1v>:

uint16_t GetSO1()
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
	return SO1;
 800531c:	4b03      	ldr	r3, [pc, #12]	; (800532c <_Z6GetSO1v+0x14>)
 800531e:	881b      	ldrh	r3, [r3, #0]
}
 8005320:	4618      	mov	r0, r3
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	20004088 	.word	0x20004088

08005330 <_Z6GetSO2v>:

uint16_t GetSO2()
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
	return SO2;
 8005334:	4b03      	ldr	r3, [pc, #12]	; (8005344 <_Z6GetSO2v+0x14>)
 8005336:	881b      	ldrh	r3, [r3, #0]
}
 8005338:	4618      	mov	r0, r3
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	2000408a 	.word	0x2000408a

08005348 <_Z15GetDCVoltageRawv>:

uint16_t GetDCVoltageRaw()
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
	return ADC3Raw[1];
 800534c:	4b03      	ldr	r3, [pc, #12]	; (800535c <_Z15GetDCVoltageRawv+0x14>)
 800534e:	885b      	ldrh	r3, [r3, #2]
}
 8005350:	4618      	mov	r0, r3
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	2000408c 	.word	0x2000408c

08005360 <_Z12OnGateDriverv>:
{
	return ADC3Raw[0];
}

void OnGateDriver()
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, GPIO_PIN_SET);
 8005364:	2201      	movs	r2, #1
 8005366:	2180      	movs	r1, #128	; 0x80
 8005368:	4802      	ldr	r0, [pc, #8]	; (8005374 <_Z12OnGateDriverv+0x14>)
 800536a:	f7fd fc5b 	bl	8002c24 <HAL_GPIO_WritePin>
}
 800536e:	bf00      	nop
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	40020800 	.word	0x40020800

08005378 <_ZN12MotorControl13ControlUpdateEv>:
uint16_t aPWM, bPWM, cPWM;

float adc1, adc2;

void MotorControl::ControlUpdate()
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
	adc1 = (float) ((int32_t) GetSO1() - 0x7FF);
 8005380:	f7ff ffca 	bl	8005318 <_Z6GetSO1v>
 8005384:	4603      	mov	r3, r0
 8005386:	f2a3 73ff 	subw	r3, r3, #2047	; 0x7ff
 800538a:	ee07 3a90 	vmov	s15, r3
 800538e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005392:	4b4d      	ldr	r3, [pc, #308]	; (80054c8 <_ZN12MotorControl13ControlUpdateEv+0x150>)
 8005394:	edc3 7a00 	vstr	s15, [r3]
	adc2 = (float) ((int32_t) GetSO2() - 0x7FF);
 8005398:	f7ff ffca 	bl	8005330 <_Z6GetSO2v>
 800539c:	4603      	mov	r3, r0
 800539e:	f2a3 73ff 	subw	r3, r3, #2047	; 0x7ff
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053aa:	4b48      	ldr	r3, [pc, #288]	; (80054cc <_ZN12MotorControl13ControlUpdateEv+0x154>)
 80053ac:	edc3 7a00 	vstr	s15, [r3]

	DQZTransInv(d, q, theta, &a, &b, &c);
 80053b0:	4b47      	ldr	r3, [pc, #284]	; (80054d0 <_ZN12MotorControl13ControlUpdateEv+0x158>)
 80053b2:	edd3 7a00 	vldr	s15, [r3]
 80053b6:	4b47      	ldr	r3, [pc, #284]	; (80054d4 <_ZN12MotorControl13ControlUpdateEv+0x15c>)
 80053b8:	ed93 7a00 	vldr	s14, [r3]
 80053bc:	4b46      	ldr	r3, [pc, #280]	; (80054d8 <_ZN12MotorControl13ControlUpdateEv+0x160>)
 80053be:	edd3 6a00 	vldr	s13, [r3]
 80053c2:	4b46      	ldr	r3, [pc, #280]	; (80054dc <_ZN12MotorControl13ControlUpdateEv+0x164>)
 80053c4:	4a46      	ldr	r2, [pc, #280]	; (80054e0 <_ZN12MotorControl13ControlUpdateEv+0x168>)
 80053c6:	4947      	ldr	r1, [pc, #284]	; (80054e4 <_ZN12MotorControl13ControlUpdateEv+0x16c>)
 80053c8:	eeb0 1a66 	vmov.f32	s2, s13
 80053cc:	eef0 0a47 	vmov.f32	s1, s14
 80053d0:	eeb0 0a67 	vmov.f32	s0, s15
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 f891 	bl	80054fc <_ZN12MotorControl11DQZTransInvEfffPfS0_S0_>

	a = a + .5f;
 80053da:	4b42      	ldr	r3, [pc, #264]	; (80054e4 <_ZN12MotorControl13ControlUpdateEv+0x16c>)
 80053dc:	edd3 7a00 	vldr	s15, [r3]
 80053e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80053e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053e8:	4b3e      	ldr	r3, [pc, #248]	; (80054e4 <_ZN12MotorControl13ControlUpdateEv+0x16c>)
 80053ea:	edc3 7a00 	vstr	s15, [r3]
	b = b + .5f;
 80053ee:	4b3c      	ldr	r3, [pc, #240]	; (80054e0 <_ZN12MotorControl13ControlUpdateEv+0x168>)
 80053f0:	edd3 7a00 	vldr	s15, [r3]
 80053f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80053f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053fc:	4b38      	ldr	r3, [pc, #224]	; (80054e0 <_ZN12MotorControl13ControlUpdateEv+0x168>)
 80053fe:	edc3 7a00 	vstr	s15, [r3]
	c = c + .5f;
 8005402:	4b36      	ldr	r3, [pc, #216]	; (80054dc <_ZN12MotorControl13ControlUpdateEv+0x164>)
 8005404:	edd3 7a00 	vldr	s15, [r3]
 8005408:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800540c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005410:	4b32      	ldr	r3, [pc, #200]	; (80054dc <_ZN12MotorControl13ControlUpdateEv+0x164>)
 8005412:	edc3 7a00 	vstr	s15, [r3]

	aPWM = (uint16_t) (a * ((float) (0xFFF)));
 8005416:	4b33      	ldr	r3, [pc, #204]	; (80054e4 <_ZN12MotorControl13ControlUpdateEv+0x16c>)
 8005418:	edd3 7a00 	vldr	s15, [r3]
 800541c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80054e8 <_ZN12MotorControl13ControlUpdateEv+0x170>
 8005420:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005424:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005428:	ee17 3a90 	vmov	r3, s15
 800542c:	b29a      	uxth	r2, r3
 800542e:	4b2f      	ldr	r3, [pc, #188]	; (80054ec <_ZN12MotorControl13ControlUpdateEv+0x174>)
 8005430:	801a      	strh	r2, [r3, #0]
	bPWM = (uint16_t) (b * ((float) (0xFFF)));
 8005432:	4b2b      	ldr	r3, [pc, #172]	; (80054e0 <_ZN12MotorControl13ControlUpdateEv+0x168>)
 8005434:	edd3 7a00 	vldr	s15, [r3]
 8005438:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80054e8 <_ZN12MotorControl13ControlUpdateEv+0x170>
 800543c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005444:	ee17 3a90 	vmov	r3, s15
 8005448:	b29a      	uxth	r2, r3
 800544a:	4b29      	ldr	r3, [pc, #164]	; (80054f0 <_ZN12MotorControl13ControlUpdateEv+0x178>)
 800544c:	801a      	strh	r2, [r3, #0]
	cPWM = (uint16_t) (c * ((float) (0xFFF)));
 800544e:	4b23      	ldr	r3, [pc, #140]	; (80054dc <_ZN12MotorControl13ControlUpdateEv+0x164>)
 8005450:	edd3 7a00 	vldr	s15, [r3]
 8005454:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80054e8 <_ZN12MotorControl13ControlUpdateEv+0x170>
 8005458:	ee67 7a87 	vmul.f32	s15, s15, s14
 800545c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005460:	ee17 3a90 	vmov	r3, s15
 8005464:	b29a      	uxth	r2, r3
 8005466:	4b23      	ldr	r3, [pc, #140]	; (80054f4 <_ZN12MotorControl13ControlUpdateEv+0x17c>)
 8005468:	801a      	strh	r2, [r3, #0]

	SetInverterPWMDuty(aPWM, bPWM, cPWM);
 800546a:	4b20      	ldr	r3, [pc, #128]	; (80054ec <_ZN12MotorControl13ControlUpdateEv+0x174>)
 800546c:	881b      	ldrh	r3, [r3, #0]
 800546e:	4618      	mov	r0, r3
 8005470:	4b1f      	ldr	r3, [pc, #124]	; (80054f0 <_ZN12MotorControl13ControlUpdateEv+0x178>)
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	4619      	mov	r1, r3
 8005476:	4b1f      	ldr	r3, [pc, #124]	; (80054f4 <_ZN12MotorControl13ControlUpdateEv+0x17c>)
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	461a      	mov	r2, r3
 800547c:	f7ff ff0c 	bl	8005298 <_Z18SetInverterPWMDutymmm>

	theta += 0.002f;
 8005480:	4b15      	ldr	r3, [pc, #84]	; (80054d8 <_ZN12MotorControl13ControlUpdateEv+0x160>)
 8005482:	edd3 7a00 	vldr	s15, [r3]
 8005486:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80054f8 <_ZN12MotorControl13ControlUpdateEv+0x180>
 800548a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800548e:	4b12      	ldr	r3, [pc, #72]	; (80054d8 <_ZN12MotorControl13ControlUpdateEv+0x160>)
 8005490:	edc3 7a00 	vstr	s15, [r3]
	if (theta > 2 * M_PI)
 8005494:	4b10      	ldr	r3, [pc, #64]	; (80054d8 <_ZN12MotorControl13ControlUpdateEv+0x160>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4618      	mov	r0, r3
 800549a:	f7fb f819 	bl	80004d0 <__aeabi_f2d>
 800549e:	a308      	add	r3, pc, #32	; (adr r3, 80054c0 <_ZN12MotorControl13ControlUpdateEv+0x148>)
 80054a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a4:	f7fb fafc 	bl	8000aa0 <__aeabi_dcmpgt>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d100      	bne.n	80054b0 <_ZN12MotorControl13ControlUpdateEv+0x138>
		theta = 0.0f;
}
 80054ae:	e003      	b.n	80054b8 <_ZN12MotorControl13ControlUpdateEv+0x140>
		theta = 0.0f;
 80054b0:	4b09      	ldr	r3, [pc, #36]	; (80054d8 <_ZN12MotorControl13ControlUpdateEv+0x160>)
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	601a      	str	r2, [r3, #0]
}
 80054b8:	bf00      	nop
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	54442d18 	.word	0x54442d18
 80054c4:	401921fb 	.word	0x401921fb
 80054c8:	200040b8 	.word	0x200040b8
 80054cc:	200040bc 	.word	0x200040bc
 80054d0:	2000000c 	.word	0x2000000c
 80054d4:	200040ac 	.word	0x200040ac
 80054d8:	2000409c 	.word	0x2000409c
 80054dc:	200040a8 	.word	0x200040a8
 80054e0:	200040a4 	.word	0x200040a4
 80054e4:	200040a0 	.word	0x200040a0
 80054e8:	457ff000 	.word	0x457ff000
 80054ec:	200040b0 	.word	0x200040b0
 80054f0:	200040b2 	.word	0x200040b2
 80054f4:	200040b4 	.word	0x200040b4
 80054f8:	3b03126f 	.word	0x3b03126f

080054fc <_ZN12MotorControl11DQZTransInvEfffPfS0_S0_>:
	*d = 0.6666667f * (cf * a + (0.86602540378f * sf - .5f * cf) * b + (-0.86602540378f * sf - .5f * cf) * c);
	*q = 0.6666667f * (-sf * a - (-0.86602540378f * cf - .5f * sf) * b - (0.86602540378f * cf - .5f * sf) * c);
}

void MotorControl::DQZTransInv(float d, float q, float theta, float *a, float *b, float *c)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08a      	sub	sp, #40	; 0x28
 8005500:	af00      	add	r7, sp, #0
 8005502:	61f8      	str	r0, [r7, #28]
 8005504:	ed87 0a06 	vstr	s0, [r7, #24]
 8005508:	edc7 0a05 	vstr	s1, [r7, #20]
 800550c:	ed87 1a04 	vstr	s2, [r7, #16]
 8005510:	60f9      	str	r1, [r7, #12]
 8005512:	60ba      	str	r2, [r7, #8]
 8005514:	607b      	str	r3, [r7, #4]
	float cf = FastCos(theta);
 8005516:	ed97 0a04 	vldr	s0, [r7, #16]
 800551a:	f7ff fd75 	bl	8005008 <_Z7FastCosf>
 800551e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float sf = FastSin(theta);
 8005522:	ed97 0a04 	vldr	s0, [r7, #16]
 8005526:	f7ff fd2f 	bl	8004f88 <_Z7FastSinf>
 800552a:	ed87 0a08 	vstr	s0, [r7, #32]

	*a = cf * d - sf * q;
 800552e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005532:	edd7 7a06 	vldr	s15, [r7, #24]
 8005536:	ee27 7a27 	vmul.f32	s14, s14, s15
 800553a:	edd7 6a08 	vldr	s13, [r7, #32]
 800553e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005542:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005546:	ee77 7a67 	vsub.f32	s15, s14, s15
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	edc3 7a00 	vstr	s15, [r3]
	*b = (0.86602540378f * sf - .5f * cf) * d - (-0.86602540378f * cf - .5f * sf) * q;
 8005550:	edd7 7a08 	vldr	s15, [r7, #32]
 8005554:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80055fc <_ZN12MotorControl11DQZTransInvEfffPfS0_S0_+0x100>
 8005558:	ee27 7a87 	vmul.f32	s14, s15, s14
 800555c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005560:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8005564:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005568:	ee37 7a67 	vsub.f32	s14, s14, s15
 800556c:	edd7 7a06 	vldr	s15, [r7, #24]
 8005570:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005574:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005578:	eddf 6a21 	vldr	s13, [pc, #132]	; 8005600 <_ZN12MotorControl11DQZTransInvEfffPfS0_S0_+0x104>
 800557c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005580:	edd7 7a08 	vldr	s15, [r7, #32]
 8005584:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005588:	ee67 7a86 	vmul.f32	s15, s15, s12
 800558c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005590:	edd7 7a05 	vldr	s15, [r7, #20]
 8005594:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005598:	ee77 7a67 	vsub.f32	s15, s14, s15
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	edc3 7a00 	vstr	s15, [r3]
	*c = (-0.86602540378f * sf - .5f * cf) * d - (0.86602540378f * cf - .5f * sf) * q;
 80055a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80055a6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005600 <_ZN12MotorControl11DQZTransInvEfffPfS0_S0_+0x104>
 80055aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80055ae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80055b2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80055b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80055ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80055be:	edd7 7a06 	vldr	s15, [r7, #24]
 80055c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80055ca:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80055fc <_ZN12MotorControl11DQZTransInvEfffPfS0_S0_+0x100>
 80055ce:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80055d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80055d6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80055da:	ee67 7a86 	vmul.f32	s15, s15, s12
 80055de:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80055e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80055e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	edc3 7a00 	vstr	s15, [r3]
}
 80055f4:	bf00      	nop
 80055f6:	3728      	adds	r7, #40	; 0x28
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	3f5db3d7 	.word	0x3f5db3d7
 8005600:	bf5db3d7 	.word	0xbf5db3d7

08005604 <_Z11Delaymillism>:
#include <Util/util.hpp>

void Delaymillis(uint32_t ms)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f7fc fce1 	bl	8001fd4 <HAL_Delay>
}
 8005612:	bf00      	nop
 8005614:	3708      	adds	r7, #8
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	0000      	movs	r0, r0
 800561c:	0000      	movs	r0, r0
	...

08005620 <sin>:
 8005620:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005622:	ec51 0b10 	vmov	r0, r1, d0
 8005626:	4a20      	ldr	r2, [pc, #128]	; (80056a8 <sin+0x88>)
 8005628:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800562c:	4293      	cmp	r3, r2
 800562e:	dc07      	bgt.n	8005640 <sin+0x20>
 8005630:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80056a0 <sin+0x80>
 8005634:	2000      	movs	r0, #0
 8005636:	f000 fe37 	bl	80062a8 <__kernel_sin>
 800563a:	ec51 0b10 	vmov	r0, r1, d0
 800563e:	e007      	b.n	8005650 <sin+0x30>
 8005640:	4a1a      	ldr	r2, [pc, #104]	; (80056ac <sin+0x8c>)
 8005642:	4293      	cmp	r3, r2
 8005644:	dd09      	ble.n	800565a <sin+0x3a>
 8005646:	ee10 2a10 	vmov	r2, s0
 800564a:	460b      	mov	r3, r1
 800564c:	f7fa fde0 	bl	8000210 <__aeabi_dsub>
 8005650:	ec41 0b10 	vmov	d0, r0, r1
 8005654:	b005      	add	sp, #20
 8005656:	f85d fb04 	ldr.w	pc, [sp], #4
 800565a:	4668      	mov	r0, sp
 800565c:	f000 f828 	bl	80056b0 <__ieee754_rem_pio2>
 8005660:	f000 0003 	and.w	r0, r0, #3
 8005664:	2801      	cmp	r0, #1
 8005666:	ed9d 1b02 	vldr	d1, [sp, #8]
 800566a:	ed9d 0b00 	vldr	d0, [sp]
 800566e:	d004      	beq.n	800567a <sin+0x5a>
 8005670:	2802      	cmp	r0, #2
 8005672:	d005      	beq.n	8005680 <sin+0x60>
 8005674:	b970      	cbnz	r0, 8005694 <sin+0x74>
 8005676:	2001      	movs	r0, #1
 8005678:	e7dd      	b.n	8005636 <sin+0x16>
 800567a:	f000 fa0d 	bl	8005a98 <__kernel_cos>
 800567e:	e7dc      	b.n	800563a <sin+0x1a>
 8005680:	2001      	movs	r0, #1
 8005682:	f000 fe11 	bl	80062a8 <__kernel_sin>
 8005686:	ec53 2b10 	vmov	r2, r3, d0
 800568a:	ee10 0a10 	vmov	r0, s0
 800568e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005692:	e7dd      	b.n	8005650 <sin+0x30>
 8005694:	f000 fa00 	bl	8005a98 <__kernel_cos>
 8005698:	e7f5      	b.n	8005686 <sin+0x66>
 800569a:	bf00      	nop
 800569c:	f3af 8000 	nop.w
	...
 80056a8:	3fe921fb 	.word	0x3fe921fb
 80056ac:	7fefffff 	.word	0x7fefffff

080056b0 <__ieee754_rem_pio2>:
 80056b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b4:	ec57 6b10 	vmov	r6, r7, d0
 80056b8:	4bc3      	ldr	r3, [pc, #780]	; (80059c8 <__ieee754_rem_pio2+0x318>)
 80056ba:	b08d      	sub	sp, #52	; 0x34
 80056bc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80056c0:	4598      	cmp	r8, r3
 80056c2:	4604      	mov	r4, r0
 80056c4:	9704      	str	r7, [sp, #16]
 80056c6:	dc07      	bgt.n	80056d8 <__ieee754_rem_pio2+0x28>
 80056c8:	2200      	movs	r2, #0
 80056ca:	2300      	movs	r3, #0
 80056cc:	ed84 0b00 	vstr	d0, [r4]
 80056d0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80056d4:	2500      	movs	r5, #0
 80056d6:	e027      	b.n	8005728 <__ieee754_rem_pio2+0x78>
 80056d8:	4bbc      	ldr	r3, [pc, #752]	; (80059cc <__ieee754_rem_pio2+0x31c>)
 80056da:	4598      	cmp	r8, r3
 80056dc:	dc75      	bgt.n	80057ca <__ieee754_rem_pio2+0x11a>
 80056de:	9b04      	ldr	r3, [sp, #16]
 80056e0:	4dbb      	ldr	r5, [pc, #748]	; (80059d0 <__ieee754_rem_pio2+0x320>)
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	ee10 0a10 	vmov	r0, s0
 80056e8:	a3a9      	add	r3, pc, #676	; (adr r3, 8005990 <__ieee754_rem_pio2+0x2e0>)
 80056ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ee:	4639      	mov	r1, r7
 80056f0:	dd36      	ble.n	8005760 <__ieee754_rem_pio2+0xb0>
 80056f2:	f7fa fd8d 	bl	8000210 <__aeabi_dsub>
 80056f6:	45a8      	cmp	r8, r5
 80056f8:	4606      	mov	r6, r0
 80056fa:	460f      	mov	r7, r1
 80056fc:	d018      	beq.n	8005730 <__ieee754_rem_pio2+0x80>
 80056fe:	a3a6      	add	r3, pc, #664	; (adr r3, 8005998 <__ieee754_rem_pio2+0x2e8>)
 8005700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005704:	f7fa fd84 	bl	8000210 <__aeabi_dsub>
 8005708:	4602      	mov	r2, r0
 800570a:	460b      	mov	r3, r1
 800570c:	e9c4 2300 	strd	r2, r3, [r4]
 8005710:	4630      	mov	r0, r6
 8005712:	4639      	mov	r1, r7
 8005714:	f7fa fd7c 	bl	8000210 <__aeabi_dsub>
 8005718:	a39f      	add	r3, pc, #636	; (adr r3, 8005998 <__ieee754_rem_pio2+0x2e8>)
 800571a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571e:	f7fa fd77 	bl	8000210 <__aeabi_dsub>
 8005722:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005726:	2501      	movs	r5, #1
 8005728:	4628      	mov	r0, r5
 800572a:	b00d      	add	sp, #52	; 0x34
 800572c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005730:	a39b      	add	r3, pc, #620	; (adr r3, 80059a0 <__ieee754_rem_pio2+0x2f0>)
 8005732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005736:	f7fa fd6b 	bl	8000210 <__aeabi_dsub>
 800573a:	a39b      	add	r3, pc, #620	; (adr r3, 80059a8 <__ieee754_rem_pio2+0x2f8>)
 800573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005740:	4606      	mov	r6, r0
 8005742:	460f      	mov	r7, r1
 8005744:	f7fa fd64 	bl	8000210 <__aeabi_dsub>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	e9c4 2300 	strd	r2, r3, [r4]
 8005750:	4630      	mov	r0, r6
 8005752:	4639      	mov	r1, r7
 8005754:	f7fa fd5c 	bl	8000210 <__aeabi_dsub>
 8005758:	a393      	add	r3, pc, #588	; (adr r3, 80059a8 <__ieee754_rem_pio2+0x2f8>)
 800575a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575e:	e7de      	b.n	800571e <__ieee754_rem_pio2+0x6e>
 8005760:	f7fa fd58 	bl	8000214 <__adddf3>
 8005764:	45a8      	cmp	r8, r5
 8005766:	4606      	mov	r6, r0
 8005768:	460f      	mov	r7, r1
 800576a:	d016      	beq.n	800579a <__ieee754_rem_pio2+0xea>
 800576c:	a38a      	add	r3, pc, #552	; (adr r3, 8005998 <__ieee754_rem_pio2+0x2e8>)
 800576e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005772:	f7fa fd4f 	bl	8000214 <__adddf3>
 8005776:	4602      	mov	r2, r0
 8005778:	460b      	mov	r3, r1
 800577a:	e9c4 2300 	strd	r2, r3, [r4]
 800577e:	4630      	mov	r0, r6
 8005780:	4639      	mov	r1, r7
 8005782:	f7fa fd45 	bl	8000210 <__aeabi_dsub>
 8005786:	a384      	add	r3, pc, #528	; (adr r3, 8005998 <__ieee754_rem_pio2+0x2e8>)
 8005788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578c:	f7fa fd42 	bl	8000214 <__adddf3>
 8005790:	f04f 35ff 	mov.w	r5, #4294967295
 8005794:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005798:	e7c6      	b.n	8005728 <__ieee754_rem_pio2+0x78>
 800579a:	a381      	add	r3, pc, #516	; (adr r3, 80059a0 <__ieee754_rem_pio2+0x2f0>)
 800579c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a0:	f7fa fd38 	bl	8000214 <__adddf3>
 80057a4:	a380      	add	r3, pc, #512	; (adr r3, 80059a8 <__ieee754_rem_pio2+0x2f8>)
 80057a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057aa:	4606      	mov	r6, r0
 80057ac:	460f      	mov	r7, r1
 80057ae:	f7fa fd31 	bl	8000214 <__adddf3>
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	e9c4 2300 	strd	r2, r3, [r4]
 80057ba:	4630      	mov	r0, r6
 80057bc:	4639      	mov	r1, r7
 80057be:	f7fa fd27 	bl	8000210 <__aeabi_dsub>
 80057c2:	a379      	add	r3, pc, #484	; (adr r3, 80059a8 <__ieee754_rem_pio2+0x2f8>)
 80057c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c8:	e7e0      	b.n	800578c <__ieee754_rem_pio2+0xdc>
 80057ca:	4b82      	ldr	r3, [pc, #520]	; (80059d4 <__ieee754_rem_pio2+0x324>)
 80057cc:	4598      	cmp	r8, r3
 80057ce:	f300 80d0 	bgt.w	8005972 <__ieee754_rem_pio2+0x2c2>
 80057d2:	f000 fe23 	bl	800641c <fabs>
 80057d6:	ec57 6b10 	vmov	r6, r7, d0
 80057da:	ee10 0a10 	vmov	r0, s0
 80057de:	a374      	add	r3, pc, #464	; (adr r3, 80059b0 <__ieee754_rem_pio2+0x300>)
 80057e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e4:	4639      	mov	r1, r7
 80057e6:	f7fa fecb 	bl	8000580 <__aeabi_dmul>
 80057ea:	2200      	movs	r2, #0
 80057ec:	4b7a      	ldr	r3, [pc, #488]	; (80059d8 <__ieee754_rem_pio2+0x328>)
 80057ee:	f7fa fd11 	bl	8000214 <__adddf3>
 80057f2:	f7fb f95f 	bl	8000ab4 <__aeabi_d2iz>
 80057f6:	4605      	mov	r5, r0
 80057f8:	f7fa fe58 	bl	80004ac <__aeabi_i2d>
 80057fc:	a364      	add	r3, pc, #400	; (adr r3, 8005990 <__ieee754_rem_pio2+0x2e0>)
 80057fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005802:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005806:	f7fa febb 	bl	8000580 <__aeabi_dmul>
 800580a:	4602      	mov	r2, r0
 800580c:	460b      	mov	r3, r1
 800580e:	4630      	mov	r0, r6
 8005810:	4639      	mov	r1, r7
 8005812:	f7fa fcfd 	bl	8000210 <__aeabi_dsub>
 8005816:	a360      	add	r3, pc, #384	; (adr r3, 8005998 <__ieee754_rem_pio2+0x2e8>)
 8005818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581c:	4682      	mov	sl, r0
 800581e:	468b      	mov	fp, r1
 8005820:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005824:	f7fa feac 	bl	8000580 <__aeabi_dmul>
 8005828:	2d1f      	cmp	r5, #31
 800582a:	4606      	mov	r6, r0
 800582c:	460f      	mov	r7, r1
 800582e:	dc0c      	bgt.n	800584a <__ieee754_rem_pio2+0x19a>
 8005830:	1e6a      	subs	r2, r5, #1
 8005832:	4b6a      	ldr	r3, [pc, #424]	; (80059dc <__ieee754_rem_pio2+0x32c>)
 8005834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005838:	4543      	cmp	r3, r8
 800583a:	d006      	beq.n	800584a <__ieee754_rem_pio2+0x19a>
 800583c:	4632      	mov	r2, r6
 800583e:	463b      	mov	r3, r7
 8005840:	4650      	mov	r0, sl
 8005842:	4659      	mov	r1, fp
 8005844:	f7fa fce4 	bl	8000210 <__aeabi_dsub>
 8005848:	e00e      	b.n	8005868 <__ieee754_rem_pio2+0x1b8>
 800584a:	4632      	mov	r2, r6
 800584c:	463b      	mov	r3, r7
 800584e:	4650      	mov	r0, sl
 8005850:	4659      	mov	r1, fp
 8005852:	f7fa fcdd 	bl	8000210 <__aeabi_dsub>
 8005856:	ea4f 5328 	mov.w	r3, r8, asr #20
 800585a:	9305      	str	r3, [sp, #20]
 800585c:	9a05      	ldr	r2, [sp, #20]
 800585e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b10      	cmp	r3, #16
 8005866:	dc02      	bgt.n	800586e <__ieee754_rem_pio2+0x1be>
 8005868:	e9c4 0100 	strd	r0, r1, [r4]
 800586c:	e039      	b.n	80058e2 <__ieee754_rem_pio2+0x232>
 800586e:	a34c      	add	r3, pc, #304	; (adr r3, 80059a0 <__ieee754_rem_pio2+0x2f0>)
 8005870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005874:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005878:	f7fa fe82 	bl	8000580 <__aeabi_dmul>
 800587c:	4606      	mov	r6, r0
 800587e:	460f      	mov	r7, r1
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	4650      	mov	r0, sl
 8005886:	4659      	mov	r1, fp
 8005888:	f7fa fcc2 	bl	8000210 <__aeabi_dsub>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4680      	mov	r8, r0
 8005892:	4689      	mov	r9, r1
 8005894:	4650      	mov	r0, sl
 8005896:	4659      	mov	r1, fp
 8005898:	f7fa fcba 	bl	8000210 <__aeabi_dsub>
 800589c:	4632      	mov	r2, r6
 800589e:	463b      	mov	r3, r7
 80058a0:	f7fa fcb6 	bl	8000210 <__aeabi_dsub>
 80058a4:	a340      	add	r3, pc, #256	; (adr r3, 80059a8 <__ieee754_rem_pio2+0x2f8>)
 80058a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058aa:	4606      	mov	r6, r0
 80058ac:	460f      	mov	r7, r1
 80058ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058b2:	f7fa fe65 	bl	8000580 <__aeabi_dmul>
 80058b6:	4632      	mov	r2, r6
 80058b8:	463b      	mov	r3, r7
 80058ba:	f7fa fca9 	bl	8000210 <__aeabi_dsub>
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	4606      	mov	r6, r0
 80058c4:	460f      	mov	r7, r1
 80058c6:	4640      	mov	r0, r8
 80058c8:	4649      	mov	r1, r9
 80058ca:	f7fa fca1 	bl	8000210 <__aeabi_dsub>
 80058ce:	9a05      	ldr	r2, [sp, #20]
 80058d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b31      	cmp	r3, #49	; 0x31
 80058d8:	dc20      	bgt.n	800591c <__ieee754_rem_pio2+0x26c>
 80058da:	e9c4 0100 	strd	r0, r1, [r4]
 80058de:	46c2      	mov	sl, r8
 80058e0:	46cb      	mov	fp, r9
 80058e2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80058e6:	4650      	mov	r0, sl
 80058e8:	4642      	mov	r2, r8
 80058ea:	464b      	mov	r3, r9
 80058ec:	4659      	mov	r1, fp
 80058ee:	f7fa fc8f 	bl	8000210 <__aeabi_dsub>
 80058f2:	463b      	mov	r3, r7
 80058f4:	4632      	mov	r2, r6
 80058f6:	f7fa fc8b 	bl	8000210 <__aeabi_dsub>
 80058fa:	9b04      	ldr	r3, [sp, #16]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005902:	f6bf af11 	bge.w	8005728 <__ieee754_rem_pio2+0x78>
 8005906:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800590a:	6063      	str	r3, [r4, #4]
 800590c:	f8c4 8000 	str.w	r8, [r4]
 8005910:	60a0      	str	r0, [r4, #8]
 8005912:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005916:	60e3      	str	r3, [r4, #12]
 8005918:	426d      	negs	r5, r5
 800591a:	e705      	b.n	8005728 <__ieee754_rem_pio2+0x78>
 800591c:	a326      	add	r3, pc, #152	; (adr r3, 80059b8 <__ieee754_rem_pio2+0x308>)
 800591e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005922:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005926:	f7fa fe2b 	bl	8000580 <__aeabi_dmul>
 800592a:	4606      	mov	r6, r0
 800592c:	460f      	mov	r7, r1
 800592e:	4602      	mov	r2, r0
 8005930:	460b      	mov	r3, r1
 8005932:	4640      	mov	r0, r8
 8005934:	4649      	mov	r1, r9
 8005936:	f7fa fc6b 	bl	8000210 <__aeabi_dsub>
 800593a:	4602      	mov	r2, r0
 800593c:	460b      	mov	r3, r1
 800593e:	4682      	mov	sl, r0
 8005940:	468b      	mov	fp, r1
 8005942:	4640      	mov	r0, r8
 8005944:	4649      	mov	r1, r9
 8005946:	f7fa fc63 	bl	8000210 <__aeabi_dsub>
 800594a:	4632      	mov	r2, r6
 800594c:	463b      	mov	r3, r7
 800594e:	f7fa fc5f 	bl	8000210 <__aeabi_dsub>
 8005952:	a31b      	add	r3, pc, #108	; (adr r3, 80059c0 <__ieee754_rem_pio2+0x310>)
 8005954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005958:	4606      	mov	r6, r0
 800595a:	460f      	mov	r7, r1
 800595c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005960:	f7fa fe0e 	bl	8000580 <__aeabi_dmul>
 8005964:	4632      	mov	r2, r6
 8005966:	463b      	mov	r3, r7
 8005968:	f7fa fc52 	bl	8000210 <__aeabi_dsub>
 800596c:	4606      	mov	r6, r0
 800596e:	460f      	mov	r7, r1
 8005970:	e764      	b.n	800583c <__ieee754_rem_pio2+0x18c>
 8005972:	4b1b      	ldr	r3, [pc, #108]	; (80059e0 <__ieee754_rem_pio2+0x330>)
 8005974:	4598      	cmp	r8, r3
 8005976:	dd35      	ble.n	80059e4 <__ieee754_rem_pio2+0x334>
 8005978:	ee10 2a10 	vmov	r2, s0
 800597c:	463b      	mov	r3, r7
 800597e:	4630      	mov	r0, r6
 8005980:	4639      	mov	r1, r7
 8005982:	f7fa fc45 	bl	8000210 <__aeabi_dsub>
 8005986:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800598a:	e9c4 0100 	strd	r0, r1, [r4]
 800598e:	e6a1      	b.n	80056d4 <__ieee754_rem_pio2+0x24>
 8005990:	54400000 	.word	0x54400000
 8005994:	3ff921fb 	.word	0x3ff921fb
 8005998:	1a626331 	.word	0x1a626331
 800599c:	3dd0b461 	.word	0x3dd0b461
 80059a0:	1a600000 	.word	0x1a600000
 80059a4:	3dd0b461 	.word	0x3dd0b461
 80059a8:	2e037073 	.word	0x2e037073
 80059ac:	3ba3198a 	.word	0x3ba3198a
 80059b0:	6dc9c883 	.word	0x6dc9c883
 80059b4:	3fe45f30 	.word	0x3fe45f30
 80059b8:	2e000000 	.word	0x2e000000
 80059bc:	3ba3198a 	.word	0x3ba3198a
 80059c0:	252049c1 	.word	0x252049c1
 80059c4:	397b839a 	.word	0x397b839a
 80059c8:	3fe921fb 	.word	0x3fe921fb
 80059cc:	4002d97b 	.word	0x4002d97b
 80059d0:	3ff921fb 	.word	0x3ff921fb
 80059d4:	413921fb 	.word	0x413921fb
 80059d8:	3fe00000 	.word	0x3fe00000
 80059dc:	080066d0 	.word	0x080066d0
 80059e0:	7fefffff 	.word	0x7fefffff
 80059e4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80059e8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80059ec:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80059f0:	4630      	mov	r0, r6
 80059f2:	460f      	mov	r7, r1
 80059f4:	f7fb f85e 	bl	8000ab4 <__aeabi_d2iz>
 80059f8:	f7fa fd58 	bl	80004ac <__aeabi_i2d>
 80059fc:	4602      	mov	r2, r0
 80059fe:	460b      	mov	r3, r1
 8005a00:	4630      	mov	r0, r6
 8005a02:	4639      	mov	r1, r7
 8005a04:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005a08:	f7fa fc02 	bl	8000210 <__aeabi_dsub>
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	4b1f      	ldr	r3, [pc, #124]	; (8005a8c <__ieee754_rem_pio2+0x3dc>)
 8005a10:	f7fa fdb6 	bl	8000580 <__aeabi_dmul>
 8005a14:	460f      	mov	r7, r1
 8005a16:	4606      	mov	r6, r0
 8005a18:	f7fb f84c 	bl	8000ab4 <__aeabi_d2iz>
 8005a1c:	f7fa fd46 	bl	80004ac <__aeabi_i2d>
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	4630      	mov	r0, r6
 8005a26:	4639      	mov	r1, r7
 8005a28:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005a2c:	f7fa fbf0 	bl	8000210 <__aeabi_dsub>
 8005a30:	2200      	movs	r2, #0
 8005a32:	4b16      	ldr	r3, [pc, #88]	; (8005a8c <__ieee754_rem_pio2+0x3dc>)
 8005a34:	f7fa fda4 	bl	8000580 <__aeabi_dmul>
 8005a38:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005a3c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005a40:	f04f 0803 	mov.w	r8, #3
 8005a44:	2600      	movs	r6, #0
 8005a46:	2700      	movs	r7, #0
 8005a48:	4632      	mov	r2, r6
 8005a4a:	463b      	mov	r3, r7
 8005a4c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005a50:	f108 3aff 	add.w	sl, r8, #4294967295
 8005a54:	f7fa fffc 	bl	8000a50 <__aeabi_dcmpeq>
 8005a58:	b9b0      	cbnz	r0, 8005a88 <__ieee754_rem_pio2+0x3d8>
 8005a5a:	4b0d      	ldr	r3, [pc, #52]	; (8005a90 <__ieee754_rem_pio2+0x3e0>)
 8005a5c:	9301      	str	r3, [sp, #4]
 8005a5e:	2302      	movs	r3, #2
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	462a      	mov	r2, r5
 8005a64:	4643      	mov	r3, r8
 8005a66:	4621      	mov	r1, r4
 8005a68:	a806      	add	r0, sp, #24
 8005a6a:	f000 f8dd 	bl	8005c28 <__kernel_rem_pio2>
 8005a6e:	9b04      	ldr	r3, [sp, #16]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	4605      	mov	r5, r0
 8005a74:	f6bf ae58 	bge.w	8005728 <__ieee754_rem_pio2+0x78>
 8005a78:	6863      	ldr	r3, [r4, #4]
 8005a7a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005a7e:	6063      	str	r3, [r4, #4]
 8005a80:	68e3      	ldr	r3, [r4, #12]
 8005a82:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005a86:	e746      	b.n	8005916 <__ieee754_rem_pio2+0x266>
 8005a88:	46d0      	mov	r8, sl
 8005a8a:	e7dd      	b.n	8005a48 <__ieee754_rem_pio2+0x398>
 8005a8c:	41700000 	.word	0x41700000
 8005a90:	08006750 	.word	0x08006750
 8005a94:	00000000 	.word	0x00000000

08005a98 <__kernel_cos>:
 8005a98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9c:	ec59 8b10 	vmov	r8, r9, d0
 8005aa0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8005aa4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8005aa8:	ed2d 8b02 	vpush	{d8}
 8005aac:	eeb0 8a41 	vmov.f32	s16, s2
 8005ab0:	eef0 8a61 	vmov.f32	s17, s3
 8005ab4:	da07      	bge.n	8005ac6 <__kernel_cos+0x2e>
 8005ab6:	ee10 0a10 	vmov	r0, s0
 8005aba:	4649      	mov	r1, r9
 8005abc:	f7fa fffa 	bl	8000ab4 <__aeabi_d2iz>
 8005ac0:	2800      	cmp	r0, #0
 8005ac2:	f000 8089 	beq.w	8005bd8 <__kernel_cos+0x140>
 8005ac6:	4642      	mov	r2, r8
 8005ac8:	464b      	mov	r3, r9
 8005aca:	4640      	mov	r0, r8
 8005acc:	4649      	mov	r1, r9
 8005ace:	f7fa fd57 	bl	8000580 <__aeabi_dmul>
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	4b4e      	ldr	r3, [pc, #312]	; (8005c10 <__kernel_cos+0x178>)
 8005ad6:	4604      	mov	r4, r0
 8005ad8:	460d      	mov	r5, r1
 8005ada:	f7fa fd51 	bl	8000580 <__aeabi_dmul>
 8005ade:	a340      	add	r3, pc, #256	; (adr r3, 8005be0 <__kernel_cos+0x148>)
 8005ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae4:	4682      	mov	sl, r0
 8005ae6:	468b      	mov	fp, r1
 8005ae8:	4620      	mov	r0, r4
 8005aea:	4629      	mov	r1, r5
 8005aec:	f7fa fd48 	bl	8000580 <__aeabi_dmul>
 8005af0:	a33d      	add	r3, pc, #244	; (adr r3, 8005be8 <__kernel_cos+0x150>)
 8005af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af6:	f7fa fb8d 	bl	8000214 <__adddf3>
 8005afa:	4622      	mov	r2, r4
 8005afc:	462b      	mov	r3, r5
 8005afe:	f7fa fd3f 	bl	8000580 <__aeabi_dmul>
 8005b02:	a33b      	add	r3, pc, #236	; (adr r3, 8005bf0 <__kernel_cos+0x158>)
 8005b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b08:	f7fa fb82 	bl	8000210 <__aeabi_dsub>
 8005b0c:	4622      	mov	r2, r4
 8005b0e:	462b      	mov	r3, r5
 8005b10:	f7fa fd36 	bl	8000580 <__aeabi_dmul>
 8005b14:	a338      	add	r3, pc, #224	; (adr r3, 8005bf8 <__kernel_cos+0x160>)
 8005b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1a:	f7fa fb7b 	bl	8000214 <__adddf3>
 8005b1e:	4622      	mov	r2, r4
 8005b20:	462b      	mov	r3, r5
 8005b22:	f7fa fd2d 	bl	8000580 <__aeabi_dmul>
 8005b26:	a336      	add	r3, pc, #216	; (adr r3, 8005c00 <__kernel_cos+0x168>)
 8005b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2c:	f7fa fb70 	bl	8000210 <__aeabi_dsub>
 8005b30:	4622      	mov	r2, r4
 8005b32:	462b      	mov	r3, r5
 8005b34:	f7fa fd24 	bl	8000580 <__aeabi_dmul>
 8005b38:	a333      	add	r3, pc, #204	; (adr r3, 8005c08 <__kernel_cos+0x170>)
 8005b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3e:	f7fa fb69 	bl	8000214 <__adddf3>
 8005b42:	4622      	mov	r2, r4
 8005b44:	462b      	mov	r3, r5
 8005b46:	f7fa fd1b 	bl	8000580 <__aeabi_dmul>
 8005b4a:	4622      	mov	r2, r4
 8005b4c:	462b      	mov	r3, r5
 8005b4e:	f7fa fd17 	bl	8000580 <__aeabi_dmul>
 8005b52:	ec53 2b18 	vmov	r2, r3, d8
 8005b56:	4604      	mov	r4, r0
 8005b58:	460d      	mov	r5, r1
 8005b5a:	4640      	mov	r0, r8
 8005b5c:	4649      	mov	r1, r9
 8005b5e:	f7fa fd0f 	bl	8000580 <__aeabi_dmul>
 8005b62:	460b      	mov	r3, r1
 8005b64:	4602      	mov	r2, r0
 8005b66:	4629      	mov	r1, r5
 8005b68:	4620      	mov	r0, r4
 8005b6a:	f7fa fb51 	bl	8000210 <__aeabi_dsub>
 8005b6e:	4b29      	ldr	r3, [pc, #164]	; (8005c14 <__kernel_cos+0x17c>)
 8005b70:	429e      	cmp	r6, r3
 8005b72:	4680      	mov	r8, r0
 8005b74:	4689      	mov	r9, r1
 8005b76:	dc11      	bgt.n	8005b9c <__kernel_cos+0x104>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	4650      	mov	r0, sl
 8005b7e:	4659      	mov	r1, fp
 8005b80:	f7fa fb46 	bl	8000210 <__aeabi_dsub>
 8005b84:	460b      	mov	r3, r1
 8005b86:	4924      	ldr	r1, [pc, #144]	; (8005c18 <__kernel_cos+0x180>)
 8005b88:	4602      	mov	r2, r0
 8005b8a:	2000      	movs	r0, #0
 8005b8c:	f7fa fb40 	bl	8000210 <__aeabi_dsub>
 8005b90:	ecbd 8b02 	vpop	{d8}
 8005b94:	ec41 0b10 	vmov	d0, r0, r1
 8005b98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b9c:	4b1f      	ldr	r3, [pc, #124]	; (8005c1c <__kernel_cos+0x184>)
 8005b9e:	491e      	ldr	r1, [pc, #120]	; (8005c18 <__kernel_cos+0x180>)
 8005ba0:	429e      	cmp	r6, r3
 8005ba2:	bfcc      	ite	gt
 8005ba4:	4d1e      	ldrgt	r5, [pc, #120]	; (8005c20 <__kernel_cos+0x188>)
 8005ba6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8005baa:	2400      	movs	r4, #0
 8005bac:	4622      	mov	r2, r4
 8005bae:	462b      	mov	r3, r5
 8005bb0:	2000      	movs	r0, #0
 8005bb2:	f7fa fb2d 	bl	8000210 <__aeabi_dsub>
 8005bb6:	4622      	mov	r2, r4
 8005bb8:	4606      	mov	r6, r0
 8005bba:	460f      	mov	r7, r1
 8005bbc:	462b      	mov	r3, r5
 8005bbe:	4650      	mov	r0, sl
 8005bc0:	4659      	mov	r1, fp
 8005bc2:	f7fa fb25 	bl	8000210 <__aeabi_dsub>
 8005bc6:	4642      	mov	r2, r8
 8005bc8:	464b      	mov	r3, r9
 8005bca:	f7fa fb21 	bl	8000210 <__aeabi_dsub>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	4639      	mov	r1, r7
 8005bd6:	e7d9      	b.n	8005b8c <__kernel_cos+0xf4>
 8005bd8:	2000      	movs	r0, #0
 8005bda:	490f      	ldr	r1, [pc, #60]	; (8005c18 <__kernel_cos+0x180>)
 8005bdc:	e7d8      	b.n	8005b90 <__kernel_cos+0xf8>
 8005bde:	bf00      	nop
 8005be0:	be8838d4 	.word	0xbe8838d4
 8005be4:	bda8fae9 	.word	0xbda8fae9
 8005be8:	bdb4b1c4 	.word	0xbdb4b1c4
 8005bec:	3e21ee9e 	.word	0x3e21ee9e
 8005bf0:	809c52ad 	.word	0x809c52ad
 8005bf4:	3e927e4f 	.word	0x3e927e4f
 8005bf8:	19cb1590 	.word	0x19cb1590
 8005bfc:	3efa01a0 	.word	0x3efa01a0
 8005c00:	16c15177 	.word	0x16c15177
 8005c04:	3f56c16c 	.word	0x3f56c16c
 8005c08:	5555554c 	.word	0x5555554c
 8005c0c:	3fa55555 	.word	0x3fa55555
 8005c10:	3fe00000 	.word	0x3fe00000
 8005c14:	3fd33332 	.word	0x3fd33332
 8005c18:	3ff00000 	.word	0x3ff00000
 8005c1c:	3fe90000 	.word	0x3fe90000
 8005c20:	3fd20000 	.word	0x3fd20000
 8005c24:	00000000 	.word	0x00000000

08005c28 <__kernel_rem_pio2>:
 8005c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c2c:	ed2d 8b02 	vpush	{d8}
 8005c30:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8005c34:	1ed4      	subs	r4, r2, #3
 8005c36:	9308      	str	r3, [sp, #32]
 8005c38:	9101      	str	r1, [sp, #4]
 8005c3a:	4bc5      	ldr	r3, [pc, #788]	; (8005f50 <__kernel_rem_pio2+0x328>)
 8005c3c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005c3e:	9009      	str	r0, [sp, #36]	; 0x24
 8005c40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005c44:	9304      	str	r3, [sp, #16]
 8005c46:	9b08      	ldr	r3, [sp, #32]
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	9307      	str	r3, [sp, #28]
 8005c4c:	2318      	movs	r3, #24
 8005c4e:	fb94 f4f3 	sdiv	r4, r4, r3
 8005c52:	f06f 0317 	mvn.w	r3, #23
 8005c56:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8005c5a:	fb04 3303 	mla	r3, r4, r3, r3
 8005c5e:	eb03 0a02 	add.w	sl, r3, r2
 8005c62:	9b04      	ldr	r3, [sp, #16]
 8005c64:	9a07      	ldr	r2, [sp, #28]
 8005c66:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005f40 <__kernel_rem_pio2+0x318>
 8005c6a:	eb03 0802 	add.w	r8, r3, r2
 8005c6e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005c70:	1aa7      	subs	r7, r4, r2
 8005c72:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005c76:	ae22      	add	r6, sp, #136	; 0x88
 8005c78:	2500      	movs	r5, #0
 8005c7a:	4545      	cmp	r5, r8
 8005c7c:	dd13      	ble.n	8005ca6 <__kernel_rem_pio2+0x7e>
 8005c7e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8005f40 <__kernel_rem_pio2+0x318>
 8005c82:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8005c86:	2600      	movs	r6, #0
 8005c88:	9b04      	ldr	r3, [sp, #16]
 8005c8a:	429e      	cmp	r6, r3
 8005c8c:	dc32      	bgt.n	8005cf4 <__kernel_rem_pio2+0xcc>
 8005c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c90:	9302      	str	r3, [sp, #8]
 8005c92:	9b08      	ldr	r3, [sp, #32]
 8005c94:	199d      	adds	r5, r3, r6
 8005c96:	ab22      	add	r3, sp, #136	; 0x88
 8005c98:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005c9c:	9306      	str	r3, [sp, #24]
 8005c9e:	ec59 8b18 	vmov	r8, r9, d8
 8005ca2:	2700      	movs	r7, #0
 8005ca4:	e01f      	b.n	8005ce6 <__kernel_rem_pio2+0xbe>
 8005ca6:	42ef      	cmn	r7, r5
 8005ca8:	d407      	bmi.n	8005cba <__kernel_rem_pio2+0x92>
 8005caa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005cae:	f7fa fbfd 	bl	80004ac <__aeabi_i2d>
 8005cb2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005cb6:	3501      	adds	r5, #1
 8005cb8:	e7df      	b.n	8005c7a <__kernel_rem_pio2+0x52>
 8005cba:	ec51 0b18 	vmov	r0, r1, d8
 8005cbe:	e7f8      	b.n	8005cb2 <__kernel_rem_pio2+0x8a>
 8005cc0:	9906      	ldr	r1, [sp, #24]
 8005cc2:	9d02      	ldr	r5, [sp, #8]
 8005cc4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8005cc8:	9106      	str	r1, [sp, #24]
 8005cca:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8005cce:	9502      	str	r5, [sp, #8]
 8005cd0:	f7fa fc56 	bl	8000580 <__aeabi_dmul>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4640      	mov	r0, r8
 8005cda:	4649      	mov	r1, r9
 8005cdc:	f7fa fa9a 	bl	8000214 <__adddf3>
 8005ce0:	3701      	adds	r7, #1
 8005ce2:	4680      	mov	r8, r0
 8005ce4:	4689      	mov	r9, r1
 8005ce6:	9b07      	ldr	r3, [sp, #28]
 8005ce8:	429f      	cmp	r7, r3
 8005cea:	dde9      	ble.n	8005cc0 <__kernel_rem_pio2+0x98>
 8005cec:	e8eb 8902 	strd	r8, r9, [fp], #8
 8005cf0:	3601      	adds	r6, #1
 8005cf2:	e7c9      	b.n	8005c88 <__kernel_rem_pio2+0x60>
 8005cf4:	9b04      	ldr	r3, [sp, #16]
 8005cf6:	aa0e      	add	r2, sp, #56	; 0x38
 8005cf8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005cfc:	930c      	str	r3, [sp, #48]	; 0x30
 8005cfe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005d00:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005d04:	9c04      	ldr	r4, [sp, #16]
 8005d06:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d08:	ab9a      	add	r3, sp, #616	; 0x268
 8005d0a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8005d0e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005d12:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d16:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8005d1a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8005d1e:	ab9a      	add	r3, sp, #616	; 0x268
 8005d20:	445b      	add	r3, fp
 8005d22:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8005d26:	2500      	movs	r5, #0
 8005d28:	1b63      	subs	r3, r4, r5
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	dc78      	bgt.n	8005e20 <__kernel_rem_pio2+0x1f8>
 8005d2e:	4650      	mov	r0, sl
 8005d30:	ec49 8b10 	vmov	d0, r8, r9
 8005d34:	f000 fc00 	bl	8006538 <scalbn>
 8005d38:	ec57 6b10 	vmov	r6, r7, d0
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005d42:	ee10 0a10 	vmov	r0, s0
 8005d46:	4639      	mov	r1, r7
 8005d48:	f7fa fc1a 	bl	8000580 <__aeabi_dmul>
 8005d4c:	ec41 0b10 	vmov	d0, r0, r1
 8005d50:	f000 fb6e 	bl	8006430 <floor>
 8005d54:	2200      	movs	r2, #0
 8005d56:	ec51 0b10 	vmov	r0, r1, d0
 8005d5a:	4b7e      	ldr	r3, [pc, #504]	; (8005f54 <__kernel_rem_pio2+0x32c>)
 8005d5c:	f7fa fc10 	bl	8000580 <__aeabi_dmul>
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	4630      	mov	r0, r6
 8005d66:	4639      	mov	r1, r7
 8005d68:	f7fa fa52 	bl	8000210 <__aeabi_dsub>
 8005d6c:	460f      	mov	r7, r1
 8005d6e:	4606      	mov	r6, r0
 8005d70:	f7fa fea0 	bl	8000ab4 <__aeabi_d2iz>
 8005d74:	9006      	str	r0, [sp, #24]
 8005d76:	f7fa fb99 	bl	80004ac <__aeabi_i2d>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	4630      	mov	r0, r6
 8005d80:	4639      	mov	r1, r7
 8005d82:	f7fa fa45 	bl	8000210 <__aeabi_dsub>
 8005d86:	f1ba 0f00 	cmp.w	sl, #0
 8005d8a:	4606      	mov	r6, r0
 8005d8c:	460f      	mov	r7, r1
 8005d8e:	dd6c      	ble.n	8005e6a <__kernel_rem_pio2+0x242>
 8005d90:	1e62      	subs	r2, r4, #1
 8005d92:	ab0e      	add	r3, sp, #56	; 0x38
 8005d94:	f1ca 0118 	rsb	r1, sl, #24
 8005d98:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005d9c:	9d06      	ldr	r5, [sp, #24]
 8005d9e:	fa40 f301 	asr.w	r3, r0, r1
 8005da2:	441d      	add	r5, r3
 8005da4:	408b      	lsls	r3, r1
 8005da6:	1ac0      	subs	r0, r0, r3
 8005da8:	ab0e      	add	r3, sp, #56	; 0x38
 8005daa:	9506      	str	r5, [sp, #24]
 8005dac:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005db0:	f1ca 0317 	rsb	r3, sl, #23
 8005db4:	fa40 f303 	asr.w	r3, r0, r3
 8005db8:	9302      	str	r3, [sp, #8]
 8005dba:	9b02      	ldr	r3, [sp, #8]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	dd62      	ble.n	8005e86 <__kernel_rem_pio2+0x25e>
 8005dc0:	9b06      	ldr	r3, [sp, #24]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	9306      	str	r3, [sp, #24]
 8005dc8:	4615      	mov	r5, r2
 8005dca:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005dce:	4294      	cmp	r4, r2
 8005dd0:	f300 8095 	bgt.w	8005efe <__kernel_rem_pio2+0x2d6>
 8005dd4:	f1ba 0f00 	cmp.w	sl, #0
 8005dd8:	dd07      	ble.n	8005dea <__kernel_rem_pio2+0x1c2>
 8005dda:	f1ba 0f01 	cmp.w	sl, #1
 8005dde:	f000 80a2 	beq.w	8005f26 <__kernel_rem_pio2+0x2fe>
 8005de2:	f1ba 0f02 	cmp.w	sl, #2
 8005de6:	f000 80c1 	beq.w	8005f6c <__kernel_rem_pio2+0x344>
 8005dea:	9b02      	ldr	r3, [sp, #8]
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d14a      	bne.n	8005e86 <__kernel_rem_pio2+0x25e>
 8005df0:	4632      	mov	r2, r6
 8005df2:	463b      	mov	r3, r7
 8005df4:	2000      	movs	r0, #0
 8005df6:	4958      	ldr	r1, [pc, #352]	; (8005f58 <__kernel_rem_pio2+0x330>)
 8005df8:	f7fa fa0a 	bl	8000210 <__aeabi_dsub>
 8005dfc:	4606      	mov	r6, r0
 8005dfe:	460f      	mov	r7, r1
 8005e00:	2d00      	cmp	r5, #0
 8005e02:	d040      	beq.n	8005e86 <__kernel_rem_pio2+0x25e>
 8005e04:	4650      	mov	r0, sl
 8005e06:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005f48 <__kernel_rem_pio2+0x320>
 8005e0a:	f000 fb95 	bl	8006538 <scalbn>
 8005e0e:	4630      	mov	r0, r6
 8005e10:	4639      	mov	r1, r7
 8005e12:	ec53 2b10 	vmov	r2, r3, d0
 8005e16:	f7fa f9fb 	bl	8000210 <__aeabi_dsub>
 8005e1a:	4606      	mov	r6, r0
 8005e1c:	460f      	mov	r7, r1
 8005e1e:	e032      	b.n	8005e86 <__kernel_rem_pio2+0x25e>
 8005e20:	2200      	movs	r2, #0
 8005e22:	4b4e      	ldr	r3, [pc, #312]	; (8005f5c <__kernel_rem_pio2+0x334>)
 8005e24:	4640      	mov	r0, r8
 8005e26:	4649      	mov	r1, r9
 8005e28:	f7fa fbaa 	bl	8000580 <__aeabi_dmul>
 8005e2c:	f7fa fe42 	bl	8000ab4 <__aeabi_d2iz>
 8005e30:	f7fa fb3c 	bl	80004ac <__aeabi_i2d>
 8005e34:	2200      	movs	r2, #0
 8005e36:	4b4a      	ldr	r3, [pc, #296]	; (8005f60 <__kernel_rem_pio2+0x338>)
 8005e38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e3c:	f7fa fba0 	bl	8000580 <__aeabi_dmul>
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	4640      	mov	r0, r8
 8005e46:	4649      	mov	r1, r9
 8005e48:	f7fa f9e2 	bl	8000210 <__aeabi_dsub>
 8005e4c:	f7fa fe32 	bl	8000ab4 <__aeabi_d2iz>
 8005e50:	ab0e      	add	r3, sp, #56	; 0x38
 8005e52:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8005e56:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8005e5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e5e:	f7fa f9d9 	bl	8000214 <__adddf3>
 8005e62:	3501      	adds	r5, #1
 8005e64:	4680      	mov	r8, r0
 8005e66:	4689      	mov	r9, r1
 8005e68:	e75e      	b.n	8005d28 <__kernel_rem_pio2+0x100>
 8005e6a:	d105      	bne.n	8005e78 <__kernel_rem_pio2+0x250>
 8005e6c:	1e63      	subs	r3, r4, #1
 8005e6e:	aa0e      	add	r2, sp, #56	; 0x38
 8005e70:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005e74:	15c3      	asrs	r3, r0, #23
 8005e76:	e79f      	b.n	8005db8 <__kernel_rem_pio2+0x190>
 8005e78:	2200      	movs	r2, #0
 8005e7a:	4b3a      	ldr	r3, [pc, #232]	; (8005f64 <__kernel_rem_pio2+0x33c>)
 8005e7c:	f7fa fe06 	bl	8000a8c <__aeabi_dcmpge>
 8005e80:	2800      	cmp	r0, #0
 8005e82:	d139      	bne.n	8005ef8 <__kernel_rem_pio2+0x2d0>
 8005e84:	9002      	str	r0, [sp, #8]
 8005e86:	2200      	movs	r2, #0
 8005e88:	2300      	movs	r3, #0
 8005e8a:	4630      	mov	r0, r6
 8005e8c:	4639      	mov	r1, r7
 8005e8e:	f7fa fddf 	bl	8000a50 <__aeabi_dcmpeq>
 8005e92:	2800      	cmp	r0, #0
 8005e94:	f000 80c7 	beq.w	8006026 <__kernel_rem_pio2+0x3fe>
 8005e98:	1e65      	subs	r5, r4, #1
 8005e9a:	462b      	mov	r3, r5
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	9904      	ldr	r1, [sp, #16]
 8005ea0:	428b      	cmp	r3, r1
 8005ea2:	da6a      	bge.n	8005f7a <__kernel_rem_pio2+0x352>
 8005ea4:	2a00      	cmp	r2, #0
 8005ea6:	f000 8088 	beq.w	8005fba <__kernel_rem_pio2+0x392>
 8005eaa:	ab0e      	add	r3, sp, #56	; 0x38
 8005eac:	f1aa 0a18 	sub.w	sl, sl, #24
 8005eb0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 80b4 	beq.w	8006022 <__kernel_rem_pio2+0x3fa>
 8005eba:	4650      	mov	r0, sl
 8005ebc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8005f48 <__kernel_rem_pio2+0x320>
 8005ec0:	f000 fb3a 	bl	8006538 <scalbn>
 8005ec4:	00ec      	lsls	r4, r5, #3
 8005ec6:	ab72      	add	r3, sp, #456	; 0x1c8
 8005ec8:	191e      	adds	r6, r3, r4
 8005eca:	ec59 8b10 	vmov	r8, r9, d0
 8005ece:	f106 0a08 	add.w	sl, r6, #8
 8005ed2:	462f      	mov	r7, r5
 8005ed4:	2f00      	cmp	r7, #0
 8005ed6:	f280 80df 	bge.w	8006098 <__kernel_rem_pio2+0x470>
 8005eda:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8005f40 <__kernel_rem_pio2+0x318>
 8005ede:	f04f 0a00 	mov.w	sl, #0
 8005ee2:	eba5 030a 	sub.w	r3, r5, sl
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f2c0 810a 	blt.w	8006100 <__kernel_rem_pio2+0x4d8>
 8005eec:	f8df b078 	ldr.w	fp, [pc, #120]	; 8005f68 <__kernel_rem_pio2+0x340>
 8005ef0:	ec59 8b18 	vmov	r8, r9, d8
 8005ef4:	2700      	movs	r7, #0
 8005ef6:	e0f5      	b.n	80060e4 <__kernel_rem_pio2+0x4bc>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	9302      	str	r3, [sp, #8]
 8005efc:	e760      	b.n	8005dc0 <__kernel_rem_pio2+0x198>
 8005efe:	ab0e      	add	r3, sp, #56	; 0x38
 8005f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f04:	b94d      	cbnz	r5, 8005f1a <__kernel_rem_pio2+0x2f2>
 8005f06:	b12b      	cbz	r3, 8005f14 <__kernel_rem_pio2+0x2ec>
 8005f08:	a80e      	add	r0, sp, #56	; 0x38
 8005f0a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005f0e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005f12:	2301      	movs	r3, #1
 8005f14:	3201      	adds	r2, #1
 8005f16:	461d      	mov	r5, r3
 8005f18:	e759      	b.n	8005dce <__kernel_rem_pio2+0x1a6>
 8005f1a:	a80e      	add	r0, sp, #56	; 0x38
 8005f1c:	1acb      	subs	r3, r1, r3
 8005f1e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005f22:	462b      	mov	r3, r5
 8005f24:	e7f6      	b.n	8005f14 <__kernel_rem_pio2+0x2ec>
 8005f26:	1e62      	subs	r2, r4, #1
 8005f28:	ab0e      	add	r3, sp, #56	; 0x38
 8005f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f2e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005f32:	a90e      	add	r1, sp, #56	; 0x38
 8005f34:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005f38:	e757      	b.n	8005dea <__kernel_rem_pio2+0x1c2>
 8005f3a:	bf00      	nop
 8005f3c:	f3af 8000 	nop.w
	...
 8005f4c:	3ff00000 	.word	0x3ff00000
 8005f50:	08006898 	.word	0x08006898
 8005f54:	40200000 	.word	0x40200000
 8005f58:	3ff00000 	.word	0x3ff00000
 8005f5c:	3e700000 	.word	0x3e700000
 8005f60:	41700000 	.word	0x41700000
 8005f64:	3fe00000 	.word	0x3fe00000
 8005f68:	08006858 	.word	0x08006858
 8005f6c:	1e62      	subs	r2, r4, #1
 8005f6e:	ab0e      	add	r3, sp, #56	; 0x38
 8005f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f74:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005f78:	e7db      	b.n	8005f32 <__kernel_rem_pio2+0x30a>
 8005f7a:	a90e      	add	r1, sp, #56	; 0x38
 8005f7c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005f80:	3b01      	subs	r3, #1
 8005f82:	430a      	orrs	r2, r1
 8005f84:	e78b      	b.n	8005e9e <__kernel_rem_pio2+0x276>
 8005f86:	3301      	adds	r3, #1
 8005f88:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005f8c:	2900      	cmp	r1, #0
 8005f8e:	d0fa      	beq.n	8005f86 <__kernel_rem_pio2+0x35e>
 8005f90:	9a08      	ldr	r2, [sp, #32]
 8005f92:	4422      	add	r2, r4
 8005f94:	00d2      	lsls	r2, r2, #3
 8005f96:	a922      	add	r1, sp, #136	; 0x88
 8005f98:	18e3      	adds	r3, r4, r3
 8005f9a:	9206      	str	r2, [sp, #24]
 8005f9c:	440a      	add	r2, r1
 8005f9e:	9302      	str	r3, [sp, #8]
 8005fa0:	f10b 0108 	add.w	r1, fp, #8
 8005fa4:	f102 0308 	add.w	r3, r2, #8
 8005fa8:	1c66      	adds	r6, r4, #1
 8005faa:	910a      	str	r1, [sp, #40]	; 0x28
 8005fac:	2500      	movs	r5, #0
 8005fae:	930d      	str	r3, [sp, #52]	; 0x34
 8005fb0:	9b02      	ldr	r3, [sp, #8]
 8005fb2:	42b3      	cmp	r3, r6
 8005fb4:	da04      	bge.n	8005fc0 <__kernel_rem_pio2+0x398>
 8005fb6:	461c      	mov	r4, r3
 8005fb8:	e6a6      	b.n	8005d08 <__kernel_rem_pio2+0xe0>
 8005fba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e7e3      	b.n	8005f88 <__kernel_rem_pio2+0x360>
 8005fc0:	9b06      	ldr	r3, [sp, #24]
 8005fc2:	18ef      	adds	r7, r5, r3
 8005fc4:	ab22      	add	r3, sp, #136	; 0x88
 8005fc6:	441f      	add	r7, r3
 8005fc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005fce:	f7fa fa6d 	bl	80004ac <__aeabi_i2d>
 8005fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fd4:	461c      	mov	r4, r3
 8005fd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fd8:	e9c7 0100 	strd	r0, r1, [r7]
 8005fdc:	eb03 0b05 	add.w	fp, r3, r5
 8005fe0:	2700      	movs	r7, #0
 8005fe2:	f04f 0800 	mov.w	r8, #0
 8005fe6:	f04f 0900 	mov.w	r9, #0
 8005fea:	9b07      	ldr	r3, [sp, #28]
 8005fec:	429f      	cmp	r7, r3
 8005fee:	dd08      	ble.n	8006002 <__kernel_rem_pio2+0x3da>
 8005ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ff2:	aa72      	add	r2, sp, #456	; 0x1c8
 8005ff4:	18eb      	adds	r3, r5, r3
 8005ff6:	4413      	add	r3, r2
 8005ff8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8005ffc:	3601      	adds	r6, #1
 8005ffe:	3508      	adds	r5, #8
 8006000:	e7d6      	b.n	8005fb0 <__kernel_rem_pio2+0x388>
 8006002:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006006:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800600a:	f7fa fab9 	bl	8000580 <__aeabi_dmul>
 800600e:	4602      	mov	r2, r0
 8006010:	460b      	mov	r3, r1
 8006012:	4640      	mov	r0, r8
 8006014:	4649      	mov	r1, r9
 8006016:	f7fa f8fd 	bl	8000214 <__adddf3>
 800601a:	3701      	adds	r7, #1
 800601c:	4680      	mov	r8, r0
 800601e:	4689      	mov	r9, r1
 8006020:	e7e3      	b.n	8005fea <__kernel_rem_pio2+0x3c2>
 8006022:	3d01      	subs	r5, #1
 8006024:	e741      	b.n	8005eaa <__kernel_rem_pio2+0x282>
 8006026:	f1ca 0000 	rsb	r0, sl, #0
 800602a:	ec47 6b10 	vmov	d0, r6, r7
 800602e:	f000 fa83 	bl	8006538 <scalbn>
 8006032:	ec57 6b10 	vmov	r6, r7, d0
 8006036:	2200      	movs	r2, #0
 8006038:	4b99      	ldr	r3, [pc, #612]	; (80062a0 <__kernel_rem_pio2+0x678>)
 800603a:	ee10 0a10 	vmov	r0, s0
 800603e:	4639      	mov	r1, r7
 8006040:	f7fa fd24 	bl	8000a8c <__aeabi_dcmpge>
 8006044:	b1f8      	cbz	r0, 8006086 <__kernel_rem_pio2+0x45e>
 8006046:	2200      	movs	r2, #0
 8006048:	4b96      	ldr	r3, [pc, #600]	; (80062a4 <__kernel_rem_pio2+0x67c>)
 800604a:	4630      	mov	r0, r6
 800604c:	4639      	mov	r1, r7
 800604e:	f7fa fa97 	bl	8000580 <__aeabi_dmul>
 8006052:	f7fa fd2f 	bl	8000ab4 <__aeabi_d2iz>
 8006056:	4680      	mov	r8, r0
 8006058:	f7fa fa28 	bl	80004ac <__aeabi_i2d>
 800605c:	2200      	movs	r2, #0
 800605e:	4b90      	ldr	r3, [pc, #576]	; (80062a0 <__kernel_rem_pio2+0x678>)
 8006060:	f7fa fa8e 	bl	8000580 <__aeabi_dmul>
 8006064:	460b      	mov	r3, r1
 8006066:	4602      	mov	r2, r0
 8006068:	4639      	mov	r1, r7
 800606a:	4630      	mov	r0, r6
 800606c:	f7fa f8d0 	bl	8000210 <__aeabi_dsub>
 8006070:	f7fa fd20 	bl	8000ab4 <__aeabi_d2iz>
 8006074:	1c65      	adds	r5, r4, #1
 8006076:	ab0e      	add	r3, sp, #56	; 0x38
 8006078:	f10a 0a18 	add.w	sl, sl, #24
 800607c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006080:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006084:	e719      	b.n	8005eba <__kernel_rem_pio2+0x292>
 8006086:	4630      	mov	r0, r6
 8006088:	4639      	mov	r1, r7
 800608a:	f7fa fd13 	bl	8000ab4 <__aeabi_d2iz>
 800608e:	ab0e      	add	r3, sp, #56	; 0x38
 8006090:	4625      	mov	r5, r4
 8006092:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006096:	e710      	b.n	8005eba <__kernel_rem_pio2+0x292>
 8006098:	ab0e      	add	r3, sp, #56	; 0x38
 800609a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800609e:	f7fa fa05 	bl	80004ac <__aeabi_i2d>
 80060a2:	4642      	mov	r2, r8
 80060a4:	464b      	mov	r3, r9
 80060a6:	f7fa fa6b 	bl	8000580 <__aeabi_dmul>
 80060aa:	2200      	movs	r2, #0
 80060ac:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80060b0:	4b7c      	ldr	r3, [pc, #496]	; (80062a4 <__kernel_rem_pio2+0x67c>)
 80060b2:	4640      	mov	r0, r8
 80060b4:	4649      	mov	r1, r9
 80060b6:	f7fa fa63 	bl	8000580 <__aeabi_dmul>
 80060ba:	3f01      	subs	r7, #1
 80060bc:	4680      	mov	r8, r0
 80060be:	4689      	mov	r9, r1
 80060c0:	e708      	b.n	8005ed4 <__kernel_rem_pio2+0x2ac>
 80060c2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80060c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ca:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80060ce:	f7fa fa57 	bl	8000580 <__aeabi_dmul>
 80060d2:	4602      	mov	r2, r0
 80060d4:	460b      	mov	r3, r1
 80060d6:	4640      	mov	r0, r8
 80060d8:	4649      	mov	r1, r9
 80060da:	f7fa f89b 	bl	8000214 <__adddf3>
 80060de:	3701      	adds	r7, #1
 80060e0:	4680      	mov	r8, r0
 80060e2:	4689      	mov	r9, r1
 80060e4:	9b04      	ldr	r3, [sp, #16]
 80060e6:	429f      	cmp	r7, r3
 80060e8:	dc01      	bgt.n	80060ee <__kernel_rem_pio2+0x4c6>
 80060ea:	45ba      	cmp	sl, r7
 80060ec:	dae9      	bge.n	80060c2 <__kernel_rem_pio2+0x49a>
 80060ee:	ab4a      	add	r3, sp, #296	; 0x128
 80060f0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80060f4:	e9c3 8900 	strd	r8, r9, [r3]
 80060f8:	f10a 0a01 	add.w	sl, sl, #1
 80060fc:	3e08      	subs	r6, #8
 80060fe:	e6f0      	b.n	8005ee2 <__kernel_rem_pio2+0x2ba>
 8006100:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006102:	2b03      	cmp	r3, #3
 8006104:	d85b      	bhi.n	80061be <__kernel_rem_pio2+0x596>
 8006106:	e8df f003 	tbb	[pc, r3]
 800610a:	264a      	.short	0x264a
 800610c:	0226      	.short	0x0226
 800610e:	ab9a      	add	r3, sp, #616	; 0x268
 8006110:	441c      	add	r4, r3
 8006112:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8006116:	46a2      	mov	sl, r4
 8006118:	46ab      	mov	fp, r5
 800611a:	f1bb 0f00 	cmp.w	fp, #0
 800611e:	dc6c      	bgt.n	80061fa <__kernel_rem_pio2+0x5d2>
 8006120:	46a2      	mov	sl, r4
 8006122:	46ab      	mov	fp, r5
 8006124:	f1bb 0f01 	cmp.w	fp, #1
 8006128:	f300 8086 	bgt.w	8006238 <__kernel_rem_pio2+0x610>
 800612c:	2000      	movs	r0, #0
 800612e:	2100      	movs	r1, #0
 8006130:	2d01      	cmp	r5, #1
 8006132:	f300 80a0 	bgt.w	8006276 <__kernel_rem_pio2+0x64e>
 8006136:	9b02      	ldr	r3, [sp, #8]
 8006138:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800613c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8006140:	2b00      	cmp	r3, #0
 8006142:	f040 809e 	bne.w	8006282 <__kernel_rem_pio2+0x65a>
 8006146:	9b01      	ldr	r3, [sp, #4]
 8006148:	e9c3 7800 	strd	r7, r8, [r3]
 800614c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006150:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006154:	e033      	b.n	80061be <__kernel_rem_pio2+0x596>
 8006156:	3408      	adds	r4, #8
 8006158:	ab4a      	add	r3, sp, #296	; 0x128
 800615a:	441c      	add	r4, r3
 800615c:	462e      	mov	r6, r5
 800615e:	2000      	movs	r0, #0
 8006160:	2100      	movs	r1, #0
 8006162:	2e00      	cmp	r6, #0
 8006164:	da3a      	bge.n	80061dc <__kernel_rem_pio2+0x5b4>
 8006166:	9b02      	ldr	r3, [sp, #8]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d03d      	beq.n	80061e8 <__kernel_rem_pio2+0x5c0>
 800616c:	4602      	mov	r2, r0
 800616e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006172:	9c01      	ldr	r4, [sp, #4]
 8006174:	e9c4 2300 	strd	r2, r3, [r4]
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8006180:	f7fa f846 	bl	8000210 <__aeabi_dsub>
 8006184:	ae4c      	add	r6, sp, #304	; 0x130
 8006186:	2401      	movs	r4, #1
 8006188:	42a5      	cmp	r5, r4
 800618a:	da30      	bge.n	80061ee <__kernel_rem_pio2+0x5c6>
 800618c:	9b02      	ldr	r3, [sp, #8]
 800618e:	b113      	cbz	r3, 8006196 <__kernel_rem_pio2+0x56e>
 8006190:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006194:	4619      	mov	r1, r3
 8006196:	9b01      	ldr	r3, [sp, #4]
 8006198:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800619c:	e00f      	b.n	80061be <__kernel_rem_pio2+0x596>
 800619e:	ab9a      	add	r3, sp, #616	; 0x268
 80061a0:	441c      	add	r4, r3
 80061a2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80061a6:	2000      	movs	r0, #0
 80061a8:	2100      	movs	r1, #0
 80061aa:	2d00      	cmp	r5, #0
 80061ac:	da10      	bge.n	80061d0 <__kernel_rem_pio2+0x5a8>
 80061ae:	9b02      	ldr	r3, [sp, #8]
 80061b0:	b113      	cbz	r3, 80061b8 <__kernel_rem_pio2+0x590>
 80061b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061b6:	4619      	mov	r1, r3
 80061b8:	9b01      	ldr	r3, [sp, #4]
 80061ba:	e9c3 0100 	strd	r0, r1, [r3]
 80061be:	9b06      	ldr	r3, [sp, #24]
 80061c0:	f003 0007 	and.w	r0, r3, #7
 80061c4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80061c8:	ecbd 8b02 	vpop	{d8}
 80061cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061d0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80061d4:	f7fa f81e 	bl	8000214 <__adddf3>
 80061d8:	3d01      	subs	r5, #1
 80061da:	e7e6      	b.n	80061aa <__kernel_rem_pio2+0x582>
 80061dc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80061e0:	f7fa f818 	bl	8000214 <__adddf3>
 80061e4:	3e01      	subs	r6, #1
 80061e6:	e7bc      	b.n	8006162 <__kernel_rem_pio2+0x53a>
 80061e8:	4602      	mov	r2, r0
 80061ea:	460b      	mov	r3, r1
 80061ec:	e7c1      	b.n	8006172 <__kernel_rem_pio2+0x54a>
 80061ee:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80061f2:	f7fa f80f 	bl	8000214 <__adddf3>
 80061f6:	3401      	adds	r4, #1
 80061f8:	e7c6      	b.n	8006188 <__kernel_rem_pio2+0x560>
 80061fa:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80061fe:	ed3a 7b02 	vldmdb	sl!, {d7}
 8006202:	4640      	mov	r0, r8
 8006204:	ec53 2b17 	vmov	r2, r3, d7
 8006208:	4649      	mov	r1, r9
 800620a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800620e:	f7fa f801 	bl	8000214 <__adddf3>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	4606      	mov	r6, r0
 8006218:	460f      	mov	r7, r1
 800621a:	4640      	mov	r0, r8
 800621c:	4649      	mov	r1, r9
 800621e:	f7f9 fff7 	bl	8000210 <__aeabi_dsub>
 8006222:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006226:	f7f9 fff5 	bl	8000214 <__adddf3>
 800622a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800622e:	e9ca 0100 	strd	r0, r1, [sl]
 8006232:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8006236:	e770      	b.n	800611a <__kernel_rem_pio2+0x4f2>
 8006238:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800623c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8006240:	4630      	mov	r0, r6
 8006242:	ec53 2b17 	vmov	r2, r3, d7
 8006246:	4639      	mov	r1, r7
 8006248:	ed8d 7b04 	vstr	d7, [sp, #16]
 800624c:	f7f9 ffe2 	bl	8000214 <__adddf3>
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	4680      	mov	r8, r0
 8006256:	4689      	mov	r9, r1
 8006258:	4630      	mov	r0, r6
 800625a:	4639      	mov	r1, r7
 800625c:	f7f9 ffd8 	bl	8000210 <__aeabi_dsub>
 8006260:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006264:	f7f9 ffd6 	bl	8000214 <__adddf3>
 8006268:	f10b 3bff 	add.w	fp, fp, #4294967295
 800626c:	e9ca 0100 	strd	r0, r1, [sl]
 8006270:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8006274:	e756      	b.n	8006124 <__kernel_rem_pio2+0x4fc>
 8006276:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800627a:	f7f9 ffcb 	bl	8000214 <__adddf3>
 800627e:	3d01      	subs	r5, #1
 8006280:	e756      	b.n	8006130 <__kernel_rem_pio2+0x508>
 8006282:	9b01      	ldr	r3, [sp, #4]
 8006284:	9a01      	ldr	r2, [sp, #4]
 8006286:	601f      	str	r7, [r3, #0]
 8006288:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800628c:	605c      	str	r4, [r3, #4]
 800628e:	609d      	str	r5, [r3, #8]
 8006290:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006294:	60d3      	str	r3, [r2, #12]
 8006296:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800629a:	6110      	str	r0, [r2, #16]
 800629c:	6153      	str	r3, [r2, #20]
 800629e:	e78e      	b.n	80061be <__kernel_rem_pio2+0x596>
 80062a0:	41700000 	.word	0x41700000
 80062a4:	3e700000 	.word	0x3e700000

080062a8 <__kernel_sin>:
 80062a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ac:	ec55 4b10 	vmov	r4, r5, d0
 80062b0:	b085      	sub	sp, #20
 80062b2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80062b6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80062ba:	ed8d 1b00 	vstr	d1, [sp]
 80062be:	9002      	str	r0, [sp, #8]
 80062c0:	da06      	bge.n	80062d0 <__kernel_sin+0x28>
 80062c2:	ee10 0a10 	vmov	r0, s0
 80062c6:	4629      	mov	r1, r5
 80062c8:	f7fa fbf4 	bl	8000ab4 <__aeabi_d2iz>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d051      	beq.n	8006374 <__kernel_sin+0xcc>
 80062d0:	4622      	mov	r2, r4
 80062d2:	462b      	mov	r3, r5
 80062d4:	4620      	mov	r0, r4
 80062d6:	4629      	mov	r1, r5
 80062d8:	f7fa f952 	bl	8000580 <__aeabi_dmul>
 80062dc:	4682      	mov	sl, r0
 80062de:	468b      	mov	fp, r1
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	4620      	mov	r0, r4
 80062e6:	4629      	mov	r1, r5
 80062e8:	f7fa f94a 	bl	8000580 <__aeabi_dmul>
 80062ec:	a341      	add	r3, pc, #260	; (adr r3, 80063f4 <__kernel_sin+0x14c>)
 80062ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f2:	4680      	mov	r8, r0
 80062f4:	4689      	mov	r9, r1
 80062f6:	4650      	mov	r0, sl
 80062f8:	4659      	mov	r1, fp
 80062fa:	f7fa f941 	bl	8000580 <__aeabi_dmul>
 80062fe:	a33f      	add	r3, pc, #252	; (adr r3, 80063fc <__kernel_sin+0x154>)
 8006300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006304:	f7f9 ff84 	bl	8000210 <__aeabi_dsub>
 8006308:	4652      	mov	r2, sl
 800630a:	465b      	mov	r3, fp
 800630c:	f7fa f938 	bl	8000580 <__aeabi_dmul>
 8006310:	a33c      	add	r3, pc, #240	; (adr r3, 8006404 <__kernel_sin+0x15c>)
 8006312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006316:	f7f9 ff7d 	bl	8000214 <__adddf3>
 800631a:	4652      	mov	r2, sl
 800631c:	465b      	mov	r3, fp
 800631e:	f7fa f92f 	bl	8000580 <__aeabi_dmul>
 8006322:	a33a      	add	r3, pc, #232	; (adr r3, 800640c <__kernel_sin+0x164>)
 8006324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006328:	f7f9 ff72 	bl	8000210 <__aeabi_dsub>
 800632c:	4652      	mov	r2, sl
 800632e:	465b      	mov	r3, fp
 8006330:	f7fa f926 	bl	8000580 <__aeabi_dmul>
 8006334:	a337      	add	r3, pc, #220	; (adr r3, 8006414 <__kernel_sin+0x16c>)
 8006336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633a:	f7f9 ff6b 	bl	8000214 <__adddf3>
 800633e:	9b02      	ldr	r3, [sp, #8]
 8006340:	4606      	mov	r6, r0
 8006342:	460f      	mov	r7, r1
 8006344:	b9db      	cbnz	r3, 800637e <__kernel_sin+0xd6>
 8006346:	4602      	mov	r2, r0
 8006348:	460b      	mov	r3, r1
 800634a:	4650      	mov	r0, sl
 800634c:	4659      	mov	r1, fp
 800634e:	f7fa f917 	bl	8000580 <__aeabi_dmul>
 8006352:	a325      	add	r3, pc, #148	; (adr r3, 80063e8 <__kernel_sin+0x140>)
 8006354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006358:	f7f9 ff5a 	bl	8000210 <__aeabi_dsub>
 800635c:	4642      	mov	r2, r8
 800635e:	464b      	mov	r3, r9
 8006360:	f7fa f90e 	bl	8000580 <__aeabi_dmul>
 8006364:	4602      	mov	r2, r0
 8006366:	460b      	mov	r3, r1
 8006368:	4620      	mov	r0, r4
 800636a:	4629      	mov	r1, r5
 800636c:	f7f9 ff52 	bl	8000214 <__adddf3>
 8006370:	4604      	mov	r4, r0
 8006372:	460d      	mov	r5, r1
 8006374:	ec45 4b10 	vmov	d0, r4, r5
 8006378:	b005      	add	sp, #20
 800637a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800637e:	2200      	movs	r2, #0
 8006380:	4b1b      	ldr	r3, [pc, #108]	; (80063f0 <__kernel_sin+0x148>)
 8006382:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006386:	f7fa f8fb 	bl	8000580 <__aeabi_dmul>
 800638a:	4632      	mov	r2, r6
 800638c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006390:	463b      	mov	r3, r7
 8006392:	4640      	mov	r0, r8
 8006394:	4649      	mov	r1, r9
 8006396:	f7fa f8f3 	bl	8000580 <__aeabi_dmul>
 800639a:	4602      	mov	r2, r0
 800639c:	460b      	mov	r3, r1
 800639e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063a2:	f7f9 ff35 	bl	8000210 <__aeabi_dsub>
 80063a6:	4652      	mov	r2, sl
 80063a8:	465b      	mov	r3, fp
 80063aa:	f7fa f8e9 	bl	8000580 <__aeabi_dmul>
 80063ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063b2:	f7f9 ff2d 	bl	8000210 <__aeabi_dsub>
 80063b6:	a30c      	add	r3, pc, #48	; (adr r3, 80063e8 <__kernel_sin+0x140>)
 80063b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063bc:	4606      	mov	r6, r0
 80063be:	460f      	mov	r7, r1
 80063c0:	4640      	mov	r0, r8
 80063c2:	4649      	mov	r1, r9
 80063c4:	f7fa f8dc 	bl	8000580 <__aeabi_dmul>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	4630      	mov	r0, r6
 80063ce:	4639      	mov	r1, r7
 80063d0:	f7f9 ff20 	bl	8000214 <__adddf3>
 80063d4:	4602      	mov	r2, r0
 80063d6:	460b      	mov	r3, r1
 80063d8:	4620      	mov	r0, r4
 80063da:	4629      	mov	r1, r5
 80063dc:	f7f9 ff18 	bl	8000210 <__aeabi_dsub>
 80063e0:	e7c6      	b.n	8006370 <__kernel_sin+0xc8>
 80063e2:	bf00      	nop
 80063e4:	f3af 8000 	nop.w
 80063e8:	55555549 	.word	0x55555549
 80063ec:	3fc55555 	.word	0x3fc55555
 80063f0:	3fe00000 	.word	0x3fe00000
 80063f4:	5acfd57c 	.word	0x5acfd57c
 80063f8:	3de5d93a 	.word	0x3de5d93a
 80063fc:	8a2b9ceb 	.word	0x8a2b9ceb
 8006400:	3e5ae5e6 	.word	0x3e5ae5e6
 8006404:	57b1fe7d 	.word	0x57b1fe7d
 8006408:	3ec71de3 	.word	0x3ec71de3
 800640c:	19c161d5 	.word	0x19c161d5
 8006410:	3f2a01a0 	.word	0x3f2a01a0
 8006414:	1110f8a6 	.word	0x1110f8a6
 8006418:	3f811111 	.word	0x3f811111

0800641c <fabs>:
 800641c:	ec51 0b10 	vmov	r0, r1, d0
 8006420:	ee10 2a10 	vmov	r2, s0
 8006424:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006428:	ec43 2b10 	vmov	d0, r2, r3
 800642c:	4770      	bx	lr
	...

08006430 <floor>:
 8006430:	ec51 0b10 	vmov	r0, r1, d0
 8006434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006438:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800643c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006440:	2e13      	cmp	r6, #19
 8006442:	460c      	mov	r4, r1
 8006444:	ee10 5a10 	vmov	r5, s0
 8006448:	4680      	mov	r8, r0
 800644a:	dc34      	bgt.n	80064b6 <floor+0x86>
 800644c:	2e00      	cmp	r6, #0
 800644e:	da16      	bge.n	800647e <floor+0x4e>
 8006450:	a335      	add	r3, pc, #212	; (adr r3, 8006528 <floor+0xf8>)
 8006452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006456:	f7f9 fedd 	bl	8000214 <__adddf3>
 800645a:	2200      	movs	r2, #0
 800645c:	2300      	movs	r3, #0
 800645e:	f7fa fb1f 	bl	8000aa0 <__aeabi_dcmpgt>
 8006462:	b148      	cbz	r0, 8006478 <floor+0x48>
 8006464:	2c00      	cmp	r4, #0
 8006466:	da59      	bge.n	800651c <floor+0xec>
 8006468:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800646c:	4a30      	ldr	r2, [pc, #192]	; (8006530 <floor+0x100>)
 800646e:	432b      	orrs	r3, r5
 8006470:	2500      	movs	r5, #0
 8006472:	42ab      	cmp	r3, r5
 8006474:	bf18      	it	ne
 8006476:	4614      	movne	r4, r2
 8006478:	4621      	mov	r1, r4
 800647a:	4628      	mov	r0, r5
 800647c:	e025      	b.n	80064ca <floor+0x9a>
 800647e:	4f2d      	ldr	r7, [pc, #180]	; (8006534 <floor+0x104>)
 8006480:	4137      	asrs	r7, r6
 8006482:	ea01 0307 	and.w	r3, r1, r7
 8006486:	4303      	orrs	r3, r0
 8006488:	d01f      	beq.n	80064ca <floor+0x9a>
 800648a:	a327      	add	r3, pc, #156	; (adr r3, 8006528 <floor+0xf8>)
 800648c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006490:	f7f9 fec0 	bl	8000214 <__adddf3>
 8006494:	2200      	movs	r2, #0
 8006496:	2300      	movs	r3, #0
 8006498:	f7fa fb02 	bl	8000aa0 <__aeabi_dcmpgt>
 800649c:	2800      	cmp	r0, #0
 800649e:	d0eb      	beq.n	8006478 <floor+0x48>
 80064a0:	2c00      	cmp	r4, #0
 80064a2:	bfbe      	ittt	lt
 80064a4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80064a8:	fa43 f606 	asrlt.w	r6, r3, r6
 80064ac:	19a4      	addlt	r4, r4, r6
 80064ae:	ea24 0407 	bic.w	r4, r4, r7
 80064b2:	2500      	movs	r5, #0
 80064b4:	e7e0      	b.n	8006478 <floor+0x48>
 80064b6:	2e33      	cmp	r6, #51	; 0x33
 80064b8:	dd0b      	ble.n	80064d2 <floor+0xa2>
 80064ba:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80064be:	d104      	bne.n	80064ca <floor+0x9a>
 80064c0:	ee10 2a10 	vmov	r2, s0
 80064c4:	460b      	mov	r3, r1
 80064c6:	f7f9 fea5 	bl	8000214 <__adddf3>
 80064ca:	ec41 0b10 	vmov	d0, r0, r1
 80064ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064d2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80064d6:	f04f 33ff 	mov.w	r3, #4294967295
 80064da:	fa23 f707 	lsr.w	r7, r3, r7
 80064de:	4207      	tst	r7, r0
 80064e0:	d0f3      	beq.n	80064ca <floor+0x9a>
 80064e2:	a311      	add	r3, pc, #68	; (adr r3, 8006528 <floor+0xf8>)
 80064e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e8:	f7f9 fe94 	bl	8000214 <__adddf3>
 80064ec:	2200      	movs	r2, #0
 80064ee:	2300      	movs	r3, #0
 80064f0:	f7fa fad6 	bl	8000aa0 <__aeabi_dcmpgt>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	d0bf      	beq.n	8006478 <floor+0x48>
 80064f8:	2c00      	cmp	r4, #0
 80064fa:	da02      	bge.n	8006502 <floor+0xd2>
 80064fc:	2e14      	cmp	r6, #20
 80064fe:	d103      	bne.n	8006508 <floor+0xd8>
 8006500:	3401      	adds	r4, #1
 8006502:	ea25 0507 	bic.w	r5, r5, r7
 8006506:	e7b7      	b.n	8006478 <floor+0x48>
 8006508:	2301      	movs	r3, #1
 800650a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800650e:	fa03 f606 	lsl.w	r6, r3, r6
 8006512:	4435      	add	r5, r6
 8006514:	4545      	cmp	r5, r8
 8006516:	bf38      	it	cc
 8006518:	18e4      	addcc	r4, r4, r3
 800651a:	e7f2      	b.n	8006502 <floor+0xd2>
 800651c:	2500      	movs	r5, #0
 800651e:	462c      	mov	r4, r5
 8006520:	e7aa      	b.n	8006478 <floor+0x48>
 8006522:	bf00      	nop
 8006524:	f3af 8000 	nop.w
 8006528:	8800759c 	.word	0x8800759c
 800652c:	7e37e43c 	.word	0x7e37e43c
 8006530:	bff00000 	.word	0xbff00000
 8006534:	000fffff 	.word	0x000fffff

08006538 <scalbn>:
 8006538:	b570      	push	{r4, r5, r6, lr}
 800653a:	ec55 4b10 	vmov	r4, r5, d0
 800653e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006542:	4606      	mov	r6, r0
 8006544:	462b      	mov	r3, r5
 8006546:	b9aa      	cbnz	r2, 8006574 <scalbn+0x3c>
 8006548:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800654c:	4323      	orrs	r3, r4
 800654e:	d03b      	beq.n	80065c8 <scalbn+0x90>
 8006550:	4b31      	ldr	r3, [pc, #196]	; (8006618 <scalbn+0xe0>)
 8006552:	4629      	mov	r1, r5
 8006554:	2200      	movs	r2, #0
 8006556:	ee10 0a10 	vmov	r0, s0
 800655a:	f7fa f811 	bl	8000580 <__aeabi_dmul>
 800655e:	4b2f      	ldr	r3, [pc, #188]	; (800661c <scalbn+0xe4>)
 8006560:	429e      	cmp	r6, r3
 8006562:	4604      	mov	r4, r0
 8006564:	460d      	mov	r5, r1
 8006566:	da12      	bge.n	800658e <scalbn+0x56>
 8006568:	a327      	add	r3, pc, #156	; (adr r3, 8006608 <scalbn+0xd0>)
 800656a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656e:	f7fa f807 	bl	8000580 <__aeabi_dmul>
 8006572:	e009      	b.n	8006588 <scalbn+0x50>
 8006574:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006578:	428a      	cmp	r2, r1
 800657a:	d10c      	bne.n	8006596 <scalbn+0x5e>
 800657c:	ee10 2a10 	vmov	r2, s0
 8006580:	4620      	mov	r0, r4
 8006582:	4629      	mov	r1, r5
 8006584:	f7f9 fe46 	bl	8000214 <__adddf3>
 8006588:	4604      	mov	r4, r0
 800658a:	460d      	mov	r5, r1
 800658c:	e01c      	b.n	80065c8 <scalbn+0x90>
 800658e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006592:	460b      	mov	r3, r1
 8006594:	3a36      	subs	r2, #54	; 0x36
 8006596:	4432      	add	r2, r6
 8006598:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800659c:	428a      	cmp	r2, r1
 800659e:	dd0b      	ble.n	80065b8 <scalbn+0x80>
 80065a0:	ec45 4b11 	vmov	d1, r4, r5
 80065a4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006610 <scalbn+0xd8>
 80065a8:	f000 f83c 	bl	8006624 <copysign>
 80065ac:	a318      	add	r3, pc, #96	; (adr r3, 8006610 <scalbn+0xd8>)
 80065ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b2:	ec51 0b10 	vmov	r0, r1, d0
 80065b6:	e7da      	b.n	800656e <scalbn+0x36>
 80065b8:	2a00      	cmp	r2, #0
 80065ba:	dd08      	ble.n	80065ce <scalbn+0x96>
 80065bc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80065c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80065c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80065c8:	ec45 4b10 	vmov	d0, r4, r5
 80065cc:	bd70      	pop	{r4, r5, r6, pc}
 80065ce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80065d2:	da0d      	bge.n	80065f0 <scalbn+0xb8>
 80065d4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80065d8:	429e      	cmp	r6, r3
 80065da:	ec45 4b11 	vmov	d1, r4, r5
 80065de:	dce1      	bgt.n	80065a4 <scalbn+0x6c>
 80065e0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006608 <scalbn+0xd0>
 80065e4:	f000 f81e 	bl	8006624 <copysign>
 80065e8:	a307      	add	r3, pc, #28	; (adr r3, 8006608 <scalbn+0xd0>)
 80065ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ee:	e7e0      	b.n	80065b2 <scalbn+0x7a>
 80065f0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80065f4:	3236      	adds	r2, #54	; 0x36
 80065f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80065fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80065fe:	4620      	mov	r0, r4
 8006600:	4629      	mov	r1, r5
 8006602:	2200      	movs	r2, #0
 8006604:	4b06      	ldr	r3, [pc, #24]	; (8006620 <scalbn+0xe8>)
 8006606:	e7b2      	b.n	800656e <scalbn+0x36>
 8006608:	c2f8f359 	.word	0xc2f8f359
 800660c:	01a56e1f 	.word	0x01a56e1f
 8006610:	8800759c 	.word	0x8800759c
 8006614:	7e37e43c 	.word	0x7e37e43c
 8006618:	43500000 	.word	0x43500000
 800661c:	ffff3cb0 	.word	0xffff3cb0
 8006620:	3c900000 	.word	0x3c900000

08006624 <copysign>:
 8006624:	ec51 0b10 	vmov	r0, r1, d0
 8006628:	ee11 0a90 	vmov	r0, s3
 800662c:	ee10 2a10 	vmov	r2, s0
 8006630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006634:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006638:	ea41 0300 	orr.w	r3, r1, r0
 800663c:	ec43 2b10 	vmov	d0, r2, r3
 8006640:	4770      	bx	lr
	...

08006644 <__libc_init_array>:
 8006644:	b570      	push	{r4, r5, r6, lr}
 8006646:	4e0d      	ldr	r6, [pc, #52]	; (800667c <__libc_init_array+0x38>)
 8006648:	4c0d      	ldr	r4, [pc, #52]	; (8006680 <__libc_init_array+0x3c>)
 800664a:	1ba4      	subs	r4, r4, r6
 800664c:	10a4      	asrs	r4, r4, #2
 800664e:	2500      	movs	r5, #0
 8006650:	42a5      	cmp	r5, r4
 8006652:	d109      	bne.n	8006668 <__libc_init_array+0x24>
 8006654:	4e0b      	ldr	r6, [pc, #44]	; (8006684 <__libc_init_array+0x40>)
 8006656:	4c0c      	ldr	r4, [pc, #48]	; (8006688 <__libc_init_array+0x44>)
 8006658:	f000 f820 	bl	800669c <_init>
 800665c:	1ba4      	subs	r4, r4, r6
 800665e:	10a4      	asrs	r4, r4, #2
 8006660:	2500      	movs	r5, #0
 8006662:	42a5      	cmp	r5, r4
 8006664:	d105      	bne.n	8006672 <__libc_init_array+0x2e>
 8006666:	bd70      	pop	{r4, r5, r6, pc}
 8006668:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800666c:	4798      	blx	r3
 800666e:	3501      	adds	r5, #1
 8006670:	e7ee      	b.n	8006650 <__libc_init_array+0xc>
 8006672:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006676:	4798      	blx	r3
 8006678:	3501      	adds	r5, #1
 800667a:	e7f2      	b.n	8006662 <__libc_init_array+0x1e>
 800667c:	080068b0 	.word	0x080068b0
 8006680:	080068b0 	.word	0x080068b0
 8006684:	080068b0 	.word	0x080068b0
 8006688:	080068b4 	.word	0x080068b4

0800668c <memset>:
 800668c:	4402      	add	r2, r0
 800668e:	4603      	mov	r3, r0
 8006690:	4293      	cmp	r3, r2
 8006692:	d100      	bne.n	8006696 <memset+0xa>
 8006694:	4770      	bx	lr
 8006696:	f803 1b01 	strb.w	r1, [r3], #1
 800669a:	e7f9      	b.n	8006690 <memset+0x4>

0800669c <_init>:
 800669c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669e:	bf00      	nop
 80066a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066a2:	bc08      	pop	{r3}
 80066a4:	469e      	mov	lr, r3
 80066a6:	4770      	bx	lr

080066a8 <_fini>:
 80066a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066aa:	bf00      	nop
 80066ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ae:	bc08      	pop	{r3}
 80066b0:	469e      	mov	lr, r3
 80066b2:	4770      	bx	lr
