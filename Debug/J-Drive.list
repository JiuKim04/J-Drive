
J-Drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f74  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08006140  08006140  00016140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006330  08006330  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006330  08006330  00016330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006338  08006338  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006338  08006338  00016338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800633c  0800633c  0001633c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004260  2000000c  0800634c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000426c  0800634c  0002426c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001572b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003107  00000000  00000000  00035767  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010d8  00000000  00000000  00038870  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f30  00000000  00000000  00039948  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026d1c  00000000  00000000  0003a878  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010cf7  00000000  00000000  00061594  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d82fe  00000000  00000000  0007228b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014a589  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047a4  00000000  00000000  0014a604  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006124 	.word	0x08006124

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08006124 	.word	0x08006124

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b972 	b.w	8000ea0 <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9e08      	ldr	r6, [sp, #32]
 8000bda:	4604      	mov	r4, r0
 8000bdc:	4688      	mov	r8, r1
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d14b      	bne.n	8000c7a <__udivmoddi4+0xa6>
 8000be2:	428a      	cmp	r2, r1
 8000be4:	4615      	mov	r5, r2
 8000be6:	d967      	bls.n	8000cb8 <__udivmoddi4+0xe4>
 8000be8:	fab2 f282 	clz	r2, r2
 8000bec:	b14a      	cbz	r2, 8000c02 <__udivmoddi4+0x2e>
 8000bee:	f1c2 0720 	rsb	r7, r2, #32
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfa:	4095      	lsls	r5, r2
 8000bfc:	ea47 0803 	orr.w	r8, r7, r3
 8000c00:	4094      	lsls	r4, r2
 8000c02:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c06:	0c23      	lsrs	r3, r4, #16
 8000c08:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c0c:	fa1f fc85 	uxth.w	ip, r5
 8000c10:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c14:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c18:	fb07 f10c 	mul.w	r1, r7, ip
 8000c1c:	4299      	cmp	r1, r3
 8000c1e:	d909      	bls.n	8000c34 <__udivmoddi4+0x60>
 8000c20:	18eb      	adds	r3, r5, r3
 8000c22:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c26:	f080 811b 	bcs.w	8000e60 <__udivmoddi4+0x28c>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 8118 	bls.w	8000e60 <__udivmoddi4+0x28c>
 8000c30:	3f02      	subs	r7, #2
 8000c32:	442b      	add	r3, r5
 8000c34:	1a5b      	subs	r3, r3, r1
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c44:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c48:	45a4      	cmp	ip, r4
 8000c4a:	d909      	bls.n	8000c60 <__udivmoddi4+0x8c>
 8000c4c:	192c      	adds	r4, r5, r4
 8000c4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c52:	f080 8107 	bcs.w	8000e64 <__udivmoddi4+0x290>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	f240 8104 	bls.w	8000e64 <__udivmoddi4+0x290>
 8000c5c:	3802      	subs	r0, #2
 8000c5e:	442c      	add	r4, r5
 8000c60:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c64:	eba4 040c 	sub.w	r4, r4, ip
 8000c68:	2700      	movs	r7, #0
 8000c6a:	b11e      	cbz	r6, 8000c74 <__udivmoddi4+0xa0>
 8000c6c:	40d4      	lsrs	r4, r2
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e9c6 4300 	strd	r4, r3, [r6]
 8000c74:	4639      	mov	r1, r7
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d909      	bls.n	8000c92 <__udivmoddi4+0xbe>
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	f000 80eb 	beq.w	8000e5a <__udivmoddi4+0x286>
 8000c84:	2700      	movs	r7, #0
 8000c86:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8a:	4638      	mov	r0, r7
 8000c8c:	4639      	mov	r1, r7
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	fab3 f783 	clz	r7, r3
 8000c96:	2f00      	cmp	r7, #0
 8000c98:	d147      	bne.n	8000d2a <__udivmoddi4+0x156>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xd0>
 8000c9e:	4282      	cmp	r2, r0
 8000ca0:	f200 80fa 	bhi.w	8000e98 <__udivmoddi4+0x2c4>
 8000ca4:	1a84      	subs	r4, r0, r2
 8000ca6:	eb61 0303 	sbc.w	r3, r1, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	4698      	mov	r8, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d0e0      	beq.n	8000c74 <__udivmoddi4+0xa0>
 8000cb2:	e9c6 4800 	strd	r4, r8, [r6]
 8000cb6:	e7dd      	b.n	8000c74 <__udivmoddi4+0xa0>
 8000cb8:	b902      	cbnz	r2, 8000cbc <__udivmoddi4+0xe8>
 8000cba:	deff      	udf	#255	; 0xff
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	f040 808f 	bne.w	8000de4 <__udivmoddi4+0x210>
 8000cc6:	1b49      	subs	r1, r1, r5
 8000cc8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ccc:	fa1f f885 	uxth.w	r8, r5
 8000cd0:	2701      	movs	r7, #1
 8000cd2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cd6:	0c23      	lsrs	r3, r4, #16
 8000cd8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0x124>
 8000ce8:	18eb      	adds	r3, r5, r3
 8000cea:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x122>
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	f200 80cd 	bhi.w	8000e90 <__udivmoddi4+0x2bc>
 8000cf6:	4684      	mov	ip, r0
 8000cf8:	1a59      	subs	r1, r3, r1
 8000cfa:	b2a3      	uxth	r3, r4
 8000cfc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d00:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d04:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d08:	fb08 f800 	mul.w	r8, r8, r0
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0x14c>
 8000d10:	192c      	adds	r4, r5, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x14a>
 8000d18:	45a0      	cmp	r8, r4
 8000d1a:	f200 80b6 	bhi.w	8000e8a <__udivmoddi4+0x2b6>
 8000d1e:	4618      	mov	r0, r3
 8000d20:	eba4 0408 	sub.w	r4, r4, r8
 8000d24:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d28:	e79f      	b.n	8000c6a <__udivmoddi4+0x96>
 8000d2a:	f1c7 0c20 	rsb	ip, r7, #32
 8000d2e:	40bb      	lsls	r3, r7
 8000d30:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d34:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d38:	fa01 f407 	lsl.w	r4, r1, r7
 8000d3c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d40:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d44:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d48:	4325      	orrs	r5, r4
 8000d4a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d4e:	0c2c      	lsrs	r4, r5, #16
 8000d50:	fb08 3319 	mls	r3, r8, r9, r3
 8000d54:	fa1f fa8e 	uxth.w	sl, lr
 8000d58:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d5c:	fb09 f40a 	mul.w	r4, r9, sl
 8000d60:	429c      	cmp	r4, r3
 8000d62:	fa02 f207 	lsl.w	r2, r2, r7
 8000d66:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6a:	d90b      	bls.n	8000d84 <__udivmoddi4+0x1b0>
 8000d6c:	eb1e 0303 	adds.w	r3, lr, r3
 8000d70:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d74:	f080 8087 	bcs.w	8000e86 <__udivmoddi4+0x2b2>
 8000d78:	429c      	cmp	r4, r3
 8000d7a:	f240 8084 	bls.w	8000e86 <__udivmoddi4+0x2b2>
 8000d7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d82:	4473      	add	r3, lr
 8000d84:	1b1b      	subs	r3, r3, r4
 8000d86:	b2ad      	uxth	r5, r5
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d94:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d98:	45a2      	cmp	sl, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x1da>
 8000d9c:	eb1e 0404 	adds.w	r4, lr, r4
 8000da0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da4:	d26b      	bcs.n	8000e7e <__udivmoddi4+0x2aa>
 8000da6:	45a2      	cmp	sl, r4
 8000da8:	d969      	bls.n	8000e7e <__udivmoddi4+0x2aa>
 8000daa:	3802      	subs	r0, #2
 8000dac:	4474      	add	r4, lr
 8000dae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db2:	fba0 8902 	umull	r8, r9, r0, r2
 8000db6:	eba4 040a 	sub.w	r4, r4, sl
 8000dba:	454c      	cmp	r4, r9
 8000dbc:	46c2      	mov	sl, r8
 8000dbe:	464b      	mov	r3, r9
 8000dc0:	d354      	bcc.n	8000e6c <__udivmoddi4+0x298>
 8000dc2:	d051      	beq.n	8000e68 <__udivmoddi4+0x294>
 8000dc4:	2e00      	cmp	r6, #0
 8000dc6:	d069      	beq.n	8000e9c <__udivmoddi4+0x2c8>
 8000dc8:	ebb1 050a 	subs.w	r5, r1, sl
 8000dcc:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd4:	40fd      	lsrs	r5, r7
 8000dd6:	40fc      	lsrs	r4, r7
 8000dd8:	ea4c 0505 	orr.w	r5, ip, r5
 8000ddc:	e9c6 5400 	strd	r5, r4, [r6]
 8000de0:	2700      	movs	r7, #0
 8000de2:	e747      	b.n	8000c74 <__udivmoddi4+0xa0>
 8000de4:	f1c2 0320 	rsb	r3, r2, #32
 8000de8:	fa20 f703 	lsr.w	r7, r0, r3
 8000dec:	4095      	lsls	r5, r2
 8000dee:	fa01 f002 	lsl.w	r0, r1, r2
 8000df2:	fa21 f303 	lsr.w	r3, r1, r3
 8000df6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfa:	4338      	orrs	r0, r7
 8000dfc:	0c01      	lsrs	r1, r0, #16
 8000dfe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e02:	fa1f f885 	uxth.w	r8, r5
 8000e06:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0e:	fb07 f308 	mul.w	r3, r7, r8
 8000e12:	428b      	cmp	r3, r1
 8000e14:	fa04 f402 	lsl.w	r4, r4, r2
 8000e18:	d907      	bls.n	8000e2a <__udivmoddi4+0x256>
 8000e1a:	1869      	adds	r1, r5, r1
 8000e1c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e20:	d22f      	bcs.n	8000e82 <__udivmoddi4+0x2ae>
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d92d      	bls.n	8000e82 <__udivmoddi4+0x2ae>
 8000e26:	3f02      	subs	r7, #2
 8000e28:	4429      	add	r1, r5
 8000e2a:	1acb      	subs	r3, r1, r3
 8000e2c:	b281      	uxth	r1, r0
 8000e2e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e32:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e36:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3a:	fb00 f308 	mul.w	r3, r0, r8
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x27e>
 8000e42:	1869      	adds	r1, r5, r1
 8000e44:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e48:	d217      	bcs.n	8000e7a <__udivmoddi4+0x2a6>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d915      	bls.n	8000e7a <__udivmoddi4+0x2a6>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4429      	add	r1, r5
 8000e52:	1ac9      	subs	r1, r1, r3
 8000e54:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e58:	e73b      	b.n	8000cd2 <__udivmoddi4+0xfe>
 8000e5a:	4637      	mov	r7, r6
 8000e5c:	4630      	mov	r0, r6
 8000e5e:	e709      	b.n	8000c74 <__udivmoddi4+0xa0>
 8000e60:	4607      	mov	r7, r0
 8000e62:	e6e7      	b.n	8000c34 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fb      	b.n	8000c60 <__udivmoddi4+0x8c>
 8000e68:	4541      	cmp	r1, r8
 8000e6a:	d2ab      	bcs.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e6c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e70:	eb69 020e 	sbc.w	r2, r9, lr
 8000e74:	3801      	subs	r0, #1
 8000e76:	4613      	mov	r3, r2
 8000e78:	e7a4      	b.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e7a:	4660      	mov	r0, ip
 8000e7c:	e7e9      	b.n	8000e52 <__udivmoddi4+0x27e>
 8000e7e:	4618      	mov	r0, r3
 8000e80:	e795      	b.n	8000dae <__udivmoddi4+0x1da>
 8000e82:	4667      	mov	r7, ip
 8000e84:	e7d1      	b.n	8000e2a <__udivmoddi4+0x256>
 8000e86:	4681      	mov	r9, r0
 8000e88:	e77c      	b.n	8000d84 <__udivmoddi4+0x1b0>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	442c      	add	r4, r5
 8000e8e:	e747      	b.n	8000d20 <__udivmoddi4+0x14c>
 8000e90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e94:	442b      	add	r3, r5
 8000e96:	e72f      	b.n	8000cf8 <__udivmoddi4+0x124>
 8000e98:	4638      	mov	r0, r7
 8000e9a:	e708      	b.n	8000cae <__udivmoddi4+0xda>
 8000e9c:	4637      	mov	r7, r6
 8000e9e:	e6e9      	b.n	8000c74 <__udivmoddi4+0xa0>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eb6:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <MX_ADC1_Init+0x9c>)
 8000eb8:	4a22      	ldr	r2, [pc, #136]	; (8000f44 <MX_ADC1_Init+0xa0>)
 8000eba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ebc:	4b20      	ldr	r3, [pc, #128]	; (8000f40 <MX_ADC1_Init+0x9c>)
 8000ebe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ec2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <MX_ADC1_Init+0x9c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000eca:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <MX_ADC1_Init+0x9c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <MX_ADC1_Init+0x9c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ed6:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <MX_ADC1_Init+0x9c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ede:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <MX_ADC1_Init+0x9c>)
 8000ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ee4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000ee6:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <MX_ADC1_Init+0x9c>)
 8000ee8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000eec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eee:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <MX_ADC1_Init+0x9c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <MX_ADC1_Init+0x9c>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_ADC1_Init+0x9c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <MX_ADC1_Init+0x9c>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f08:	480d      	ldr	r0, [pc, #52]	; (8000f40 <MX_ADC1_Init+0x9c>)
 8000f0a:	f000 fff7 	bl	8001efc <HAL_ADC_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000f14:	f000 fb36 	bl	8001584 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000f18:	230e      	movs	r3, #14
 8000f1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f24:	463b      	mov	r3, r7
 8000f26:	4619      	mov	r1, r3
 8000f28:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_ADC1_Init+0x9c>)
 8000f2a:	f001 f8ff 	bl	800212c <HAL_ADC_ConfigChannel>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000f34:	f000 fb26 	bl	8001584 <Error_Handler>
  }

}
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20004078 	.word	0x20004078
 8000f44:	40012000 	.word	0x40012000

08000f48 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f4e:	463b      	mov	r3, r7
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000f5a:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <MX_ADC2_Init+0x9c>)
 8000f5c:	4a22      	ldr	r2, [pc, #136]	; (8000fe8 <MX_ADC2_Init+0xa0>)
 8000f5e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f60:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <MX_ADC2_Init+0x9c>)
 8000f62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f66:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f68:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <MX_ADC2_Init+0x9c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <MX_ADC2_Init+0x9c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f74:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <MX_ADC2_Init+0x9c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <MX_ADC2_Init+0x9c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <MX_ADC2_Init+0x9c>)
 8000f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f88:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <MX_ADC2_Init+0x9c>)
 8000f8c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000f90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <MX_ADC2_Init+0x9c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <MX_ADC2_Init+0x9c>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <MX_ADC2_Init+0x9c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <MX_ADC2_Init+0x9c>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fac:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <MX_ADC2_Init+0x9c>)
 8000fae:	f000 ffa5 	bl	8001efc <HAL_ADC_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8000fb8:	f000 fae4 	bl	8001584 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fc8:	463b      	mov	r3, r7
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <MX_ADC2_Init+0x9c>)
 8000fce:	f001 f8ad 	bl	800212c <HAL_ADC_ConfigChannel>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8000fd8:	f000 fad4 	bl	8001584 <Error_Handler>
  }

}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20004030 	.word	0x20004030
 8000fe8:	40012100 	.word	0x40012100

08000fec <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000ffe:	4b32      	ldr	r3, [pc, #200]	; (80010c8 <MX_ADC3_Init+0xdc>)
 8001000:	4a32      	ldr	r2, [pc, #200]	; (80010cc <MX_ADC3_Init+0xe0>)
 8001002:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001004:	4b30      	ldr	r3, [pc, #192]	; (80010c8 <MX_ADC3_Init+0xdc>)
 8001006:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800100a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800100c:	4b2e      	ldr	r3, [pc, #184]	; (80010c8 <MX_ADC3_Init+0xdc>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8001012:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <MX_ADC3_Init+0xdc>)
 8001014:	2201      	movs	r2, #1
 8001016:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001018:	4b2b      	ldr	r3, [pc, #172]	; (80010c8 <MX_ADC3_Init+0xdc>)
 800101a:	2200      	movs	r2, #0
 800101c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = ENABLE;
 800101e:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <MX_ADC3_Init+0xdc>)
 8001020:	2201      	movs	r2, #1
 8001022:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.NbrOfDiscConversion = 1;
 8001026:	4b28      	ldr	r3, [pc, #160]	; (80010c8 <MX_ADC3_Init+0xdc>)
 8001028:	2201      	movs	r2, #1
 800102a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800102c:	4b26      	ldr	r3, [pc, #152]	; (80010c8 <MX_ADC3_Init+0xdc>)
 800102e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001032:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8001034:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <MX_ADC3_Init+0xdc>)
 8001036:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800103a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103c:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <MX_ADC3_Init+0xdc>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 3;
 8001042:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <MX_ADC3_Init+0xdc>)
 8001044:	2203      	movs	r2, #3
 8001046:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001048:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <MX_ADC3_Init+0xdc>)
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001050:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <MX_ADC3_Init+0xdc>)
 8001052:	2201      	movs	r2, #1
 8001054:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001056:	481c      	ldr	r0, [pc, #112]	; (80010c8 <MX_ADC3_Init+0xdc>)
 8001058:	f000 ff50 	bl	8001efc <HAL_ADC_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_ADC3_Init+0x7a>
  {
    Error_Handler();
 8001062:	f000 fa8f 	bl	8001584 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001066:	2300      	movs	r3, #0
 8001068:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800106a:	2301      	movs	r3, #1
 800106c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001072:	463b      	mov	r3, r7
 8001074:	4619      	mov	r1, r3
 8001076:	4814      	ldr	r0, [pc, #80]	; (80010c8 <MX_ADC3_Init+0xdc>)
 8001078:	f001 f858 	bl	800212c <HAL_ADC_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8001082:	f000 fa7f 	bl	8001584 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001086:	2301      	movs	r3, #1
 8001088:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800108a:	2302      	movs	r3, #2
 800108c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800108e:	463b      	mov	r3, r7
 8001090:	4619      	mov	r1, r3
 8001092:	480d      	ldr	r0, [pc, #52]	; (80010c8 <MX_ADC3_Init+0xdc>)
 8001094:	f001 f84a 	bl	800212c <HAL_ADC_ConfigChannel>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 800109e:	f000 fa71 	bl	8001584 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010a2:	230a      	movs	r3, #10
 80010a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80010a6:	2303      	movs	r3, #3
 80010a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010aa:	463b      	mov	r3, r7
 80010ac:	4619      	mov	r1, r3
 80010ae:	4806      	ldr	r0, [pc, #24]	; (80010c8 <MX_ADC3_Init+0xdc>)
 80010b0:	f001 f83c 	bl	800212c <HAL_ADC_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 80010ba:	f000 fa63 	bl	8001584 <Error_Handler>
  }

}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200040c0 	.word	0x200040c0
 80010cc:	40012200 	.word	0x40012200

080010d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08e      	sub	sp, #56	; 0x38
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a52      	ldr	r2, [pc, #328]	; (8001238 <HAL_ADC_MspInit+0x168>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d128      	bne.n	8001144 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	623b      	str	r3, [r7, #32]
 80010f6:	4b51      	ldr	r3, [pc, #324]	; (800123c <HAL_ADC_MspInit+0x16c>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	4a50      	ldr	r2, [pc, #320]	; (800123c <HAL_ADC_MspInit+0x16c>)
 80010fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001100:	6453      	str	r3, [r2, #68]	; 0x44
 8001102:	4b4e      	ldr	r3, [pc, #312]	; (800123c <HAL_ADC_MspInit+0x16c>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110a:	623b      	str	r3, [r7, #32]
 800110c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	4b4a      	ldr	r3, [pc, #296]	; (800123c <HAL_ADC_MspInit+0x16c>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a49      	ldr	r2, [pc, #292]	; (800123c <HAL_ADC_MspInit+0x16c>)
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b47      	ldr	r3, [pc, #284]	; (800123c <HAL_ADC_MspInit+0x16c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	61fb      	str	r3, [r7, #28]
 8001128:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = A_Current_Pin;
 800112a:	2310      	movs	r3, #16
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800112e:	2303      	movs	r3, #3
 8001130:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(A_Current_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113a:	4619      	mov	r1, r3
 800113c:	4840      	ldr	r0, [pc, #256]	; (8001240 <HAL_ADC_MspInit+0x170>)
 800113e:	f001 fb51 	bl	80027e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001142:	e074      	b.n	800122e <HAL_ADC_MspInit+0x15e>
  else if(adcHandle->Instance==ADC2)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a3e      	ldr	r2, [pc, #248]	; (8001244 <HAL_ADC_MspInit+0x174>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d128      	bne.n	80011a0 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
 8001152:	4b3a      	ldr	r3, [pc, #232]	; (800123c <HAL_ADC_MspInit+0x16c>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	4a39      	ldr	r2, [pc, #228]	; (800123c <HAL_ADC_MspInit+0x16c>)
 8001158:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800115c:	6453      	str	r3, [r2, #68]	; 0x44
 800115e:	4b37      	ldr	r3, [pc, #220]	; (800123c <HAL_ADC_MspInit+0x16c>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001166:	61bb      	str	r3, [r7, #24]
 8001168:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	4b33      	ldr	r3, [pc, #204]	; (800123c <HAL_ADC_MspInit+0x16c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a32      	ldr	r2, [pc, #200]	; (800123c <HAL_ADC_MspInit+0x16c>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b30      	ldr	r3, [pc, #192]	; (800123c <HAL_ADC_MspInit+0x16c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = B_Current_Pin;
 8001186:	2320      	movs	r3, #32
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118a:	2303      	movs	r3, #3
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(B_Current_GPIO_Port, &GPIO_InitStruct);
 8001192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001196:	4619      	mov	r1, r3
 8001198:	4829      	ldr	r0, [pc, #164]	; (8001240 <HAL_ADC_MspInit+0x170>)
 800119a:	f001 fb23 	bl	80027e4 <HAL_GPIO_Init>
}
 800119e:	e046      	b.n	800122e <HAL_ADC_MspInit+0x15e>
  else if(adcHandle->Instance==ADC3)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a28      	ldr	r2, [pc, #160]	; (8001248 <HAL_ADC_MspInit+0x178>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d141      	bne.n	800122e <HAL_ADC_MspInit+0x15e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <HAL_ADC_MspInit+0x16c>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	4a22      	ldr	r2, [pc, #136]	; (800123c <HAL_ADC_MspInit+0x16c>)
 80011b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011b8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ba:	4b20      	ldr	r3, [pc, #128]	; (800123c <HAL_ADC_MspInit+0x16c>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <HAL_ADC_MspInit+0x16c>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a1b      	ldr	r2, [pc, #108]	; (800123c <HAL_ADC_MspInit+0x16c>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <HAL_ADC_MspInit+0x16c>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <HAL_ADC_MspInit+0x16c>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a14      	ldr	r2, [pc, #80]	; (800123c <HAL_ADC_MspInit+0x16c>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_ADC_MspInit+0x16c>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FET_Temp_Pin;
 80011fe:	2301      	movs	r3, #1
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001202:	2303      	movs	r3, #3
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(FET_Temp_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120e:	4619      	mov	r1, r3
 8001210:	480b      	ldr	r0, [pc, #44]	; (8001240 <HAL_ADC_MspInit+0x170>)
 8001212:	f001 fae7 	bl	80027e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DC_Voltage_Pin|Motor_Temp_Pin;
 8001216:	2303      	movs	r3, #3
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121a:	2303      	movs	r3, #3
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001226:	4619      	mov	r1, r3
 8001228:	4808      	ldr	r0, [pc, #32]	; (800124c <HAL_ADC_MspInit+0x17c>)
 800122a:	f001 fadb 	bl	80027e4 <HAL_GPIO_Init>
}
 800122e:	bf00      	nop
 8001230:	3738      	adds	r7, #56	; 0x38
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40012000 	.word	0x40012000
 800123c:	40023800 	.word	0x40023800
 8001240:	40020800 	.word	0x40020800
 8001244:	40012100 	.word	0x40012100
 8001248:	40012200 	.word	0x40012200
 800124c:	40020000 	.word	0x40020000

08001250 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <MX_CRC_Init+0x20>)
 8001256:	4a07      	ldr	r2, [pc, #28]	; (8001274 <MX_CRC_Init+0x24>)
 8001258:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_CRC_Init+0x20>)
 800125c:	f001 faa5 	bl	80027aa <HAL_CRC_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001266:	f000 f98d 	bl	8001584 <Error_Handler>
  }

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20004108 	.word	0x20004108
 8001274:	40023000 	.word	0x40023000

08001278 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <HAL_CRC_MspInit+0x3c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d10d      	bne.n	80012a6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <HAL_CRC_MspInit+0x40>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a09      	ldr	r2, [pc, #36]	; (80012b8 <HAL_CRC_MspInit+0x40>)
 8001294:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <HAL_CRC_MspInit+0x40>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80012a6:	bf00      	nop
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40023000 	.word	0x40023000
 80012b8:	40023800 	.word	0x40023800

080012bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <MX_GPIO_Init+0xfc>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a37      	ldr	r2, [pc, #220]	; (80013b8 <MX_GPIO_Init+0xfc>)
 80012dc:	f043 0304 	orr.w	r3, r3, #4
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b35      	ldr	r3, [pc, #212]	; (80013b8 <MX_GPIO_Init+0xfc>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b31      	ldr	r3, [pc, #196]	; (80013b8 <MX_GPIO_Init+0xfc>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a30      	ldr	r2, [pc, #192]	; (80013b8 <MX_GPIO_Init+0xfc>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b2e      	ldr	r3, [pc, #184]	; (80013b8 <MX_GPIO_Init+0xfc>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	603b      	str	r3, [r7, #0]
 800130e:	4b2a      	ldr	r3, [pc, #168]	; (80013b8 <MX_GPIO_Init+0xfc>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a29      	ldr	r2, [pc, #164]	; (80013b8 <MX_GPIO_Init+0xfc>)
 8001314:	f043 0302 	orr.w	r3, r3, #2
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <MX_GPIO_Init+0xfc>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Encoder_CS_Pin|EN_GATE_Pin|DC_CAL_Pin|TP0_Pin
 8001326:	2200      	movs	r2, #0
 8001328:	f640 5188 	movw	r1, #3464	; 0xd88
 800132c:	4823      	ldr	r0, [pc, #140]	; (80013bc <MX_GPIO_Init+0x100>)
 800132e:	f001 fbeb 	bl	8002b08 <HAL_GPIO_WritePin>
                          |TP1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ControlBus_TXEN_GPIO_Port, ControlBus_TXEN_Pin, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	2110      	movs	r1, #16
 8001336:	4822      	ldr	r0, [pc, #136]	; (80013c0 <MX_GPIO_Init+0x104>)
 8001338:	f001 fbe6 	bl	8002b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Encoder_CS_Pin|EN_GATE_Pin|DC_CAL_Pin;
 800133c:	f44f 73c4 	mov.w	r3, #392	; 0x188
 8001340:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001342:	2301      	movs	r3, #1
 8001344:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	4619      	mov	r1, r3
 8001354:	4819      	ldr	r0, [pc, #100]	; (80013bc <MX_GPIO_Init+0x100>)
 8001356:	f001 fa45 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ControlBus_TXEN_Pin;
 800135a:	2310      	movs	r3, #16
 800135c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135e:	2301      	movs	r3, #1
 8001360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001366:	2303      	movs	r3, #3
 8001368:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ControlBus_TXEN_GPIO_Port, &GPIO_InitStruct);
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	4619      	mov	r1, r3
 8001370:	4813      	ldr	r0, [pc, #76]	; (80013c0 <MX_GPIO_Init+0x104>)
 8001372:	f001 fa37 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nFAULT_Pin;
 8001376:	f44f 7300 	mov.w	r3, #512	; 0x200
 800137a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137c:	2300      	movs	r3, #0
 800137e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001380:	2301      	movs	r3, #1
 8001382:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(nFAULT_GPIO_Port, &GPIO_InitStruct);
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	4619      	mov	r1, r3
 800138a:	480c      	ldr	r0, [pc, #48]	; (80013bc <MX_GPIO_Init+0x100>)
 800138c:	f001 fa2a 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = TP0_Pin|TP1_Pin;
 8001390:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001394:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001396:	2301      	movs	r3, #1
 8001398:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139e:	2303      	movs	r3, #3
 80013a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a2:	f107 030c 	add.w	r3, r7, #12
 80013a6:	4619      	mov	r1, r3
 80013a8:	4804      	ldr	r0, [pc, #16]	; (80013bc <MX_GPIO_Init+0x100>)
 80013aa:	f001 fa1b 	bl	80027e4 <HAL_GPIO_Init>

}
 80013ae:	bf00      	nop
 80013b0:	3720      	adds	r7, #32
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020800 	.word	0x40020800
 80013c0:	40020000 	.word	0x40020000

080013c4 <JDriveMain>:
#include <Util/util.hpp>
#include <cstdint>
#include <FastMath/fast_math.hpp>

void JDriveMain()
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
	StartOnBoardLED();
 80013ca:	f003 fdf1 	bl	8004fb0 <_Z15StartOnBoardLEDv>
	for (uint8_t k = 0; k < 2; k++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	71fb      	strb	r3, [r7, #7]
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d82b      	bhi.n	8001430 <JDriveMain+0x6c>
	{
		for (int16_t i = 0x0; i <= 0xFFF; i = i + 45)
 80013d8:	2300      	movs	r3, #0
 80013da:	80bb      	strh	r3, [r7, #4]
 80013dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013e4:	da0c      	bge.n	8001400 <JDriveMain+0x3c>
		{
			SetOnBoardLED(i);
 80013e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f003 fdea 	bl	8004fc4 <_Z13SetOnBoardLEDm>
			Delaymillis(1);
 80013f0:	2001      	movs	r0, #1
 80013f2:	f003 fe4b 	bl	800508c <_Z11Delaymillism>
		for (int16_t i = 0x0; i <= 0xFFF; i = i + 45)
 80013f6:	88bb      	ldrh	r3, [r7, #4]
 80013f8:	332d      	adds	r3, #45	; 0x2d
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	80bb      	strh	r3, [r7, #4]
 80013fe:	e7ed      	b.n	80013dc <JDriveMain+0x18>
		}
		for (int16_t i = 0xFFF; i >= 0x0; i = i - 45)
 8001400:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001404:	807b      	strh	r3, [r7, #2]
 8001406:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800140a:	2b00      	cmp	r3, #0
 800140c:	db0c      	blt.n	8001428 <JDriveMain+0x64>
		{
			SetOnBoardLED(i);
 800140e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001412:	4618      	mov	r0, r3
 8001414:	f003 fdd6 	bl	8004fc4 <_Z13SetOnBoardLEDm>
			Delaymillis(1);
 8001418:	2001      	movs	r0, #1
 800141a:	f003 fe37 	bl	800508c <_Z11Delaymillism>
		for (int16_t i = 0xFFF; i >= 0x0; i = i - 45)
 800141e:	887b      	ldrh	r3, [r7, #2]
 8001420:	3b2d      	subs	r3, #45	; 0x2d
 8001422:	b29b      	uxth	r3, r3
 8001424:	807b      	strh	r3, [r7, #2]
 8001426:	e7ee      	b.n	8001406 <JDriveMain+0x42>
	for (uint8_t k = 0; k < 2; k++)
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	3301      	adds	r3, #1
 800142c:	71fb      	strb	r3, [r7, #7]
 800142e:	e7d0      	b.n	80013d2 <JDriveMain+0xe>
		}
	}

	FastMathInit();
 8001430:	f003 fce2 	bl	8004df8 <_Z12FastMathInitv>
	StartADC();
 8001434:	f003 fe02 	bl	800503c <_Z8StartADCv>
	StartInverterPWM();
 8001438:	f003 fde2 	bl	8005000 <_Z16StartInverterPWMv>
	OffGateDriver();
 800143c:	f003 fe1a 	bl	8005074 <_Z13OffGateDriverv>
	StartControlTimer();
 8001440:	f003 fdd0 	bl	8004fe4 <_Z17StartControlTimerv>
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001450:	f000 fcc0 	bl	8001dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001454:	f000 f824 	bl	80014a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001458:	f7ff ff30 	bl	80012bc <MX_GPIO_Init>
  MX_TIM2_Init();
 800145c:	f000 fa80 	bl	8001960 <MX_TIM2_Init>
  MX_CRC_Init();
 8001460:	f7ff fef6 	bl	8001250 <MX_CRC_Init>
  MX_USART2_UART_Init();
 8001464:	f000 fc1a 	bl	8001c9c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001468:	f7ff fd1c 	bl	8000ea4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800146c:	f7ff fd6c 	bl	8000f48 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001470:	f7ff fdbc 	bl	8000fec <MX_ADC3_Init>
  MX_SPI2_Init();
 8001474:	f000 f88e 	bl	8001594 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001478:	f000 f9ba 	bl	80017f0 <MX_TIM1_Init>
  MX_TIM8_Init();
 800147c:	f000 fae6 	bl	8001a4c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(DC_CAL_GPIO_Port, DC_CAL_Pin, GPIO_PIN_SET);
 8001480:	2201      	movs	r2, #1
 8001482:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001486:	4805      	ldr	r0, [pc, #20]	; (800149c <main+0x50>)
 8001488:	f001 fb3e 	bl	8002b08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, GPIO_PIN_RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	2180      	movs	r1, #128	; 0x80
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <main+0x50>)
 8001492:	f001 fb39 	bl	8002b08 <HAL_GPIO_WritePin>

  JDriveMain();
 8001496:	f7ff ff95 	bl	80013c4 <JDriveMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800149a:	e7fe      	b.n	800149a <main+0x4e>
 800149c:	40020800 	.word	0x40020800

080014a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b094      	sub	sp, #80	; 0x50
 80014a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	2234      	movs	r2, #52	; 0x34
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f004 fe30 	bl	8006114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	4b2c      	ldr	r3, [pc, #176]	; (800157c <SystemClock_Config+0xdc>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	4a2b      	ldr	r2, [pc, #172]	; (800157c <SystemClock_Config+0xdc>)
 80014ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d2:	6413      	str	r3, [r2, #64]	; 0x40
 80014d4:	4b29      	ldr	r3, [pc, #164]	; (800157c <SystemClock_Config+0xdc>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e0:	2300      	movs	r3, #0
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	4b26      	ldr	r3, [pc, #152]	; (8001580 <SystemClock_Config+0xe0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a25      	ldr	r2, [pc, #148]	; (8001580 <SystemClock_Config+0xe0>)
 80014ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b23      	ldr	r3, [pc, #140]	; (8001580 <SystemClock_Config+0xe0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014f8:	603b      	str	r3, [r7, #0]
 80014fa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014fc:	2302      	movs	r3, #2
 80014fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001500:	2301      	movs	r3, #1
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001504:	2310      	movs	r3, #16
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001508:	2302      	movs	r3, #2
 800150a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800150c:	2300      	movs	r3, #0
 800150e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001510:	2308      	movs	r3, #8
 8001512:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001514:	23b4      	movs	r3, #180	; 0xb4
 8001516:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001518:	2302      	movs	r3, #2
 800151a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800151c:	2302      	movs	r3, #2
 800151e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001520:	2302      	movs	r3, #2
 8001522:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001524:	f107 031c 	add.w	r3, r7, #28
 8001528:	4618      	mov	r0, r3
 800152a:	f001 fe2b 	bl	8003184 <HAL_RCC_OscConfig>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001534:	f000 f826 	bl	8001584 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001538:	f001 fb1a 	bl	8002b70 <HAL_PWREx_EnableOverDrive>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001542:	f000 f81f 	bl	8001584 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001546:	230f      	movs	r3, #15
 8001548:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800154a:	2302      	movs	r3, #2
 800154c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001552:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001556:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	2105      	movs	r1, #5
 8001564:	4618      	mov	r0, r3
 8001566:	f001 fb53 	bl	8002c10 <HAL_RCC_ClockConfig>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001570:	f000 f808 	bl	8001584 <Error_Handler>
  }
}
 8001574:	bf00      	nop
 8001576:	3750      	adds	r7, #80	; 0x50
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40023800 	.word	0x40023800
 8001580:	40007000 	.word	0x40007000

08001584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <MX_SPI2_Init+0x64>)
 800159a:	4a18      	ldr	r2, [pc, #96]	; (80015fc <MX_SPI2_Init+0x68>)
 800159c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <MX_SPI2_Init+0x64>)
 80015a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015a6:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <MX_SPI2_Init+0x64>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <MX_SPI2_Init+0x64>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <MX_SPI2_Init+0x64>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <MX_SPI2_Init+0x64>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <MX_SPI2_Init+0x64>)
 80015c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80015c6:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <MX_SPI2_Init+0x64>)
 80015c8:	2208      	movs	r2, #8
 80015ca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015cc:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <MX_SPI2_Init+0x64>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <MX_SPI2_Init+0x64>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015d8:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <MX_SPI2_Init+0x64>)
 80015da:	2200      	movs	r2, #0
 80015dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <MX_SPI2_Init+0x64>)
 80015e0:	220a      	movs	r2, #10
 80015e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015e4:	4804      	ldr	r0, [pc, #16]	; (80015f8 <MX_SPI2_Init+0x64>)
 80015e6:	f002 f827 	bl	8003638 <HAL_SPI_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80015f0:	f7ff ffc8 	bl	8001584 <Error_Handler>
  }

}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20004110 	.word	0x20004110
 80015fc:	40003800 	.word	0x40003800

08001600 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a30      	ldr	r2, [pc, #192]	; (80016e0 <HAL_SPI_MspInit+0xe0>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d15a      	bne.n	80016d8 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b2f      	ldr	r3, [pc, #188]	; (80016e4 <HAL_SPI_MspInit+0xe4>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	4a2e      	ldr	r2, [pc, #184]	; (80016e4 <HAL_SPI_MspInit+0xe4>)
 800162c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001630:	6413      	str	r3, [r2, #64]	; 0x40
 8001632:	4b2c      	ldr	r3, [pc, #176]	; (80016e4 <HAL_SPI_MspInit+0xe4>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b28      	ldr	r3, [pc, #160]	; (80016e4 <HAL_SPI_MspInit+0xe4>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a27      	ldr	r2, [pc, #156]	; (80016e4 <HAL_SPI_MspInit+0xe4>)
 8001648:	f043 0304 	orr.w	r3, r3, #4
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b25      	ldr	r3, [pc, #148]	; (80016e4 <HAL_SPI_MspInit+0xe4>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	4b21      	ldr	r3, [pc, #132]	; (80016e4 <HAL_SPI_MspInit+0xe4>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a20      	ldr	r2, [pc, #128]	; (80016e4 <HAL_SPI_MspInit+0xe4>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <HAL_SPI_MspInit+0xe4>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = Encoder_MOSI_Pin;
 8001676:	2302      	movs	r3, #2
 8001678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001682:	2303      	movs	r3, #3
 8001684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001686:	2307      	movs	r3, #7
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Encoder_MOSI_GPIO_Port, &GPIO_InitStruct);
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	4619      	mov	r1, r3
 8001690:	4815      	ldr	r0, [pc, #84]	; (80016e8 <HAL_SPI_MspInit+0xe8>)
 8001692:	f001 f8a7 	bl	80027e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Encoder_MISO_Pin;
 8001696:	2304      	movs	r3, #4
 8001698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016a6:	2305      	movs	r3, #5
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Encoder_MISO_GPIO_Port, &GPIO_InitStruct);
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4619      	mov	r1, r3
 80016b0:	480d      	ldr	r0, [pc, #52]	; (80016e8 <HAL_SPI_MspInit+0xe8>)
 80016b2:	f001 f897 	bl	80027e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Encoder_SCK_Pin;
 80016b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c4:	2303      	movs	r3, #3
 80016c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016c8:	2305      	movs	r3, #5
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Encoder_SCK_GPIO_Port, &GPIO_InitStruct);
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	4619      	mov	r1, r3
 80016d2:	4806      	ldr	r0, [pc, #24]	; (80016ec <HAL_SPI_MspInit+0xec>)
 80016d4:	f001 f886 	bl	80027e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80016d8:	bf00      	nop
 80016da:	3728      	adds	r7, #40	; 0x28
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40003800 	.word	0x40003800
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020800 	.word	0x40020800
 80016ec:	40020400 	.word	0x40020400

080016f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <HAL_MspInit+0x4c>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	4a0f      	ldr	r2, [pc, #60]	; (800173c <HAL_MspInit+0x4c>)
 8001700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001704:	6453      	str	r3, [r2, #68]	; 0x44
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <HAL_MspInit+0x4c>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	603b      	str	r3, [r7, #0]
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <HAL_MspInit+0x4c>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	4a08      	ldr	r2, [pc, #32]	; (800173c <HAL_MspInit+0x4c>)
 800171c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001720:	6413      	str	r3, [r2, #64]	; 0x40
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_MspInit+0x4c>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800

08001740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001752:	e7fe      	b.n	8001752 <HardFault_Handler+0x4>

08001754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <MemManage_Handler+0x4>

0800175a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <BusFault_Handler+0x4>

08001760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <UsageFault_Handler+0x4>

08001766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001794:	f000 fb70 	bl	8001e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}

0800179c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017a2:	f002 f86f 	bl	8003884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200041a8 	.word	0x200041a8

080017b0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80017b6:	f002 f865 	bl	8003884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20004168 	.word	0x20004168

080017c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <SystemInit+0x28>)
 80017ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ce:	4a07      	ldr	r2, [pc, #28]	; (80017ec <SystemInit+0x28>)
 80017d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <SystemInit+0x28>)
 80017da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017de:	609a      	str	r2, [r3, #8]
#endif
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b096      	sub	sp, #88	; 0x58
 80017f4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001804:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800180e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
 800181c:	611a      	str	r2, [r3, #16]
 800181e:	615a      	str	r2, [r3, #20]
 8001820:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	2220      	movs	r2, #32
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f004 fc73 	bl	8006114 <memset>

  htim1.Instance = TIM1;
 800182e:	4b4a      	ldr	r3, [pc, #296]	; (8001958 <MX_TIM1_Init+0x168>)
 8001830:	4a4a      	ldr	r2, [pc, #296]	; (800195c <MX_TIM1_Init+0x16c>)
 8001832:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001834:	4b48      	ldr	r3, [pc, #288]	; (8001958 <MX_TIM1_Init+0x168>)
 8001836:	2200      	movs	r2, #0
 8001838:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 800183a:	4b47      	ldr	r3, [pc, #284]	; (8001958 <MX_TIM1_Init+0x168>)
 800183c:	2240      	movs	r2, #64	; 0x40
 800183e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xfff;
 8001840:	4b45      	ldr	r3, [pc, #276]	; (8001958 <MX_TIM1_Init+0x168>)
 8001842:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001846:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001848:	4b43      	ldr	r3, [pc, #268]	; (8001958 <MX_TIM1_Init+0x168>)
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 800184e:	4b42      	ldr	r3, [pc, #264]	; (8001958 <MX_TIM1_Init+0x168>)
 8001850:	2201      	movs	r2, #1
 8001852:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001854:	4b40      	ldr	r3, [pc, #256]	; (8001958 <MX_TIM1_Init+0x168>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800185a:	483f      	ldr	r0, [pc, #252]	; (8001958 <MX_TIM1_Init+0x168>)
 800185c:	f001 ff50 	bl	8003700 <HAL_TIM_Base_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001866:	f7ff fe8d 	bl	8001584 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800186a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800186e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001870:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001874:	4619      	mov	r1, r3
 8001876:	4838      	ldr	r0, [pc, #224]	; (8001958 <MX_TIM1_Init+0x168>)
 8001878:	f002 f9d2 	bl	8003c20 <HAL_TIM_ConfigClockSource>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001882:	f7ff fe7f 	bl	8001584 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001886:	4834      	ldr	r0, [pc, #208]	; (8001958 <MX_TIM1_Init+0x168>)
 8001888:	f001 ff89 	bl	800379e <HAL_TIM_PWM_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001892:	f7ff fe77 	bl	8001584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001896:	2300      	movs	r3, #0
 8001898:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800189a:	2300      	movs	r3, #0
 800189c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800189e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018a2:	4619      	mov	r1, r3
 80018a4:	482c      	ldr	r0, [pc, #176]	; (8001958 <MX_TIM1_Init+0x168>)
 80018a6:	f002 fdd5 	bl	8004454 <HAL_TIMEx_MasterConfigSynchronization>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80018b0:	f7ff fe68 	bl	8001584 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018b4:	2360      	movs	r3, #96	; 0x60
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018bc:	2300      	movs	r3, #0
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018c0:	2300      	movs	r3, #0
 80018c2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018c8:	2300      	movs	r3, #0
 80018ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018cc:	2300      	movs	r3, #0
 80018ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d4:	2200      	movs	r2, #0
 80018d6:	4619      	mov	r1, r3
 80018d8:	481f      	ldr	r0, [pc, #124]	; (8001958 <MX_TIM1_Init+0x168>)
 80018da:	f002 f8db 	bl	8003a94 <HAL_TIM_PWM_ConfigChannel>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80018e4:	f7ff fe4e 	bl	8001584 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ec:	2204      	movs	r2, #4
 80018ee:	4619      	mov	r1, r3
 80018f0:	4819      	ldr	r0, [pc, #100]	; (8001958 <MX_TIM1_Init+0x168>)
 80018f2:	f002 f8cf 	bl	8003a94 <HAL_TIM_PWM_ConfigChannel>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80018fc:	f7ff fe42 	bl	8001584 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001904:	2208      	movs	r2, #8
 8001906:	4619      	mov	r1, r3
 8001908:	4813      	ldr	r0, [pc, #76]	; (8001958 <MX_TIM1_Init+0x168>)
 800190a:	f002 f8c3 	bl	8003a94 <HAL_TIM_PWM_ConfigChannel>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001914:	f7ff fe36 	bl	8001584 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = DEADTIME_CLK;
 8001924:	2332      	movs	r3, #50	; 0x32
 8001926:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800192c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001930:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001932:	2300      	movs	r3, #0
 8001934:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	4619      	mov	r1, r3
 800193a:	4807      	ldr	r0, [pc, #28]	; (8001958 <MX_TIM1_Init+0x168>)
 800193c:	f002 fe06 	bl	800454c <HAL_TIMEx_ConfigBreakDeadTime>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001946:	f7ff fe1d 	bl	8001584 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800194a:	4803      	ldr	r0, [pc, #12]	; (8001958 <MX_TIM1_Init+0x168>)
 800194c:	f000 f928 	bl	8001ba0 <HAL_TIM_MspPostInit>

}
 8001950:	bf00      	nop
 8001952:	3758      	adds	r7, #88	; 0x58
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	200041a8 	.word	0x200041a8
 800195c:	40010000 	.word	0x40010000

08001960 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08e      	sub	sp, #56	; 0x38
 8001964:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001966:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001974:	f107 0320 	add.w	r3, r7, #32
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
 800198c:	615a      	str	r2, [r3, #20]
 800198e:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001990:	4b2d      	ldr	r3, [pc, #180]	; (8001a48 <MX_TIM2_Init+0xe8>)
 8001992:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001996:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001998:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <MX_TIM2_Init+0xe8>)
 800199a:	2200      	movs	r2, #0
 800199c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199e:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <MX_TIM2_Init+0xe8>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xfff;
 80019a4:	4b28      	ldr	r3, [pc, #160]	; (8001a48 <MX_TIM2_Init+0xe8>)
 80019a6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80019aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ac:	4b26      	ldr	r3, [pc, #152]	; (8001a48 <MX_TIM2_Init+0xe8>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b2:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <MX_TIM2_Init+0xe8>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019b8:	4823      	ldr	r0, [pc, #140]	; (8001a48 <MX_TIM2_Init+0xe8>)
 80019ba:	f001 fea1 	bl	8003700 <HAL_TIM_Base_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80019c4:	f7ff fdde 	bl	8001584 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019d2:	4619      	mov	r1, r3
 80019d4:	481c      	ldr	r0, [pc, #112]	; (8001a48 <MX_TIM2_Init+0xe8>)
 80019d6:	f002 f923 	bl	8003c20 <HAL_TIM_ConfigClockSource>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80019e0:	f7ff fdd0 	bl	8001584 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019e4:	4818      	ldr	r0, [pc, #96]	; (8001a48 <MX_TIM2_Init+0xe8>)
 80019e6:	f001 feda 	bl	800379e <HAL_TIM_PWM_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80019f0:	f7ff fdc8 	bl	8001584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f4:	2300      	movs	r3, #0
 80019f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019fc:	f107 0320 	add.w	r3, r7, #32
 8001a00:	4619      	mov	r1, r3
 8001a02:	4811      	ldr	r0, [pc, #68]	; (8001a48 <MX_TIM2_Init+0xe8>)
 8001a04:	f002 fd26 	bl	8004454 <HAL_TIMEx_MasterConfigSynchronization>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001a0e:	f7ff fdb9 	bl	8001584 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a12:	2360      	movs	r3, #96	; 0x60
 8001a14:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	220c      	movs	r2, #12
 8001a26:	4619      	mov	r1, r3
 8001a28:	4807      	ldr	r0, [pc, #28]	; (8001a48 <MX_TIM2_Init+0xe8>)
 8001a2a:	f002 f833 	bl	8003a94 <HAL_TIM_PWM_ConfigChannel>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001a34:	f7ff fda6 	bl	8001584 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001a38:	4803      	ldr	r0, [pc, #12]	; (8001a48 <MX_TIM2_Init+0xe8>)
 8001a3a:	f000 f8b1 	bl	8001ba0 <HAL_TIM_MspPostInit>

}
 8001a3e:	bf00      	nop
 8001a40:	3738      	adds	r7, #56	; 0x38
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200041e8 	.word	0x200041e8

08001a4c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a52:	f107 0308 	add.w	r3, r7, #8
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a60:	463b      	mov	r3, r7
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]

  htim8.Instance = TIM8;
 8001a68:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <MX_TIM8_Init+0x98>)
 8001a6a:	4a1f      	ldr	r2, [pc, #124]	; (8001ae8 <MX_TIM8_Init+0x9c>)
 8001a6c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <MX_TIM8_Init+0x98>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <MX_TIM8_Init+0x98>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0xfff;
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <MX_TIM8_Init+0x98>)
 8001a7c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001a80:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a82:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <MX_TIM8_Init+0x98>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a88:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <MX_TIM8_Init+0x98>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a8e:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <MX_TIM8_Init+0x98>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001a94:	4813      	ldr	r0, [pc, #76]	; (8001ae4 <MX_TIM8_Init+0x98>)
 8001a96:	f001 fe33 	bl	8003700 <HAL_TIM_Base_Init>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001aa0:	f7ff fd70 	bl	8001584 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001aaa:	f107 0308 	add.w	r3, r7, #8
 8001aae:	4619      	mov	r1, r3
 8001ab0:	480c      	ldr	r0, [pc, #48]	; (8001ae4 <MX_TIM8_Init+0x98>)
 8001ab2:	f002 f8b5 	bl	8003c20 <HAL_TIM_ConfigClockSource>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001abc:	f7ff fd62 	bl	8001584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ac0:	2320      	movs	r3, #32
 8001ac2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001ac4:	2380      	movs	r3, #128	; 0x80
 8001ac6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ac8:	463b      	mov	r3, r7
 8001aca:	4619      	mov	r1, r3
 8001acc:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <MX_TIM8_Init+0x98>)
 8001ace:	f002 fcc1 	bl	8004454 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001ad8:	f7ff fd54 	bl	8001584 <Error_Handler>
  }

}
 8001adc:	bf00      	nop
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20004168 	.word	0x20004168
 8001ae8:	40010400 	.word	0x40010400

08001aec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a26      	ldr	r2, [pc, #152]	; (8001b94 <HAL_TIM_Base_MspInit+0xa8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d116      	bne.n	8001b2c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	4b25      	ldr	r3, [pc, #148]	; (8001b98 <HAL_TIM_Base_MspInit+0xac>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	4a24      	ldr	r2, [pc, #144]	; (8001b98 <HAL_TIM_Base_MspInit+0xac>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0e:	4b22      	ldr	r3, [pc, #136]	; (8001b98 <HAL_TIM_Base_MspInit+0xac>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	2019      	movs	r0, #25
 8001b20:	f000 fe0d 	bl	800273e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b24:	2019      	movs	r0, #25
 8001b26:	f000 fe26 	bl	8002776 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001b2a:	e02e      	b.n	8001b8a <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b34:	d10e      	bne.n	8001b54 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <HAL_TIM_Base_MspInit+0xac>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	4a16      	ldr	r2, [pc, #88]	; (8001b98 <HAL_TIM_Base_MspInit+0xac>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6413      	str	r3, [r2, #64]	; 0x40
 8001b46:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <HAL_TIM_Base_MspInit+0xac>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	693b      	ldr	r3, [r7, #16]
}
 8001b52:	e01a      	b.n	8001b8a <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM8)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a10      	ldr	r2, [pc, #64]	; (8001b9c <HAL_TIM_Base_MspInit+0xb0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d115      	bne.n	8001b8a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <HAL_TIM_Base_MspInit+0xac>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	4a0c      	ldr	r2, [pc, #48]	; (8001b98 <HAL_TIM_Base_MspInit+0xac>)
 8001b68:	f043 0302 	orr.w	r3, r3, #2
 8001b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <HAL_TIM_Base_MspInit+0xac>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	202c      	movs	r0, #44	; 0x2c
 8001b80:	f000 fddd 	bl	800273e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001b84:	202c      	movs	r0, #44	; 0x2c
 8001b86:	f000 fdf6 	bl	8002776 <HAL_NVIC_EnableIRQ>
}
 8001b8a:	bf00      	nop
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40010000 	.word	0x40010000
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40010400 	.word	0x40010400

08001ba0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	; 0x28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a33      	ldr	r2, [pc, #204]	; (8001c8c <HAL_TIM_MspPostInit+0xec>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d13d      	bne.n	8001c3e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	4b32      	ldr	r3, [pc, #200]	; (8001c90 <HAL_TIM_MspPostInit+0xf0>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a31      	ldr	r2, [pc, #196]	; (8001c90 <HAL_TIM_MspPostInit+0xf0>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b2f      	ldr	r3, [pc, #188]	; (8001c90 <HAL_TIM_MspPostInit+0xf0>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	4b2b      	ldr	r3, [pc, #172]	; (8001c90 <HAL_TIM_MspPostInit+0xf0>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	4a2a      	ldr	r2, [pc, #168]	; (8001c90 <HAL_TIM_MspPostInit+0xf0>)
 8001be8:	f043 0302 	orr.w	r3, r3, #2
 8001bec:	6313      	str	r3, [r2, #48]	; 0x30
 8001bee:	4b28      	ldr	r3, [pc, #160]	; (8001c90 <HAL_TIM_MspPostInit+0xf0>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = AL_Pin|AH_Pin|BH_Pin|CH_Pin;
 8001bfa:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	4619      	mov	r1, r3
 8001c16:	481f      	ldr	r0, [pc, #124]	; (8001c94 <HAL_TIM_MspPostInit+0xf4>)
 8001c18:	f000 fde4 	bl	80027e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BL_Pin|CL_Pin;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	4619      	mov	r1, r3
 8001c36:	4818      	ldr	r0, [pc, #96]	; (8001c98 <HAL_TIM_MspPostInit+0xf8>)
 8001c38:	f000 fdd4 	bl	80027e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c3c:	e022      	b.n	8001c84 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM2)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c46:	d11d      	bne.n	8001c84 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <HAL_TIM_MspPostInit+0xf0>)
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c50:	4a0f      	ldr	r2, [pc, #60]	; (8001c90 <HAL_TIM_MspPostInit+0xf0>)
 8001c52:	f043 0302 	orr.w	r3, r3, #2
 8001c56:	6313      	str	r3, [r2, #48]	; 0x30
 8001c58:	4b0d      	ldr	r3, [pc, #52]	; (8001c90 <HAL_TIM_MspPostInit+0xf0>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LED_Pin;
 8001c64:	2304      	movs	r3, #4
 8001c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c70:	2300      	movs	r3, #0
 8001c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c74:	2301      	movs	r3, #1
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4806      	ldr	r0, [pc, #24]	; (8001c98 <HAL_TIM_MspPostInit+0xf8>)
 8001c80:	f000 fdb0 	bl	80027e4 <HAL_GPIO_Init>
}
 8001c84:	bf00      	nop
 8001c86:	3728      	adds	r7, #40	; 0x28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40010000 	.word	0x40010000
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40020000 	.word	0x40020000
 8001c98:	40020400 	.word	0x40020400

08001c9c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001ca2:	4a12      	ldr	r2, [pc, #72]	; (8001cec <MX_USART2_UART_Init+0x50>)
 8001ca4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cd2:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cd4:	f002 fcc5 	bl	8004662 <HAL_UART_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cde:	f7ff fc51 	bl	8001584 <Error_Handler>
  }

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20004228 	.word	0x20004228
 8001cec:	40004400 	.word	0x40004400

08001cf0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a19      	ldr	r2, [pc, #100]	; (8001d74 <HAL_UART_MspInit+0x84>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d12b      	bne.n	8001d6a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <HAL_UART_MspInit+0x88>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	4a17      	ldr	r2, [pc, #92]	; (8001d78 <HAL_UART_MspInit+0x88>)
 8001d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d20:	6413      	str	r3, [r2, #64]	; 0x40
 8001d22:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <HAL_UART_MspInit+0x88>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <HAL_UART_MspInit+0x88>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a10      	ldr	r2, [pc, #64]	; (8001d78 <HAL_UART_MspInit+0x88>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <HAL_UART_MspInit+0x88>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = ControlBus_TX_Pin|ControlBus_RX_Pin;
 8001d4a:	230c      	movs	r3, #12
 8001d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d52:	2301      	movs	r3, #1
 8001d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d56:	2303      	movs	r3, #3
 8001d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d5a:	2307      	movs	r3, #7
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5e:	f107 0314 	add.w	r3, r7, #20
 8001d62:	4619      	mov	r1, r3
 8001d64:	4805      	ldr	r0, [pc, #20]	; (8001d7c <HAL_UART_MspInit+0x8c>)
 8001d66:	f000 fd3d 	bl	80027e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d6a:	bf00      	nop
 8001d6c:	3728      	adds	r7, #40	; 0x28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40004400 	.word	0x40004400
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40020000 	.word	0x40020000

08001d80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d86:	e003      	b.n	8001d90 <LoopCopyDataInit>

08001d88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d8e:	3104      	adds	r1, #4

08001d90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d90:	480b      	ldr	r0, [pc, #44]	; (8001dc0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d92:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d98:	d3f6      	bcc.n	8001d88 <CopyDataInit>
  ldr  r2, =_sbss
 8001d9a:	4a0b      	ldr	r2, [pc, #44]	; (8001dc8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d9c:	e002      	b.n	8001da4 <LoopFillZerobss>

08001d9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001da0:	f842 3b04 	str.w	r3, [r2], #4

08001da4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001da6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001da8:	d3f9      	bcc.n	8001d9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001daa:	f7ff fd0b 	bl	80017c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dae:	f004 f98d 	bl	80060cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001db2:	f7ff fb4b 	bl	800144c <main>
  bx  lr    
 8001db6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001db8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001dbc:	08006340 	.word	0x08006340
  ldr  r0, =_sdata
 8001dc0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001dc4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001dc8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001dcc:	2000426c 	.word	0x2000426c

08001dd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dd0:	e7fe      	b.n	8001dd0 <ADC_IRQHandler>
	...

08001dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <HAL_Init+0x40>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a0d      	ldr	r2, [pc, #52]	; (8001e14 <HAL_Init+0x40>)
 8001dde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001de2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <HAL_Init+0x40>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <HAL_Init+0x40>)
 8001dea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df0:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <HAL_Init+0x40>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a07      	ldr	r2, [pc, #28]	; (8001e14 <HAL_Init+0x40>)
 8001df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dfc:	2003      	movs	r0, #3
 8001dfe:	f000 fc93 	bl	8002728 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e02:	2000      	movs	r0, #0
 8001e04:	f000 f808 	bl	8001e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e08:	f7ff fc72 	bl	80016f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40023c00 	.word	0x40023c00

08001e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e20:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_InitTick+0x54>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <HAL_InitTick+0x58>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 fcab 	bl	8002792 <HAL_SYSTICK_Config>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e00e      	b.n	8001e64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b0f      	cmp	r3, #15
 8001e4a:	d80a      	bhi.n	8001e62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	f04f 30ff 	mov.w	r0, #4294967295
 8001e54:	f000 fc73 	bl	800273e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e58:	4a06      	ldr	r2, [pc, #24]	; (8001e74 <HAL_InitTick+0x5c>)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	e000      	b.n	8001e64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	20000008 	.word	0x20000008
 8001e74:	20000004 	.word	0x20000004

08001e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_IncTick+0x20>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_IncTick+0x24>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4413      	add	r3, r2
 8001e88:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <HAL_IncTick+0x24>)
 8001e8a:	6013      	str	r3, [r2, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	20000008 	.word	0x20000008
 8001e9c:	20004268 	.word	0x20004268

08001ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea4:	4b03      	ldr	r3, [pc, #12]	; (8001eb4 <HAL_GetTick+0x14>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20004268 	.word	0x20004268

08001eb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec0:	f7ff ffee 	bl	8001ea0 <HAL_GetTick>
 8001ec4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed0:	d005      	beq.n	8001ede <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <HAL_Delay+0x40>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4413      	add	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ede:	bf00      	nop
 8001ee0:	f7ff ffde 	bl	8001ea0 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d8f7      	bhi.n	8001ee0 <HAL_Delay+0x28>
  {
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000008 	.word	0x20000008

08001efc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e033      	b.n	8001f7a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d109      	bne.n	8001f2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff f8d8 	bl	80010d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f003 0310 	and.w	r3, r3, #16
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d118      	bne.n	8001f6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f42:	f023 0302 	bic.w	r3, r3, #2
 8001f46:	f043 0202 	orr.w	r2, r3, #2
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 fa1e 	bl	8002390 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f023 0303 	bic.w	r3, r3, #3
 8001f62:	f043 0201 	orr.w	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	641a      	str	r2, [r3, #64]	; 0x40
 8001f6a:	e001      	b.n	8001f70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d101      	bne.n	8001f9e <HAL_ADC_Start+0x1a>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e0a5      	b.n	80020ea <HAL_ADC_Start+0x166>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d018      	beq.n	8001fe6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0201 	orr.w	r2, r2, #1
 8001fc2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fc4:	4b4c      	ldr	r3, [pc, #304]	; (80020f8 <HAL_ADC_Start+0x174>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a4c      	ldr	r2, [pc, #304]	; (80020fc <HAL_ADC_Start+0x178>)
 8001fca:	fba2 2303 	umull	r2, r3, r2, r3
 8001fce:	0c9a      	lsrs	r2, r3, #18
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4413      	add	r3, r2
 8001fd6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001fd8:	e002      	b.n	8001fe0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f9      	bne.n	8001fda <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d179      	bne.n	80020e8 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ffc:	f023 0301 	bic.w	r3, r3, #1
 8002000:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002012:	2b00      	cmp	r3, #0
 8002014:	d007      	beq.n	8002026 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800201e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800202e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002032:	d106      	bne.n	8002042 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002038:	f023 0206 	bic.w	r2, r3, #6
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	645a      	str	r2, [r3, #68]	; 0x44
 8002040:	e002      	b.n	8002048 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002050:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <HAL_ADC_Start+0x17c>)
 8002052:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800205c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 031f 	and.w	r3, r3, #31
 8002066:	2b00      	cmp	r3, #0
 8002068:	d12a      	bne.n	80020c0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a25      	ldr	r2, [pc, #148]	; (8002104 <HAL_ADC_Start+0x180>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d015      	beq.n	80020a0 <HAL_ADC_Start+0x11c>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a23      	ldr	r2, [pc, #140]	; (8002108 <HAL_ADC_Start+0x184>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d105      	bne.n	800208a <HAL_ADC_Start+0x106>
 800207e:	4b20      	ldr	r3, [pc, #128]	; (8002100 <HAL_ADC_Start+0x17c>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 031f 	and.w	r3, r3, #31
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a1f      	ldr	r2, [pc, #124]	; (800210c <HAL_ADC_Start+0x188>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d129      	bne.n	80020e8 <HAL_ADC_Start+0x164>
 8002094:	4b1a      	ldr	r3, [pc, #104]	; (8002100 <HAL_ADC_Start+0x17c>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 031f 	and.w	r3, r3, #31
 800209c:	2b0f      	cmp	r3, #15
 800209e:	d823      	bhi.n	80020e8 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d11c      	bne.n	80020e8 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020bc:	609a      	str	r2, [r3, #8]
 80020be:	e013      	b.n	80020e8 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a0f      	ldr	r2, [pc, #60]	; (8002104 <HAL_ADC_Start+0x180>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d10e      	bne.n	80020e8 <HAL_ADC_Start+0x164>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d107      	bne.n	80020e8 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020e6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	20000000 	.word	0x20000000
 80020fc:	431bde83 	.word	0x431bde83
 8002100:	40012300 	.word	0x40012300
 8002104:	40012000 	.word	0x40012000
 8002108:	40012100 	.word	0x40012100
 800210c:	40012200 	.word	0x40012200

08002110 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800211e:	4618      	mov	r0, r3
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
	...

0800212c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x1c>
 8002144:	2302      	movs	r3, #2
 8002146:	e113      	b.n	8002370 <HAL_ADC_ConfigChannel+0x244>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b09      	cmp	r3, #9
 8002156:	d925      	bls.n	80021a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68d9      	ldr	r1, [r3, #12]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	b29b      	uxth	r3, r3
 8002164:	461a      	mov	r2, r3
 8002166:	4613      	mov	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	3b1e      	subs	r3, #30
 800216e:	2207      	movs	r2, #7
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43da      	mvns	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	400a      	ands	r2, r1
 800217c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68d9      	ldr	r1, [r3, #12]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	b29b      	uxth	r3, r3
 800218e:	4618      	mov	r0, r3
 8002190:	4603      	mov	r3, r0
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	4403      	add	r3, r0
 8002196:	3b1e      	subs	r3, #30
 8002198:	409a      	lsls	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	e022      	b.n	80021ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6919      	ldr	r1, [r3, #16]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	461a      	mov	r2, r3
 80021b2:	4613      	mov	r3, r2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	4413      	add	r3, r2
 80021b8:	2207      	movs	r2, #7
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43da      	mvns	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	400a      	ands	r2, r1
 80021c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6919      	ldr	r1, [r3, #16]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	4618      	mov	r0, r3
 80021da:	4603      	mov	r3, r0
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	4403      	add	r3, r0
 80021e0:	409a      	lsls	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b06      	cmp	r3, #6
 80021f0:	d824      	bhi.n	800223c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	3b05      	subs	r3, #5
 8002204:	221f      	movs	r2, #31
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43da      	mvns	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	400a      	ands	r2, r1
 8002212:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	b29b      	uxth	r3, r3
 8002220:	4618      	mov	r0, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	3b05      	subs	r3, #5
 800222e:	fa00 f203 	lsl.w	r2, r0, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	635a      	str	r2, [r3, #52]	; 0x34
 800223a:	e04c      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b0c      	cmp	r3, #12
 8002242:	d824      	bhi.n	800228e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	3b23      	subs	r3, #35	; 0x23
 8002256:	221f      	movs	r2, #31
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43da      	mvns	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	400a      	ands	r2, r1
 8002264:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	b29b      	uxth	r3, r3
 8002272:	4618      	mov	r0, r3
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	3b23      	subs	r3, #35	; 0x23
 8002280:	fa00 f203 	lsl.w	r2, r0, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	631a      	str	r2, [r3, #48]	; 0x30
 800228c:	e023      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	3b41      	subs	r3, #65	; 0x41
 80022a0:	221f      	movs	r2, #31
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43da      	mvns	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	400a      	ands	r2, r1
 80022ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	4618      	mov	r0, r3
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	3b41      	subs	r3, #65	; 0x41
 80022ca:	fa00 f203 	lsl.w	r2, r0, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022d6:	4b29      	ldr	r3, [pc, #164]	; (800237c <HAL_ADC_ConfigChannel+0x250>)
 80022d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a28      	ldr	r2, [pc, #160]	; (8002380 <HAL_ADC_ConfigChannel+0x254>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d10f      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x1d8>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b12      	cmp	r3, #18
 80022ea:	d10b      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a1d      	ldr	r2, [pc, #116]	; (8002380 <HAL_ADC_ConfigChannel+0x254>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d12b      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x23a>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a1c      	ldr	r2, [pc, #112]	; (8002384 <HAL_ADC_ConfigChannel+0x258>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d003      	beq.n	8002320 <HAL_ADC_ConfigChannel+0x1f4>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b11      	cmp	r3, #17
 800231e:	d122      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a11      	ldr	r2, [pc, #68]	; (8002384 <HAL_ADC_ConfigChannel+0x258>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d111      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002342:	4b11      	ldr	r3, [pc, #68]	; (8002388 <HAL_ADC_ConfigChannel+0x25c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a11      	ldr	r2, [pc, #68]	; (800238c <HAL_ADC_ConfigChannel+0x260>)
 8002348:	fba2 2303 	umull	r2, r3, r2, r3
 800234c:	0c9a      	lsrs	r2, r3, #18
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002358:	e002      	b.n	8002360 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	3b01      	subs	r3, #1
 800235e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f9      	bne.n	800235a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	40012300 	.word	0x40012300
 8002380:	40012000 	.word	0x40012000
 8002384:	10000012 	.word	0x10000012
 8002388:	20000000 	.word	0x20000000
 800238c:	431bde83 	.word	0x431bde83

08002390 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002398:	4b79      	ldr	r3, [pc, #484]	; (8002580 <ADC_Init+0x1f0>)
 800239a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	431a      	orrs	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6859      	ldr	r1, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	021a      	lsls	r2, r3, #8
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6859      	ldr	r1, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800240a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6899      	ldr	r1, [r3, #8]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68da      	ldr	r2, [r3, #12]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002422:	4a58      	ldr	r2, [pc, #352]	; (8002584 <ADC_Init+0x1f4>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d022      	beq.n	800246e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002436:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6899      	ldr	r1, [r3, #8]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002458:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6899      	ldr	r1, [r3, #8]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	e00f      	b.n	800248e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800247c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800248c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0202 	bic.w	r2, r2, #2
 800249c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6899      	ldr	r1, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	7e1b      	ldrb	r3, [r3, #24]
 80024a8:	005a      	lsls	r2, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d01b      	beq.n	80024f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6859      	ldr	r1, [r3, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	3b01      	subs	r3, #1
 80024e8:	035a      	lsls	r2, r3, #13
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	e007      	b.n	8002504 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002502:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002512:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	3b01      	subs	r3, #1
 8002520:	051a      	lsls	r2, r3, #20
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002538:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6899      	ldr	r1, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002546:	025a      	lsls	r2, r3, #9
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800255e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6899      	ldr	r1, [r3, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	029a      	lsls	r2, r3, #10
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	609a      	str	r2, [r3, #8]
}
 8002574:	bf00      	nop
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	40012300 	.word	0x40012300
 8002584:	0f000001 	.word	0x0f000001

08002588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002598:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <__NVIC_SetPriorityGrouping+0x44>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025a4:	4013      	ands	r3, r2
 80025a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ba:	4a04      	ldr	r2, [pc, #16]	; (80025cc <__NVIC_SetPriorityGrouping+0x44>)
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	60d3      	str	r3, [r2, #12]
}
 80025c0:	bf00      	nop
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025d4:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <__NVIC_GetPriorityGrouping+0x18>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	0a1b      	lsrs	r3, r3, #8
 80025da:	f003 0307 	and.w	r3, r3, #7
}
 80025de:	4618      	mov	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	db0b      	blt.n	8002616 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	f003 021f 	and.w	r2, r3, #31
 8002604:	4907      	ldr	r1, [pc, #28]	; (8002624 <__NVIC_EnableIRQ+0x38>)
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	2001      	movs	r0, #1
 800260e:	fa00 f202 	lsl.w	r2, r0, r2
 8002612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	e000e100 	.word	0xe000e100

08002628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	6039      	str	r1, [r7, #0]
 8002632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002638:	2b00      	cmp	r3, #0
 800263a:	db0a      	blt.n	8002652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	b2da      	uxtb	r2, r3
 8002640:	490c      	ldr	r1, [pc, #48]	; (8002674 <__NVIC_SetPriority+0x4c>)
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	0112      	lsls	r2, r2, #4
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	440b      	add	r3, r1
 800264c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002650:	e00a      	b.n	8002668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4908      	ldr	r1, [pc, #32]	; (8002678 <__NVIC_SetPriority+0x50>)
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	3b04      	subs	r3, #4
 8002660:	0112      	lsls	r2, r2, #4
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	440b      	add	r3, r1
 8002666:	761a      	strb	r2, [r3, #24]
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000e100 	.word	0xe000e100
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800267c:	b480      	push	{r7}
 800267e:	b089      	sub	sp, #36	; 0x24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f1c3 0307 	rsb	r3, r3, #7
 8002696:	2b04      	cmp	r3, #4
 8002698:	bf28      	it	cs
 800269a:	2304      	movcs	r3, #4
 800269c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3304      	adds	r3, #4
 80026a2:	2b06      	cmp	r3, #6
 80026a4:	d902      	bls.n	80026ac <NVIC_EncodePriority+0x30>
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3b03      	subs	r3, #3
 80026aa:	e000      	b.n	80026ae <NVIC_EncodePriority+0x32>
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b0:	f04f 32ff 	mov.w	r2, #4294967295
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43da      	mvns	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	401a      	ands	r2, r3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026c4:	f04f 31ff 	mov.w	r1, #4294967295
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	fa01 f303 	lsl.w	r3, r1, r3
 80026ce:	43d9      	mvns	r1, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d4:	4313      	orrs	r3, r2
         );
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3724      	adds	r7, #36	; 0x24
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
	...

080026e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026f4:	d301      	bcc.n	80026fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026f6:	2301      	movs	r3, #1
 80026f8:	e00f      	b.n	800271a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026fa:	4a0a      	ldr	r2, [pc, #40]	; (8002724 <SysTick_Config+0x40>)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3b01      	subs	r3, #1
 8002700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002702:	210f      	movs	r1, #15
 8002704:	f04f 30ff 	mov.w	r0, #4294967295
 8002708:	f7ff ff8e 	bl	8002628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800270c:	4b05      	ldr	r3, [pc, #20]	; (8002724 <SysTick_Config+0x40>)
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002712:	4b04      	ldr	r3, [pc, #16]	; (8002724 <SysTick_Config+0x40>)
 8002714:	2207      	movs	r2, #7
 8002716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	e000e010 	.word	0xe000e010

08002728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7ff ff29 	bl	8002588 <__NVIC_SetPriorityGrouping>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800273e:	b580      	push	{r7, lr}
 8002740:	b086      	sub	sp, #24
 8002742:	af00      	add	r7, sp, #0
 8002744:	4603      	mov	r3, r0
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	607a      	str	r2, [r7, #4]
 800274a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002750:	f7ff ff3e 	bl	80025d0 <__NVIC_GetPriorityGrouping>
 8002754:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	68b9      	ldr	r1, [r7, #8]
 800275a:	6978      	ldr	r0, [r7, #20]
 800275c:	f7ff ff8e 	bl	800267c <NVIC_EncodePriority>
 8002760:	4602      	mov	r2, r0
 8002762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002766:	4611      	mov	r1, r2
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff ff5d 	bl	8002628 <__NVIC_SetPriority>
}
 800276e:	bf00      	nop
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	4603      	mov	r3, r0
 800277e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff ff31 	bl	80025ec <__NVIC_EnableIRQ>
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff ffa2 	bl	80026e4 <SysTick_Config>
 80027a0:	4603      	mov	r3, r0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e00e      	b.n	80027da <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	795b      	ldrb	r3, [r3, #5]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d105      	bne.n	80027d2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7fe fd53 	bl	8001278 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b089      	sub	sp, #36	; 0x24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027fa:	2300      	movs	r3, #0
 80027fc:	61fb      	str	r3, [r7, #28]
 80027fe:	e165      	b.n	8002acc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002800:	2201      	movs	r2, #1
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	4013      	ands	r3, r2
 8002812:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	429a      	cmp	r2, r3
 800281a:	f040 8154 	bne.w	8002ac6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d00b      	beq.n	800283e <HAL_GPIO_Init+0x5a>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d007      	beq.n	800283e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002832:	2b11      	cmp	r3, #17
 8002834:	d003      	beq.n	800283e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b12      	cmp	r3, #18
 800283c:	d130      	bne.n	80028a0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	2203      	movs	r2, #3
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002874:	2201      	movs	r2, #1
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f003 0201 	and.w	r2, r3, #1
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	2203      	movs	r2, #3
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d003      	beq.n	80028e0 <HAL_GPIO_Init+0xfc>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b12      	cmp	r3, #18
 80028de:	d123      	bne.n	8002928 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	08da      	lsrs	r2, r3, #3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3208      	adds	r2, #8
 80028e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	220f      	movs	r2, #15
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	691a      	ldr	r2, [r3, #16]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4313      	orrs	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	08da      	lsrs	r2, r3, #3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3208      	adds	r2, #8
 8002922:	69b9      	ldr	r1, [r7, #24]
 8002924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	2203      	movs	r2, #3
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 0203 	and.w	r2, r3, #3
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 80ae 	beq.w	8002ac6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	4b5c      	ldr	r3, [pc, #368]	; (8002ae0 <HAL_GPIO_Init+0x2fc>)
 8002970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002972:	4a5b      	ldr	r2, [pc, #364]	; (8002ae0 <HAL_GPIO_Init+0x2fc>)
 8002974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002978:	6453      	str	r3, [r2, #68]	; 0x44
 800297a:	4b59      	ldr	r3, [pc, #356]	; (8002ae0 <HAL_GPIO_Init+0x2fc>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002986:	4a57      	ldr	r2, [pc, #348]	; (8002ae4 <HAL_GPIO_Init+0x300>)
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	089b      	lsrs	r3, r3, #2
 800298c:	3302      	adds	r3, #2
 800298e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002992:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	220f      	movs	r2, #15
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a4e      	ldr	r2, [pc, #312]	; (8002ae8 <HAL_GPIO_Init+0x304>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d025      	beq.n	80029fe <HAL_GPIO_Init+0x21a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a4d      	ldr	r2, [pc, #308]	; (8002aec <HAL_GPIO_Init+0x308>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d01f      	beq.n	80029fa <HAL_GPIO_Init+0x216>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a4c      	ldr	r2, [pc, #304]	; (8002af0 <HAL_GPIO_Init+0x30c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d019      	beq.n	80029f6 <HAL_GPIO_Init+0x212>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a4b      	ldr	r2, [pc, #300]	; (8002af4 <HAL_GPIO_Init+0x310>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d013      	beq.n	80029f2 <HAL_GPIO_Init+0x20e>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a4a      	ldr	r2, [pc, #296]	; (8002af8 <HAL_GPIO_Init+0x314>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d00d      	beq.n	80029ee <HAL_GPIO_Init+0x20a>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a49      	ldr	r2, [pc, #292]	; (8002afc <HAL_GPIO_Init+0x318>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d007      	beq.n	80029ea <HAL_GPIO_Init+0x206>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a48      	ldr	r2, [pc, #288]	; (8002b00 <HAL_GPIO_Init+0x31c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d101      	bne.n	80029e6 <HAL_GPIO_Init+0x202>
 80029e2:	2306      	movs	r3, #6
 80029e4:	e00c      	b.n	8002a00 <HAL_GPIO_Init+0x21c>
 80029e6:	2307      	movs	r3, #7
 80029e8:	e00a      	b.n	8002a00 <HAL_GPIO_Init+0x21c>
 80029ea:	2305      	movs	r3, #5
 80029ec:	e008      	b.n	8002a00 <HAL_GPIO_Init+0x21c>
 80029ee:	2304      	movs	r3, #4
 80029f0:	e006      	b.n	8002a00 <HAL_GPIO_Init+0x21c>
 80029f2:	2303      	movs	r3, #3
 80029f4:	e004      	b.n	8002a00 <HAL_GPIO_Init+0x21c>
 80029f6:	2302      	movs	r3, #2
 80029f8:	e002      	b.n	8002a00 <HAL_GPIO_Init+0x21c>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <HAL_GPIO_Init+0x21c>
 80029fe:	2300      	movs	r3, #0
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	f002 0203 	and.w	r2, r2, #3
 8002a06:	0092      	lsls	r2, r2, #2
 8002a08:	4093      	lsls	r3, r2
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a10:	4934      	ldr	r1, [pc, #208]	; (8002ae4 <HAL_GPIO_Init+0x300>)
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	089b      	lsrs	r3, r3, #2
 8002a16:	3302      	adds	r3, #2
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a1e:	4b39      	ldr	r3, [pc, #228]	; (8002b04 <HAL_GPIO_Init+0x320>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a42:	4a30      	ldr	r2, [pc, #192]	; (8002b04 <HAL_GPIO_Init+0x320>)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a48:	4b2e      	ldr	r3, [pc, #184]	; (8002b04 <HAL_GPIO_Init+0x320>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a6c:	4a25      	ldr	r2, [pc, #148]	; (8002b04 <HAL_GPIO_Init+0x320>)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a72:	4b24      	ldr	r3, [pc, #144]	; (8002b04 <HAL_GPIO_Init+0x320>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a96:	4a1b      	ldr	r2, [pc, #108]	; (8002b04 <HAL_GPIO_Init+0x320>)
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a9c:	4b19      	ldr	r3, [pc, #100]	; (8002b04 <HAL_GPIO_Init+0x320>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ac0:	4a10      	ldr	r2, [pc, #64]	; (8002b04 <HAL_GPIO_Init+0x320>)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	61fb      	str	r3, [r7, #28]
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	2b0f      	cmp	r3, #15
 8002ad0:	f67f ae96 	bls.w	8002800 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	3724      	adds	r7, #36	; 0x24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	40013800 	.word	0x40013800
 8002ae8:	40020000 	.word	0x40020000
 8002aec:	40020400 	.word	0x40020400
 8002af0:	40020800 	.word	0x40020800
 8002af4:	40020c00 	.word	0x40020c00
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40021400 	.word	0x40021400
 8002b00:	40021800 	.word	0x40021800
 8002b04:	40013c00 	.word	0x40013c00

08002b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	807b      	strh	r3, [r7, #2]
 8002b14:	4613      	mov	r3, r2
 8002b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b18:	787b      	ldrb	r3, [r7, #1]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b1e:	887a      	ldrh	r2, [r7, #2]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b24:	e003      	b.n	8002b2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b26:	887b      	ldrh	r3, [r7, #2]
 8002b28:	041a      	lsls	r2, r3, #16
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	619a      	str	r2, [r3, #24]
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	460b      	mov	r3, r1
 8002b44:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	695a      	ldr	r2, [r3, #20]
 8002b4a:	887b      	ldrh	r3, [r7, #2]
 8002b4c:	401a      	ands	r2, r3
 8002b4e:	887b      	ldrh	r3, [r7, #2]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d104      	bne.n	8002b5e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b54:	887b      	ldrh	r3, [r7, #2]
 8002b56:	041a      	lsls	r2, r3, #16
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002b5c:	e002      	b.n	8002b64 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002b5e:	887a      	ldrh	r2, [r7, #2]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	619a      	str	r2, [r3, #24]
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	603b      	str	r3, [r7, #0]
 8002b7e:	4b20      	ldr	r3, [pc, #128]	; (8002c00 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	4a1f      	ldr	r2, [pc, #124]	; (8002c00 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b88:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8a:	4b1d      	ldr	r3, [pc, #116]	; (8002c00 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b96:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <HAL_PWREx_EnableOverDrive+0x94>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b9c:	f7ff f980 	bl	8001ea0 <HAL_GetTick>
 8002ba0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ba2:	e009      	b.n	8002bb8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ba4:	f7ff f97c 	bl	8001ea0 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bb2:	d901      	bls.n	8002bb8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e01f      	b.n	8002bf8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bb8:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <HAL_PWREx_EnableOverDrive+0x98>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc4:	d1ee      	bne.n	8002ba4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002bc6:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bcc:	f7ff f968 	bl	8001ea0 <HAL_GetTick>
 8002bd0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bd2:	e009      	b.n	8002be8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bd4:	f7ff f964 	bl	8001ea0 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002be2:	d901      	bls.n	8002be8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e007      	b.n	8002bf8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002be8:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <HAL_PWREx_EnableOverDrive+0x98>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bf4:	d1ee      	bne.n	8002bd4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40023800 	.word	0x40023800
 8002c04:	420e0040 	.word	0x420e0040
 8002c08:	40007000 	.word	0x40007000
 8002c0c:	420e0044 	.word	0x420e0044

08002c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0cc      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c24:	4b68      	ldr	r3, [pc, #416]	; (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d90c      	bls.n	8002c4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c32:	4b65      	ldr	r3, [pc, #404]	; (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3a:	4b63      	ldr	r3, [pc, #396]	; (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d001      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0b8      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d020      	beq.n	8002c9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c64:	4b59      	ldr	r3, [pc, #356]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	4a58      	ldr	r2, [pc, #352]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0308 	and.w	r3, r3, #8
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d005      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c7c:	4b53      	ldr	r3, [pc, #332]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	4a52      	ldr	r2, [pc, #328]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c88:	4b50      	ldr	r3, [pc, #320]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	494d      	ldr	r1, [pc, #308]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d044      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d107      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cae:	4b47      	ldr	r3, [pc, #284]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d119      	bne.n	8002cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e07f      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d003      	beq.n	8002cce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	d107      	bne.n	8002cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cce:	4b3f      	ldr	r3, [pc, #252]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d109      	bne.n	8002cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e06f      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cde:	4b3b      	ldr	r3, [pc, #236]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e067      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cee:	4b37      	ldr	r3, [pc, #220]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f023 0203 	bic.w	r2, r3, #3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	4934      	ldr	r1, [pc, #208]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d00:	f7ff f8ce 	bl	8001ea0 <HAL_GetTick>
 8002d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d08:	f7ff f8ca 	bl	8001ea0 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e04f      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1e:	4b2b      	ldr	r3, [pc, #172]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 020c 	and.w	r2, r3, #12
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d1eb      	bne.n	8002d08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d30:	4b25      	ldr	r3, [pc, #148]	; (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d20c      	bcs.n	8002d58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3e:	4b22      	ldr	r3, [pc, #136]	; (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d46:	4b20      	ldr	r3, [pc, #128]	; (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d001      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e032      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d64:	4b19      	ldr	r3, [pc, #100]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	4916      	ldr	r1, [pc, #88]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d009      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d82:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	490e      	ldr	r1, [pc, #56]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d96:	f000 f855 	bl	8002e44 <HAL_RCC_GetSysClockFreq>
 8002d9a:	4601      	mov	r1, r0
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	091b      	lsrs	r3, r3, #4
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	4a0a      	ldr	r2, [pc, #40]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002da8:	5cd3      	ldrb	r3, [r2, r3]
 8002daa:	fa21 f303 	lsr.w	r3, r1, r3
 8002dae:	4a09      	ldr	r2, [pc, #36]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002db2:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff f82e 	bl	8001e18 <HAL_InitTick>

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40023c00 	.word	0x40023c00
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	08006140 	.word	0x08006140
 8002dd4:	20000000 	.word	0x20000000
 8002dd8:	20000004 	.word	0x20000004

08002ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002de0:	4b03      	ldr	r3, [pc, #12]	; (8002df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002de2:	681b      	ldr	r3, [r3, #0]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	20000000 	.word	0x20000000

08002df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002df8:	f7ff fff0 	bl	8002ddc <HAL_RCC_GetHCLKFreq>
 8002dfc:	4601      	mov	r1, r0
 8002dfe:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	0a9b      	lsrs	r3, r3, #10
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	4a03      	ldr	r2, [pc, #12]	; (8002e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e0a:	5cd3      	ldrb	r3, [r2, r3]
 8002e0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40023800 	.word	0x40023800
 8002e18:	08006150 	.word	0x08006150

08002e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e20:	f7ff ffdc 	bl	8002ddc <HAL_RCC_GetHCLKFreq>
 8002e24:	4601      	mov	r1, r0
 8002e26:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	0b5b      	lsrs	r3, r3, #13
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	4a03      	ldr	r2, [pc, #12]	; (8002e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e32:	5cd3      	ldrb	r3, [r2, r3]
 8002e34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	08006150 	.word	0x08006150

08002e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e46:	b087      	sub	sp, #28
 8002e48:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e5e:	4bc6      	ldr	r3, [pc, #792]	; (8003178 <HAL_RCC_GetSysClockFreq+0x334>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 030c 	and.w	r3, r3, #12
 8002e66:	2b0c      	cmp	r3, #12
 8002e68:	f200 817e 	bhi.w	8003168 <HAL_RCC_GetSysClockFreq+0x324>
 8002e6c:	a201      	add	r2, pc, #4	; (adr r2, 8002e74 <HAL_RCC_GetSysClockFreq+0x30>)
 8002e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e72:	bf00      	nop
 8002e74:	08002ea9 	.word	0x08002ea9
 8002e78:	08003169 	.word	0x08003169
 8002e7c:	08003169 	.word	0x08003169
 8002e80:	08003169 	.word	0x08003169
 8002e84:	08002eaf 	.word	0x08002eaf
 8002e88:	08003169 	.word	0x08003169
 8002e8c:	08003169 	.word	0x08003169
 8002e90:	08003169 	.word	0x08003169
 8002e94:	08002eb5 	.word	0x08002eb5
 8002e98:	08003169 	.word	0x08003169
 8002e9c:	08003169 	.word	0x08003169
 8002ea0:	08003169 	.word	0x08003169
 8002ea4:	08003011 	.word	0x08003011
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ea8:	4bb4      	ldr	r3, [pc, #720]	; (800317c <HAL_RCC_GetSysClockFreq+0x338>)
 8002eaa:	613b      	str	r3, [r7, #16]
       break;
 8002eac:	e15f      	b.n	800316e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eae:	4bb4      	ldr	r3, [pc, #720]	; (8003180 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002eb0:	613b      	str	r3, [r7, #16]
      break;
 8002eb2:	e15c      	b.n	800316e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb4:	4bb0      	ldr	r3, [pc, #704]	; (8003178 <HAL_RCC_GetSysClockFreq+0x334>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ebc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ebe:	4bae      	ldr	r3, [pc, #696]	; (8003178 <HAL_RCC_GetSysClockFreq+0x334>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d04a      	beq.n	8002f60 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eca:	4bab      	ldr	r3, [pc, #684]	; (8003178 <HAL_RCC_GetSysClockFreq+0x334>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	099b      	lsrs	r3, r3, #6
 8002ed0:	f04f 0400 	mov.w	r4, #0
 8002ed4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ed8:	f04f 0200 	mov.w	r2, #0
 8002edc:	ea03 0501 	and.w	r5, r3, r1
 8002ee0:	ea04 0602 	and.w	r6, r4, r2
 8002ee4:	4629      	mov	r1, r5
 8002ee6:	4632      	mov	r2, r6
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	f04f 0400 	mov.w	r4, #0
 8002ef0:	0154      	lsls	r4, r2, #5
 8002ef2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ef6:	014b      	lsls	r3, r1, #5
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4622      	mov	r2, r4
 8002efc:	1b49      	subs	r1, r1, r5
 8002efe:	eb62 0206 	sbc.w	r2, r2, r6
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	f04f 0400 	mov.w	r4, #0
 8002f0a:	0194      	lsls	r4, r2, #6
 8002f0c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f10:	018b      	lsls	r3, r1, #6
 8002f12:	1a5b      	subs	r3, r3, r1
 8002f14:	eb64 0402 	sbc.w	r4, r4, r2
 8002f18:	f04f 0100 	mov.w	r1, #0
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	00e2      	lsls	r2, r4, #3
 8002f22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f26:	00d9      	lsls	r1, r3, #3
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4614      	mov	r4, r2
 8002f2c:	195b      	adds	r3, r3, r5
 8002f2e:	eb44 0406 	adc.w	r4, r4, r6
 8002f32:	f04f 0100 	mov.w	r1, #0
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	0262      	lsls	r2, r4, #9
 8002f3c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002f40:	0259      	lsls	r1, r3, #9
 8002f42:	460b      	mov	r3, r1
 8002f44:	4614      	mov	r4, r2
 8002f46:	4618      	mov	r0, r3
 8002f48:	4621      	mov	r1, r4
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f04f 0400 	mov.w	r4, #0
 8002f50:	461a      	mov	r2, r3
 8002f52:	4623      	mov	r3, r4
 8002f54:	f7fd fe26 	bl	8000ba4 <__aeabi_uldivmod>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	460c      	mov	r4, r1
 8002f5c:	617b      	str	r3, [r7, #20]
 8002f5e:	e049      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f60:	4b85      	ldr	r3, [pc, #532]	; (8003178 <HAL_RCC_GetSysClockFreq+0x334>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	099b      	lsrs	r3, r3, #6
 8002f66:	f04f 0400 	mov.w	r4, #0
 8002f6a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	ea03 0501 	and.w	r5, r3, r1
 8002f76:	ea04 0602 	and.w	r6, r4, r2
 8002f7a:	4629      	mov	r1, r5
 8002f7c:	4632      	mov	r2, r6
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	f04f 0400 	mov.w	r4, #0
 8002f86:	0154      	lsls	r4, r2, #5
 8002f88:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f8c:	014b      	lsls	r3, r1, #5
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4622      	mov	r2, r4
 8002f92:	1b49      	subs	r1, r1, r5
 8002f94:	eb62 0206 	sbc.w	r2, r2, r6
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	f04f 0400 	mov.w	r4, #0
 8002fa0:	0194      	lsls	r4, r2, #6
 8002fa2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002fa6:	018b      	lsls	r3, r1, #6
 8002fa8:	1a5b      	subs	r3, r3, r1
 8002faa:	eb64 0402 	sbc.w	r4, r4, r2
 8002fae:	f04f 0100 	mov.w	r1, #0
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	00e2      	lsls	r2, r4, #3
 8002fb8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002fbc:	00d9      	lsls	r1, r3, #3
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4614      	mov	r4, r2
 8002fc2:	195b      	adds	r3, r3, r5
 8002fc4:	eb44 0406 	adc.w	r4, r4, r6
 8002fc8:	f04f 0100 	mov.w	r1, #0
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	02a2      	lsls	r2, r4, #10
 8002fd2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002fd6:	0299      	lsls	r1, r3, #10
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4614      	mov	r4, r2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	4621      	mov	r1, r4
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f04f 0400 	mov.w	r4, #0
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4623      	mov	r3, r4
 8002fea:	f7fd fddb 	bl	8000ba4 <__aeabi_uldivmod>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	460c      	mov	r4, r1
 8002ff2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ff4:	4b60      	ldr	r3, [pc, #384]	; (8003178 <HAL_RCC_GetSysClockFreq+0x334>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	0c1b      	lsrs	r3, r3, #16
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	3301      	adds	r3, #1
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	fbb2 f3f3 	udiv	r3, r2, r3
 800300c:	613b      	str	r3, [r7, #16]
      break;
 800300e:	e0ae      	b.n	800316e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003010:	4b59      	ldr	r3, [pc, #356]	; (8003178 <HAL_RCC_GetSysClockFreq+0x334>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003018:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800301a:	4b57      	ldr	r3, [pc, #348]	; (8003178 <HAL_RCC_GetSysClockFreq+0x334>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d04a      	beq.n	80030bc <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003026:	4b54      	ldr	r3, [pc, #336]	; (8003178 <HAL_RCC_GetSysClockFreq+0x334>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	099b      	lsrs	r3, r3, #6
 800302c:	f04f 0400 	mov.w	r4, #0
 8003030:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	ea03 0501 	and.w	r5, r3, r1
 800303c:	ea04 0602 	and.w	r6, r4, r2
 8003040:	4629      	mov	r1, r5
 8003042:	4632      	mov	r2, r6
 8003044:	f04f 0300 	mov.w	r3, #0
 8003048:	f04f 0400 	mov.w	r4, #0
 800304c:	0154      	lsls	r4, r2, #5
 800304e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003052:	014b      	lsls	r3, r1, #5
 8003054:	4619      	mov	r1, r3
 8003056:	4622      	mov	r2, r4
 8003058:	1b49      	subs	r1, r1, r5
 800305a:	eb62 0206 	sbc.w	r2, r2, r6
 800305e:	f04f 0300 	mov.w	r3, #0
 8003062:	f04f 0400 	mov.w	r4, #0
 8003066:	0194      	lsls	r4, r2, #6
 8003068:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800306c:	018b      	lsls	r3, r1, #6
 800306e:	1a5b      	subs	r3, r3, r1
 8003070:	eb64 0402 	sbc.w	r4, r4, r2
 8003074:	f04f 0100 	mov.w	r1, #0
 8003078:	f04f 0200 	mov.w	r2, #0
 800307c:	00e2      	lsls	r2, r4, #3
 800307e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003082:	00d9      	lsls	r1, r3, #3
 8003084:	460b      	mov	r3, r1
 8003086:	4614      	mov	r4, r2
 8003088:	195b      	adds	r3, r3, r5
 800308a:	eb44 0406 	adc.w	r4, r4, r6
 800308e:	f04f 0100 	mov.w	r1, #0
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	0262      	lsls	r2, r4, #9
 8003098:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800309c:	0259      	lsls	r1, r3, #9
 800309e:	460b      	mov	r3, r1
 80030a0:	4614      	mov	r4, r2
 80030a2:	4618      	mov	r0, r3
 80030a4:	4621      	mov	r1, r4
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f04f 0400 	mov.w	r4, #0
 80030ac:	461a      	mov	r2, r3
 80030ae:	4623      	mov	r3, r4
 80030b0:	f7fd fd78 	bl	8000ba4 <__aeabi_uldivmod>
 80030b4:	4603      	mov	r3, r0
 80030b6:	460c      	mov	r4, r1
 80030b8:	617b      	str	r3, [r7, #20]
 80030ba:	e049      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030bc:	4b2e      	ldr	r3, [pc, #184]	; (8003178 <HAL_RCC_GetSysClockFreq+0x334>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	099b      	lsrs	r3, r3, #6
 80030c2:	f04f 0400 	mov.w	r4, #0
 80030c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	ea03 0501 	and.w	r5, r3, r1
 80030d2:	ea04 0602 	and.w	r6, r4, r2
 80030d6:	4629      	mov	r1, r5
 80030d8:	4632      	mov	r2, r6
 80030da:	f04f 0300 	mov.w	r3, #0
 80030de:	f04f 0400 	mov.w	r4, #0
 80030e2:	0154      	lsls	r4, r2, #5
 80030e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030e8:	014b      	lsls	r3, r1, #5
 80030ea:	4619      	mov	r1, r3
 80030ec:	4622      	mov	r2, r4
 80030ee:	1b49      	subs	r1, r1, r5
 80030f0:	eb62 0206 	sbc.w	r2, r2, r6
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	f04f 0400 	mov.w	r4, #0
 80030fc:	0194      	lsls	r4, r2, #6
 80030fe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003102:	018b      	lsls	r3, r1, #6
 8003104:	1a5b      	subs	r3, r3, r1
 8003106:	eb64 0402 	sbc.w	r4, r4, r2
 800310a:	f04f 0100 	mov.w	r1, #0
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	00e2      	lsls	r2, r4, #3
 8003114:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003118:	00d9      	lsls	r1, r3, #3
 800311a:	460b      	mov	r3, r1
 800311c:	4614      	mov	r4, r2
 800311e:	195b      	adds	r3, r3, r5
 8003120:	eb44 0406 	adc.w	r4, r4, r6
 8003124:	f04f 0100 	mov.w	r1, #0
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	02a2      	lsls	r2, r4, #10
 800312e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003132:	0299      	lsls	r1, r3, #10
 8003134:	460b      	mov	r3, r1
 8003136:	4614      	mov	r4, r2
 8003138:	4618      	mov	r0, r3
 800313a:	4621      	mov	r1, r4
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f04f 0400 	mov.w	r4, #0
 8003142:	461a      	mov	r2, r3
 8003144:	4623      	mov	r3, r4
 8003146:	f7fd fd2d 	bl	8000ba4 <__aeabi_uldivmod>
 800314a:	4603      	mov	r3, r0
 800314c:	460c      	mov	r4, r1
 800314e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003150:	4b09      	ldr	r3, [pc, #36]	; (8003178 <HAL_RCC_GetSysClockFreq+0x334>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	0f1b      	lsrs	r3, r3, #28
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	fbb2 f3f3 	udiv	r3, r2, r3
 8003164:	613b      	str	r3, [r7, #16]
      break;
 8003166:	e002      	b.n	800316e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003168:	4b04      	ldr	r3, [pc, #16]	; (800317c <HAL_RCC_GetSysClockFreq+0x338>)
 800316a:	613b      	str	r3, [r7, #16]
      break;
 800316c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800316e:	693b      	ldr	r3, [r7, #16]
}
 8003170:	4618      	mov	r0, r3
 8003172:	371c      	adds	r7, #28
 8003174:	46bd      	mov	sp, r7
 8003176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003178:	40023800 	.word	0x40023800
 800317c:	00f42400 	.word	0x00f42400
 8003180:	007a1200 	.word	0x007a1200

08003184 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 8083 	beq.w	80032a4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800319e:	4b95      	ldr	r3, [pc, #596]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 030c 	and.w	r3, r3, #12
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d019      	beq.n	80031de <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031aa:	4b92      	ldr	r3, [pc, #584]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d106      	bne.n	80031c4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031b6:	4b8f      	ldr	r3, [pc, #572]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031c2:	d00c      	beq.n	80031de <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031c4:	4b8b      	ldr	r3, [pc, #556]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031cc:	2b0c      	cmp	r3, #12
 80031ce:	d112      	bne.n	80031f6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031d0:	4b88      	ldr	r3, [pc, #544]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031dc:	d10b      	bne.n	80031f6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031de:	4b85      	ldr	r3, [pc, #532]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d05b      	beq.n	80032a2 <HAL_RCC_OscConfig+0x11e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d157      	bne.n	80032a2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e216      	b.n	8003624 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031fe:	d106      	bne.n	800320e <HAL_RCC_OscConfig+0x8a>
 8003200:	4b7c      	ldr	r3, [pc, #496]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a7b      	ldr	r2, [pc, #492]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 8003206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800320a:	6013      	str	r3, [r2, #0]
 800320c:	e01d      	b.n	800324a <HAL_RCC_OscConfig+0xc6>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003216:	d10c      	bne.n	8003232 <HAL_RCC_OscConfig+0xae>
 8003218:	4b76      	ldr	r3, [pc, #472]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a75      	ldr	r2, [pc, #468]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 800321e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	4b73      	ldr	r3, [pc, #460]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a72      	ldr	r2, [pc, #456]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 800322a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	e00b      	b.n	800324a <HAL_RCC_OscConfig+0xc6>
 8003232:	4b70      	ldr	r3, [pc, #448]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a6f      	ldr	r2, [pc, #444]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 8003238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	4b6d      	ldr	r3, [pc, #436]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a6c      	ldr	r2, [pc, #432]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 8003244:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003248:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d013      	beq.n	800327a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003252:	f7fe fe25 	bl	8001ea0 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800325a:	f7fe fe21 	bl	8001ea0 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b64      	cmp	r3, #100	; 0x64
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e1db      	b.n	8003624 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326c:	4b61      	ldr	r3, [pc, #388]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0f0      	beq.n	800325a <HAL_RCC_OscConfig+0xd6>
 8003278:	e014      	b.n	80032a4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327a:	f7fe fe11 	bl	8001ea0 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003282:	f7fe fe0d 	bl	8001ea0 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b64      	cmp	r3, #100	; 0x64
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e1c7      	b.n	8003624 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003294:	4b57      	ldr	r3, [pc, #348]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1f0      	bne.n	8003282 <HAL_RCC_OscConfig+0xfe>
 80032a0:	e000      	b.n	80032a4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d06f      	beq.n	8003390 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032b0:	4b50      	ldr	r3, [pc, #320]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 030c 	and.w	r3, r3, #12
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d017      	beq.n	80032ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032bc:	4b4d      	ldr	r3, [pc, #308]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d105      	bne.n	80032d4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032c8:	4b4a      	ldr	r3, [pc, #296]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00b      	beq.n	80032ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032d4:	4b47      	ldr	r3, [pc, #284]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032dc:	2b0c      	cmp	r3, #12
 80032de:	d11c      	bne.n	800331a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032e0:	4b44      	ldr	r3, [pc, #272]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d116      	bne.n	800331a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ec:	4b41      	ldr	r3, [pc, #260]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <HAL_RCC_OscConfig+0x180>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e18f      	b.n	8003624 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003304:	4b3b      	ldr	r3, [pc, #236]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	4938      	ldr	r1, [pc, #224]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 8003314:	4313      	orrs	r3, r2
 8003316:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003318:	e03a      	b.n	8003390 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d020      	beq.n	8003364 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003322:	4b35      	ldr	r3, [pc, #212]	; (80033f8 <HAL_RCC_OscConfig+0x274>)
 8003324:	2201      	movs	r2, #1
 8003326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003328:	f7fe fdba 	bl	8001ea0 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003330:	f7fe fdb6 	bl	8001ea0 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e170      	b.n	8003624 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003342:	4b2c      	ldr	r3, [pc, #176]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f0      	beq.n	8003330 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334e:	4b29      	ldr	r3, [pc, #164]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4925      	ldr	r1, [pc, #148]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 800335e:	4313      	orrs	r3, r2
 8003360:	600b      	str	r3, [r1, #0]
 8003362:	e015      	b.n	8003390 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003364:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <HAL_RCC_OscConfig+0x274>)
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336a:	f7fe fd99 	bl	8001ea0 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003372:	f7fe fd95 	bl	8001ea0 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e14f      	b.n	8003624 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003384:	4b1b      	ldr	r3, [pc, #108]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1f0      	bne.n	8003372 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b00      	cmp	r3, #0
 800339a:	d037      	beq.n	800340c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d016      	beq.n	80033d2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033a4:	4b15      	ldr	r3, [pc, #84]	; (80033fc <HAL_RCC_OscConfig+0x278>)
 80033a6:	2201      	movs	r2, #1
 80033a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033aa:	f7fe fd79 	bl	8001ea0 <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033b2:	f7fe fd75 	bl	8001ea0 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e12f      	b.n	8003624 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c4:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 80033c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0f0      	beq.n	80033b2 <HAL_RCC_OscConfig+0x22e>
 80033d0:	e01c      	b.n	800340c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033d2:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <HAL_RCC_OscConfig+0x278>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d8:	f7fe fd62 	bl	8001ea0 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033de:	e00f      	b.n	8003400 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033e0:	f7fe fd5e 	bl	8001ea0 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d908      	bls.n	8003400 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e118      	b.n	8003624 <HAL_RCC_OscConfig+0x4a0>
 80033f2:	bf00      	nop
 80033f4:	40023800 	.word	0x40023800
 80033f8:	42470000 	.word	0x42470000
 80033fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003400:	4b8a      	ldr	r3, [pc, #552]	; (800362c <HAL_RCC_OscConfig+0x4a8>)
 8003402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1e9      	bne.n	80033e0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 8097 	beq.w	8003548 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800341a:	2300      	movs	r3, #0
 800341c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800341e:	4b83      	ldr	r3, [pc, #524]	; (800362c <HAL_RCC_OscConfig+0x4a8>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10f      	bne.n	800344a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	4b7f      	ldr	r3, [pc, #508]	; (800362c <HAL_RCC_OscConfig+0x4a8>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	4a7e      	ldr	r2, [pc, #504]	; (800362c <HAL_RCC_OscConfig+0x4a8>)
 8003434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003438:	6413      	str	r3, [r2, #64]	; 0x40
 800343a:	4b7c      	ldr	r3, [pc, #496]	; (800362c <HAL_RCC_OscConfig+0x4a8>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003446:	2301      	movs	r3, #1
 8003448:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344a:	4b79      	ldr	r3, [pc, #484]	; (8003630 <HAL_RCC_OscConfig+0x4ac>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003452:	2b00      	cmp	r3, #0
 8003454:	d118      	bne.n	8003488 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003456:	4b76      	ldr	r3, [pc, #472]	; (8003630 <HAL_RCC_OscConfig+0x4ac>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a75      	ldr	r2, [pc, #468]	; (8003630 <HAL_RCC_OscConfig+0x4ac>)
 800345c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003462:	f7fe fd1d 	bl	8001ea0 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346a:	f7fe fd19 	bl	8001ea0 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e0d3      	b.n	8003624 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347c:	4b6c      	ldr	r3, [pc, #432]	; (8003630 <HAL_RCC_OscConfig+0x4ac>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d106      	bne.n	800349e <HAL_RCC_OscConfig+0x31a>
 8003490:	4b66      	ldr	r3, [pc, #408]	; (800362c <HAL_RCC_OscConfig+0x4a8>)
 8003492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003494:	4a65      	ldr	r2, [pc, #404]	; (800362c <HAL_RCC_OscConfig+0x4a8>)
 8003496:	f043 0301 	orr.w	r3, r3, #1
 800349a:	6713      	str	r3, [r2, #112]	; 0x70
 800349c:	e01c      	b.n	80034d8 <HAL_RCC_OscConfig+0x354>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b05      	cmp	r3, #5
 80034a4:	d10c      	bne.n	80034c0 <HAL_RCC_OscConfig+0x33c>
 80034a6:	4b61      	ldr	r3, [pc, #388]	; (800362c <HAL_RCC_OscConfig+0x4a8>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034aa:	4a60      	ldr	r2, [pc, #384]	; (800362c <HAL_RCC_OscConfig+0x4a8>)
 80034ac:	f043 0304 	orr.w	r3, r3, #4
 80034b0:	6713      	str	r3, [r2, #112]	; 0x70
 80034b2:	4b5e      	ldr	r3, [pc, #376]	; (800362c <HAL_RCC_OscConfig+0x4a8>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b6:	4a5d      	ldr	r2, [pc, #372]	; (800362c <HAL_RCC_OscConfig+0x4a8>)
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	6713      	str	r3, [r2, #112]	; 0x70
 80034be:	e00b      	b.n	80034d8 <HAL_RCC_OscConfig+0x354>
 80034c0:	4b5a      	ldr	r3, [pc, #360]	; (800362c <HAL_RCC_OscConfig+0x4a8>)
 80034c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c4:	4a59      	ldr	r2, [pc, #356]	; (800362c <HAL_RCC_OscConfig+0x4a8>)
 80034c6:	f023 0301 	bic.w	r3, r3, #1
 80034ca:	6713      	str	r3, [r2, #112]	; 0x70
 80034cc:	4b57      	ldr	r3, [pc, #348]	; (800362c <HAL_RCC_OscConfig+0x4a8>)
 80034ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d0:	4a56      	ldr	r2, [pc, #344]	; (800362c <HAL_RCC_OscConfig+0x4a8>)
 80034d2:	f023 0304 	bic.w	r3, r3, #4
 80034d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d015      	beq.n	800350c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e0:	f7fe fcde 	bl	8001ea0 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e6:	e00a      	b.n	80034fe <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e8:	f7fe fcda 	bl	8001ea0 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e092      	b.n	8003624 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fe:	4b4b      	ldr	r3, [pc, #300]	; (800362c <HAL_RCC_OscConfig+0x4a8>)
 8003500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0ee      	beq.n	80034e8 <HAL_RCC_OscConfig+0x364>
 800350a:	e014      	b.n	8003536 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350c:	f7fe fcc8 	bl	8001ea0 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003512:	e00a      	b.n	800352a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003514:	f7fe fcc4 	bl	8001ea0 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003522:	4293      	cmp	r3, r2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e07c      	b.n	8003624 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800352a:	4b40      	ldr	r3, [pc, #256]	; (800362c <HAL_RCC_OscConfig+0x4a8>)
 800352c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1ee      	bne.n	8003514 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003536:	7dfb      	ldrb	r3, [r7, #23]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d105      	bne.n	8003548 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800353c:	4b3b      	ldr	r3, [pc, #236]	; (800362c <HAL_RCC_OscConfig+0x4a8>)
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	4a3a      	ldr	r2, [pc, #232]	; (800362c <HAL_RCC_OscConfig+0x4a8>)
 8003542:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003546:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d068      	beq.n	8003622 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003550:	4b36      	ldr	r3, [pc, #216]	; (800362c <HAL_RCC_OscConfig+0x4a8>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 030c 	and.w	r3, r3, #12
 8003558:	2b08      	cmp	r3, #8
 800355a:	d060      	beq.n	800361e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	2b02      	cmp	r3, #2
 8003562:	d145      	bne.n	80035f0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003564:	4b33      	ldr	r3, [pc, #204]	; (8003634 <HAL_RCC_OscConfig+0x4b0>)
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356a:	f7fe fc99 	bl	8001ea0 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003572:	f7fe fc95 	bl	8001ea0 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e04f      	b.n	8003624 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003584:	4b29      	ldr	r3, [pc, #164]	; (800362c <HAL_RCC_OscConfig+0x4a8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1f0      	bne.n	8003572 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69da      	ldr	r2, [r3, #28]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	019b      	lsls	r3, r3, #6
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	085b      	lsrs	r3, r3, #1
 80035a8:	3b01      	subs	r3, #1
 80035aa:	041b      	lsls	r3, r3, #16
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	061b      	lsls	r3, r3, #24
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	071b      	lsls	r3, r3, #28
 80035bc:	491b      	ldr	r1, [pc, #108]	; (800362c <HAL_RCC_OscConfig+0x4a8>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035c2:	4b1c      	ldr	r3, [pc, #112]	; (8003634 <HAL_RCC_OscConfig+0x4b0>)
 80035c4:	2201      	movs	r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c8:	f7fe fc6a 	bl	8001ea0 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d0:	f7fe fc66 	bl	8001ea0 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e020      	b.n	8003624 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e2:	4b12      	ldr	r3, [pc, #72]	; (800362c <HAL_RCC_OscConfig+0x4a8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0x44c>
 80035ee:	e018      	b.n	8003622 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f0:	4b10      	ldr	r3, [pc, #64]	; (8003634 <HAL_RCC_OscConfig+0x4b0>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f6:	f7fe fc53 	bl	8001ea0 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035fe:	f7fe fc4f 	bl	8001ea0 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e009      	b.n	8003624 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003610:	4b06      	ldr	r3, [pc, #24]	; (800362c <HAL_RCC_OscConfig+0x4a8>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1f0      	bne.n	80035fe <HAL_RCC_OscConfig+0x47a>
 800361c:	e001      	b.n	8003622 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40023800 	.word	0x40023800
 8003630:	40007000 	.word	0x40007000
 8003634:	42470060 	.word	0x42470060

08003638 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e056      	b.n	80036f8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	d106      	bne.n	800366a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7fd ffcb 	bl	8001600 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2202      	movs	r2, #2
 800366e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003680:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	431a      	orrs	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	431a      	orrs	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	431a      	orrs	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	ea42 0103 	orr.w	r1, r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	0c1b      	lsrs	r3, r3, #16
 80036c8:	f003 0104 	and.w	r1, r3, #4
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	69da      	ldr	r2, [r3, #28]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e01d      	b.n	800374e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d106      	bne.n	800372c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7fe f9e0 	bl	8001aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3304      	adds	r3, #4
 800373c:	4619      	mov	r1, r3
 800373e:	4610      	mov	r0, r2
 8003740:	f000 fb4e 	bl	8003de0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003756:	b480      	push	{r7}
 8003758:	b085      	sub	sp, #20
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 0201 	orr.w	r2, r2, #1
 800376c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b06      	cmp	r3, #6
 800377e:	d007      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e01d      	b.n	80037ec <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d106      	bne.n	80037ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f815 	bl	80037f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2202      	movs	r2, #2
 80037ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	3304      	adds	r3, #4
 80037da:	4619      	mov	r1, r3
 80037dc:	4610      	mov	r0, r2
 80037de:	f000 faff 	bl	8003de0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2201      	movs	r2, #1
 8003818:	6839      	ldr	r1, [r7, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f000 fdca 	bl	80043b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a15      	ldr	r2, [pc, #84]	; (800387c <HAL_TIM_PWM_Start+0x74>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d004      	beq.n	8003834 <HAL_TIM_PWM_Start+0x2c>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a14      	ldr	r2, [pc, #80]	; (8003880 <HAL_TIM_PWM_Start+0x78>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d101      	bne.n	8003838 <HAL_TIM_PWM_Start+0x30>
 8003834:	2301      	movs	r3, #1
 8003836:	e000      	b.n	800383a <HAL_TIM_PWM_Start+0x32>
 8003838:	2300      	movs	r3, #0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d007      	beq.n	800384e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800384c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2b06      	cmp	r3, #6
 800385e:	d007      	beq.n	8003870 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0201 	orr.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	40010000 	.word	0x40010000
 8003880:	40010400 	.word	0x40010400

08003884 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b02      	cmp	r3, #2
 8003898:	d122      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d11b      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f06f 0202 	mvn.w	r2, #2
 80038b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 fa6b 	bl	8003da2 <HAL_TIM_IC_CaptureCallback>
 80038cc:	e005      	b.n	80038da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fa5d 	bl	8003d8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 fa6e 	bl	8003db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f003 0304 	and.w	r3, r3, #4
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d122      	bne.n	8003934 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d11b      	bne.n	8003934 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0204 	mvn.w	r2, #4
 8003904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2202      	movs	r2, #2
 800390a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 fa41 	bl	8003da2 <HAL_TIM_IC_CaptureCallback>
 8003920:	e005      	b.n	800392e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fa33 	bl	8003d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 fa44 	bl	8003db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b08      	cmp	r3, #8
 8003940:	d122      	bne.n	8003988 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f003 0308 	and.w	r3, r3, #8
 800394c:	2b08      	cmp	r3, #8
 800394e:	d11b      	bne.n	8003988 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0208 	mvn.w	r2, #8
 8003958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2204      	movs	r2, #4
 800395e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 fa17 	bl	8003da2 <HAL_TIM_IC_CaptureCallback>
 8003974:	e005      	b.n	8003982 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 fa09 	bl	8003d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 fa1a 	bl	8003db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f003 0310 	and.w	r3, r3, #16
 8003992:	2b10      	cmp	r3, #16
 8003994:	d122      	bne.n	80039dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f003 0310 	and.w	r3, r3, #16
 80039a0:	2b10      	cmp	r3, #16
 80039a2:	d11b      	bne.n	80039dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f06f 0210 	mvn.w	r2, #16
 80039ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2208      	movs	r2, #8
 80039b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f9ed 	bl	8003da2 <HAL_TIM_IC_CaptureCallback>
 80039c8:	e005      	b.n	80039d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f9df 	bl	8003d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f9f0 	bl	8003db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d10e      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d107      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f06f 0201 	mvn.w	r2, #1
 8003a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f001 fa32 	bl	8004e6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a12:	2b80      	cmp	r3, #128	; 0x80
 8003a14:	d10e      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a20:	2b80      	cmp	r3, #128	; 0x80
 8003a22:	d107      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 fde8 	bl	8004604 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3e:	2b40      	cmp	r3, #64	; 0x40
 8003a40:	d10e      	bne.n	8003a60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4c:	2b40      	cmp	r3, #64	; 0x40
 8003a4e:	d107      	bne.n	8003a60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f9b5 	bl	8003dca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	2b20      	cmp	r3, #32
 8003a6c:	d10e      	bne.n	8003a8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f003 0320 	and.w	r3, r3, #32
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d107      	bne.n	8003a8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f06f 0220 	mvn.w	r2, #32
 8003a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 fdb2 	bl	80045f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a8c:	bf00      	nop
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e0b4      	b.n	8003c18 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2202      	movs	r2, #2
 8003aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b0c      	cmp	r3, #12
 8003ac2:	f200 809f 	bhi.w	8003c04 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003ac6:	a201      	add	r2, pc, #4	; (adr r2, 8003acc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003acc:	08003b01 	.word	0x08003b01
 8003ad0:	08003c05 	.word	0x08003c05
 8003ad4:	08003c05 	.word	0x08003c05
 8003ad8:	08003c05 	.word	0x08003c05
 8003adc:	08003b41 	.word	0x08003b41
 8003ae0:	08003c05 	.word	0x08003c05
 8003ae4:	08003c05 	.word	0x08003c05
 8003ae8:	08003c05 	.word	0x08003c05
 8003aec:	08003b83 	.word	0x08003b83
 8003af0:	08003c05 	.word	0x08003c05
 8003af4:	08003c05 	.word	0x08003c05
 8003af8:	08003c05 	.word	0x08003c05
 8003afc:	08003bc3 	.word	0x08003bc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68b9      	ldr	r1, [r7, #8]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fa0a 	bl	8003f20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699a      	ldr	r2, [r3, #24]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0208 	orr.w	r2, r2, #8
 8003b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699a      	ldr	r2, [r3, #24]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0204 	bic.w	r2, r2, #4
 8003b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6999      	ldr	r1, [r3, #24]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	619a      	str	r2, [r3, #24]
      break;
 8003b3e:	e062      	b.n	8003c06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68b9      	ldr	r1, [r7, #8]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 fa5a 	bl	8004000 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699a      	ldr	r2, [r3, #24]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699a      	ldr	r2, [r3, #24]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6999      	ldr	r1, [r3, #24]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	021a      	lsls	r2, r3, #8
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	619a      	str	r2, [r3, #24]
      break;
 8003b80:	e041      	b.n	8003c06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68b9      	ldr	r1, [r7, #8]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 faaf 	bl	80040ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	69da      	ldr	r2, [r3, #28]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f042 0208 	orr.w	r2, r2, #8
 8003b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	69da      	ldr	r2, [r3, #28]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0204 	bic.w	r2, r2, #4
 8003bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	69d9      	ldr	r1, [r3, #28]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	61da      	str	r2, [r3, #28]
      break;
 8003bc0:	e021      	b.n	8003c06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68b9      	ldr	r1, [r7, #8]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 fb03 	bl	80041d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	69da      	ldr	r2, [r3, #28]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	69da      	ldr	r2, [r3, #28]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	69d9      	ldr	r1, [r3, #28]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	021a      	lsls	r2, r3, #8
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	61da      	str	r2, [r3, #28]
      break;
 8003c02:	e000      	b.n	8003c06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003c04:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_TIM_ConfigClockSource+0x18>
 8003c34:	2302      	movs	r3, #2
 8003c36:	e0a6      	b.n	8003d86 <HAL_TIM_ConfigClockSource+0x166>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b40      	cmp	r3, #64	; 0x40
 8003c6e:	d067      	beq.n	8003d40 <HAL_TIM_ConfigClockSource+0x120>
 8003c70:	2b40      	cmp	r3, #64	; 0x40
 8003c72:	d80b      	bhi.n	8003c8c <HAL_TIM_ConfigClockSource+0x6c>
 8003c74:	2b10      	cmp	r3, #16
 8003c76:	d073      	beq.n	8003d60 <HAL_TIM_ConfigClockSource+0x140>
 8003c78:	2b10      	cmp	r3, #16
 8003c7a:	d802      	bhi.n	8003c82 <HAL_TIM_ConfigClockSource+0x62>
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d06f      	beq.n	8003d60 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003c80:	e078      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c82:	2b20      	cmp	r3, #32
 8003c84:	d06c      	beq.n	8003d60 <HAL_TIM_ConfigClockSource+0x140>
 8003c86:	2b30      	cmp	r3, #48	; 0x30
 8003c88:	d06a      	beq.n	8003d60 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003c8a:	e073      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c8c:	2b70      	cmp	r3, #112	; 0x70
 8003c8e:	d00d      	beq.n	8003cac <HAL_TIM_ConfigClockSource+0x8c>
 8003c90:	2b70      	cmp	r3, #112	; 0x70
 8003c92:	d804      	bhi.n	8003c9e <HAL_TIM_ConfigClockSource+0x7e>
 8003c94:	2b50      	cmp	r3, #80	; 0x50
 8003c96:	d033      	beq.n	8003d00 <HAL_TIM_ConfigClockSource+0xe0>
 8003c98:	2b60      	cmp	r3, #96	; 0x60
 8003c9a:	d041      	beq.n	8003d20 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003c9c:	e06a      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca2:	d066      	beq.n	8003d72 <HAL_TIM_ConfigClockSource+0x152>
 8003ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca8:	d017      	beq.n	8003cda <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003caa:	e063      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6818      	ldr	r0, [r3, #0]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	6899      	ldr	r1, [r3, #8]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f000 fb5a 	bl	8004374 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	609a      	str	r2, [r3, #8]
      break;
 8003cd8:	e04c      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6818      	ldr	r0, [r3, #0]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	6899      	ldr	r1, [r3, #8]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f000 fb43 	bl	8004374 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cfc:	609a      	str	r2, [r3, #8]
      break;
 8003cfe:	e039      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6818      	ldr	r0, [r3, #0]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	6859      	ldr	r1, [r3, #4]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	f000 fab7 	bl	8004280 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2150      	movs	r1, #80	; 0x50
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 fb10 	bl	800433e <TIM_ITRx_SetConfig>
      break;
 8003d1e:	e029      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6818      	ldr	r0, [r3, #0]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	6859      	ldr	r1, [r3, #4]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	f000 fad6 	bl	80042de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2160      	movs	r1, #96	; 0x60
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 fb00 	bl	800433e <TIM_ITRx_SetConfig>
      break;
 8003d3e:	e019      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6818      	ldr	r0, [r3, #0]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	6859      	ldr	r1, [r3, #4]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	f000 fa97 	bl	8004280 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2140      	movs	r1, #64	; 0x40
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 faf0 	bl	800433e <TIM_ITRx_SetConfig>
      break;
 8003d5e:	e009      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	f000 fae7 	bl	800433e <TIM_ITRx_SetConfig>
      break;
 8003d70:	e000      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003d72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
	...

08003de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a40      	ldr	r2, [pc, #256]	; (8003ef4 <TIM_Base_SetConfig+0x114>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d013      	beq.n	8003e20 <TIM_Base_SetConfig+0x40>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dfe:	d00f      	beq.n	8003e20 <TIM_Base_SetConfig+0x40>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a3d      	ldr	r2, [pc, #244]	; (8003ef8 <TIM_Base_SetConfig+0x118>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d00b      	beq.n	8003e20 <TIM_Base_SetConfig+0x40>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a3c      	ldr	r2, [pc, #240]	; (8003efc <TIM_Base_SetConfig+0x11c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d007      	beq.n	8003e20 <TIM_Base_SetConfig+0x40>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a3b      	ldr	r2, [pc, #236]	; (8003f00 <TIM_Base_SetConfig+0x120>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d003      	beq.n	8003e20 <TIM_Base_SetConfig+0x40>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a3a      	ldr	r2, [pc, #232]	; (8003f04 <TIM_Base_SetConfig+0x124>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d108      	bne.n	8003e32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a2f      	ldr	r2, [pc, #188]	; (8003ef4 <TIM_Base_SetConfig+0x114>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d02b      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e40:	d027      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a2c      	ldr	r2, [pc, #176]	; (8003ef8 <TIM_Base_SetConfig+0x118>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d023      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a2b      	ldr	r2, [pc, #172]	; (8003efc <TIM_Base_SetConfig+0x11c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d01f      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a2a      	ldr	r2, [pc, #168]	; (8003f00 <TIM_Base_SetConfig+0x120>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d01b      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a29      	ldr	r2, [pc, #164]	; (8003f04 <TIM_Base_SetConfig+0x124>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d017      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a28      	ldr	r2, [pc, #160]	; (8003f08 <TIM_Base_SetConfig+0x128>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d013      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a27      	ldr	r2, [pc, #156]	; (8003f0c <TIM_Base_SetConfig+0x12c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00f      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a26      	ldr	r2, [pc, #152]	; (8003f10 <TIM_Base_SetConfig+0x130>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00b      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a25      	ldr	r2, [pc, #148]	; (8003f14 <TIM_Base_SetConfig+0x134>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d007      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a24      	ldr	r2, [pc, #144]	; (8003f18 <TIM_Base_SetConfig+0x138>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d003      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a23      	ldr	r2, [pc, #140]	; (8003f1c <TIM_Base_SetConfig+0x13c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d108      	bne.n	8003ea4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a0a      	ldr	r2, [pc, #40]	; (8003ef4 <TIM_Base_SetConfig+0x114>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d003      	beq.n	8003ed8 <TIM_Base_SetConfig+0xf8>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a0c      	ldr	r2, [pc, #48]	; (8003f04 <TIM_Base_SetConfig+0x124>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d103      	bne.n	8003ee0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	691a      	ldr	r2, [r3, #16]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	615a      	str	r2, [r3, #20]
}
 8003ee6:	bf00      	nop
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	40010000 	.word	0x40010000
 8003ef8:	40000400 	.word	0x40000400
 8003efc:	40000800 	.word	0x40000800
 8003f00:	40000c00 	.word	0x40000c00
 8003f04:	40010400 	.word	0x40010400
 8003f08:	40014000 	.word	0x40014000
 8003f0c:	40014400 	.word	0x40014400
 8003f10:	40014800 	.word	0x40014800
 8003f14:	40001800 	.word	0x40001800
 8003f18:	40001c00 	.word	0x40001c00
 8003f1c:	40002000 	.word	0x40002000

08003f20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	f023 0201 	bic.w	r2, r3, #1
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f023 0303 	bic.w	r3, r3, #3
 8003f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f023 0302 	bic.w	r3, r3, #2
 8003f68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a20      	ldr	r2, [pc, #128]	; (8003ff8 <TIM_OC1_SetConfig+0xd8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d003      	beq.n	8003f84 <TIM_OC1_SetConfig+0x64>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a1f      	ldr	r2, [pc, #124]	; (8003ffc <TIM_OC1_SetConfig+0xdc>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d10c      	bne.n	8003f9e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f023 0308 	bic.w	r3, r3, #8
 8003f8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f023 0304 	bic.w	r3, r3, #4
 8003f9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a15      	ldr	r2, [pc, #84]	; (8003ff8 <TIM_OC1_SetConfig+0xd8>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d003      	beq.n	8003fae <TIM_OC1_SetConfig+0x8e>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a14      	ldr	r2, [pc, #80]	; (8003ffc <TIM_OC1_SetConfig+0xdc>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d111      	bne.n	8003fd2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	621a      	str	r2, [r3, #32]
}
 8003fec:	bf00      	nop
 8003fee:	371c      	adds	r7, #28
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	40010000 	.word	0x40010000
 8003ffc:	40010400 	.word	0x40010400

08004000 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	f023 0210 	bic.w	r2, r3, #16
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800402e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	021b      	lsls	r3, r3, #8
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4313      	orrs	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f023 0320 	bic.w	r3, r3, #32
 800404a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a22      	ldr	r2, [pc, #136]	; (80040e4 <TIM_OC2_SetConfig+0xe4>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d003      	beq.n	8004068 <TIM_OC2_SetConfig+0x68>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a21      	ldr	r2, [pc, #132]	; (80040e8 <TIM_OC2_SetConfig+0xe8>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d10d      	bne.n	8004084 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800406e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	4313      	orrs	r3, r2
 800407a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004082:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a17      	ldr	r2, [pc, #92]	; (80040e4 <TIM_OC2_SetConfig+0xe4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d003      	beq.n	8004094 <TIM_OC2_SetConfig+0x94>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a16      	ldr	r2, [pc, #88]	; (80040e8 <TIM_OC2_SetConfig+0xe8>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d113      	bne.n	80040bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800409a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	621a      	str	r2, [r3, #32]
}
 80040d6:	bf00      	nop
 80040d8:	371c      	adds	r7, #28
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	40010000 	.word	0x40010000
 80040e8:	40010400 	.word	0x40010400

080040ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0303 	bic.w	r3, r3, #3
 8004122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	021b      	lsls	r3, r3, #8
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	4313      	orrs	r3, r2
 8004140:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a21      	ldr	r2, [pc, #132]	; (80041cc <TIM_OC3_SetConfig+0xe0>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d003      	beq.n	8004152 <TIM_OC3_SetConfig+0x66>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a20      	ldr	r2, [pc, #128]	; (80041d0 <TIM_OC3_SetConfig+0xe4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d10d      	bne.n	800416e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004158:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	021b      	lsls	r3, r3, #8
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	4313      	orrs	r3, r2
 8004164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800416c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a16      	ldr	r2, [pc, #88]	; (80041cc <TIM_OC3_SetConfig+0xe0>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d003      	beq.n	800417e <TIM_OC3_SetConfig+0x92>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a15      	ldr	r2, [pc, #84]	; (80041d0 <TIM_OC3_SetConfig+0xe4>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d113      	bne.n	80041a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004184:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800418c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	621a      	str	r2, [r3, #32]
}
 80041c0:	bf00      	nop
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	40010000 	.word	0x40010000
 80041d0:	40010400 	.word	0x40010400

080041d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800420a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	021b      	lsls	r3, r3, #8
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4313      	orrs	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800421e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	031b      	lsls	r3, r3, #12
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	4313      	orrs	r3, r2
 800422a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a12      	ldr	r2, [pc, #72]	; (8004278 <TIM_OC4_SetConfig+0xa4>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d003      	beq.n	800423c <TIM_OC4_SetConfig+0x68>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a11      	ldr	r2, [pc, #68]	; (800427c <TIM_OC4_SetConfig+0xa8>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d109      	bne.n	8004250 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004242:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	019b      	lsls	r3, r3, #6
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	4313      	orrs	r3, r2
 800424e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	621a      	str	r2, [r3, #32]
}
 800426a:	bf00      	nop
 800426c:	371c      	adds	r7, #28
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40010000 	.word	0x40010000
 800427c:	40010400 	.word	0x40010400

08004280 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	f023 0201 	bic.w	r2, r3, #1
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f023 030a 	bic.w	r3, r3, #10
 80042bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	621a      	str	r2, [r3, #32]
}
 80042d2:	bf00      	nop
 80042d4:	371c      	adds	r7, #28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042de:	b480      	push	{r7}
 80042e0:	b087      	sub	sp, #28
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	60f8      	str	r0, [r7, #12]
 80042e6:	60b9      	str	r1, [r7, #8]
 80042e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	f023 0210 	bic.w	r2, r3, #16
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004308:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	031b      	lsls	r3, r3, #12
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	4313      	orrs	r3, r2
 8004312:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800431a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4313      	orrs	r3, r2
 8004324:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	621a      	str	r2, [r3, #32]
}
 8004332:	bf00      	nop
 8004334:	371c      	adds	r7, #28
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800433e:	b480      	push	{r7}
 8004340:	b085      	sub	sp, #20
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004354:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	f043 0307 	orr.w	r3, r3, #7
 8004360:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	609a      	str	r2, [r3, #8]
}
 8004368:	bf00      	nop
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004374:	b480      	push	{r7}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
 8004380:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800438e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	021a      	lsls	r2, r3, #8
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	431a      	orrs	r2, r3
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	4313      	orrs	r3, r2
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	4313      	orrs	r3, r2
 80043a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	609a      	str	r2, [r3, #8]
}
 80043a8:	bf00      	nop
 80043aa:	371c      	adds	r7, #28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f003 031f 	and.w	r3, r3, #31
 80043c6:	2201      	movs	r2, #1
 80043c8:	fa02 f303 	lsl.w	r3, r2, r3
 80043cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6a1a      	ldr	r2, [r3, #32]
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	43db      	mvns	r3, r3
 80043d6:	401a      	ands	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a1a      	ldr	r2, [r3, #32]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f003 031f 	and.w	r3, r3, #31
 80043e6:	6879      	ldr	r1, [r7, #4]
 80043e8:	fa01 f303 	lsl.w	r3, r1, r3
 80043ec:	431a      	orrs	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	621a      	str	r2, [r3, #32]
}
 80043f2:	bf00      	nop
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b084      	sub	sp, #16
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2204      	movs	r2, #4
 800440e:	6839      	ldr	r1, [r7, #0]
 8004410:	4618      	mov	r0, r3
 8004412:	f000 f901 	bl	8004618 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004424:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2b06      	cmp	r3, #6
 8004436:	d007      	beq.n	8004448 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f042 0201 	orr.w	r2, r2, #1
 8004446:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004464:	2b01      	cmp	r3, #1
 8004466:	d101      	bne.n	800446c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004468:	2302      	movs	r3, #2
 800446a:	e05a      	b.n	8004522 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004492:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	4313      	orrs	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a21      	ldr	r2, [pc, #132]	; (8004530 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d022      	beq.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b8:	d01d      	beq.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a1d      	ldr	r2, [pc, #116]	; (8004534 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d018      	beq.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a1b      	ldr	r2, [pc, #108]	; (8004538 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d013      	beq.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a1a      	ldr	r2, [pc, #104]	; (800453c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00e      	beq.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a18      	ldr	r2, [pc, #96]	; (8004540 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d009      	beq.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a17      	ldr	r2, [pc, #92]	; (8004544 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d004      	beq.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a15      	ldr	r2, [pc, #84]	; (8004548 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d10c      	bne.n	8004510 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	4313      	orrs	r3, r2
 8004506:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	40010000 	.word	0x40010000
 8004534:	40000400 	.word	0x40000400
 8004538:	40000800 	.word	0x40000800
 800453c:	40000c00 	.word	0x40000c00
 8004540:	40010400 	.word	0x40010400
 8004544:	40014000 	.word	0x40014000
 8004548:	40001800 	.word	0x40001800

0800454c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004560:	2b01      	cmp	r3, #1
 8004562:	d101      	bne.n	8004568 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004564:	2302      	movs	r3, #2
 8004566:	e03d      	b.n	80045e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	4313      	orrs	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	4313      	orrs	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f003 031f 	and.w	r3, r3, #31
 800462a:	2204      	movs	r2, #4
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6a1a      	ldr	r2, [r3, #32]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	43db      	mvns	r3, r3
 800463a:	401a      	ands	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a1a      	ldr	r2, [r3, #32]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f003 031f 	and.w	r3, r3, #31
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	fa01 f303 	lsl.w	r3, r1, r3
 8004650:	431a      	orrs	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	621a      	str	r2, [r3, #32]
}
 8004656:	bf00      	nop
 8004658:	371c      	adds	r7, #28
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b082      	sub	sp, #8
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e03f      	b.n	80046f4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	d106      	bne.n	800468e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7fd fb31 	bl	8001cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2224      	movs	r2, #36	; 0x24
 8004692:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68da      	ldr	r2, [r3, #12]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046a4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f828 	bl	80046fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	691a      	ldr	r2, [r3, #16]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046ba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	695a      	ldr	r2, [r3, #20]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046ca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046da:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2220      	movs	r2, #32
 80046e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004700:	b085      	sub	sp, #20
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68da      	ldr	r2, [r3, #12]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	431a      	orrs	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	69db      	ldr	r3, [r3, #28]
 8004730:	4313      	orrs	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800473e:	f023 030c 	bic.w	r3, r3, #12
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6812      	ldr	r2, [r2, #0]
 8004746:	68f9      	ldr	r1, [r7, #12]
 8004748:	430b      	orrs	r3, r1
 800474a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699a      	ldr	r2, [r3, #24]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800476a:	f040 818b 	bne.w	8004a84 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4ac1      	ldr	r2, [pc, #772]	; (8004a78 <UART_SetConfig+0x37c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d005      	beq.n	8004784 <UART_SetConfig+0x88>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4abf      	ldr	r2, [pc, #764]	; (8004a7c <UART_SetConfig+0x380>)
 800477e:	4293      	cmp	r3, r2
 8004780:	f040 80bd 	bne.w	80048fe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004784:	f7fe fb4a 	bl	8002e1c <HAL_RCC_GetPCLK2Freq>
 8004788:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	461d      	mov	r5, r3
 800478e:	f04f 0600 	mov.w	r6, #0
 8004792:	46a8      	mov	r8, r5
 8004794:	46b1      	mov	r9, r6
 8004796:	eb18 0308 	adds.w	r3, r8, r8
 800479a:	eb49 0409 	adc.w	r4, r9, r9
 800479e:	4698      	mov	r8, r3
 80047a0:	46a1      	mov	r9, r4
 80047a2:	eb18 0805 	adds.w	r8, r8, r5
 80047a6:	eb49 0906 	adc.w	r9, r9, r6
 80047aa:	f04f 0100 	mov.w	r1, #0
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80047b6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80047ba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80047be:	4688      	mov	r8, r1
 80047c0:	4691      	mov	r9, r2
 80047c2:	eb18 0005 	adds.w	r0, r8, r5
 80047c6:	eb49 0106 	adc.w	r1, r9, r6
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	461d      	mov	r5, r3
 80047d0:	f04f 0600 	mov.w	r6, #0
 80047d4:	196b      	adds	r3, r5, r5
 80047d6:	eb46 0406 	adc.w	r4, r6, r6
 80047da:	461a      	mov	r2, r3
 80047dc:	4623      	mov	r3, r4
 80047de:	f7fc f9e1 	bl	8000ba4 <__aeabi_uldivmod>
 80047e2:	4603      	mov	r3, r0
 80047e4:	460c      	mov	r4, r1
 80047e6:	461a      	mov	r2, r3
 80047e8:	4ba5      	ldr	r3, [pc, #660]	; (8004a80 <UART_SetConfig+0x384>)
 80047ea:	fba3 2302 	umull	r2, r3, r3, r2
 80047ee:	095b      	lsrs	r3, r3, #5
 80047f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	461d      	mov	r5, r3
 80047f8:	f04f 0600 	mov.w	r6, #0
 80047fc:	46a9      	mov	r9, r5
 80047fe:	46b2      	mov	sl, r6
 8004800:	eb19 0309 	adds.w	r3, r9, r9
 8004804:	eb4a 040a 	adc.w	r4, sl, sl
 8004808:	4699      	mov	r9, r3
 800480a:	46a2      	mov	sl, r4
 800480c:	eb19 0905 	adds.w	r9, r9, r5
 8004810:	eb4a 0a06 	adc.w	sl, sl, r6
 8004814:	f04f 0100 	mov.w	r1, #0
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004820:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004824:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004828:	4689      	mov	r9, r1
 800482a:	4692      	mov	sl, r2
 800482c:	eb19 0005 	adds.w	r0, r9, r5
 8004830:	eb4a 0106 	adc.w	r1, sl, r6
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	461d      	mov	r5, r3
 800483a:	f04f 0600 	mov.w	r6, #0
 800483e:	196b      	adds	r3, r5, r5
 8004840:	eb46 0406 	adc.w	r4, r6, r6
 8004844:	461a      	mov	r2, r3
 8004846:	4623      	mov	r3, r4
 8004848:	f7fc f9ac 	bl	8000ba4 <__aeabi_uldivmod>
 800484c:	4603      	mov	r3, r0
 800484e:	460c      	mov	r4, r1
 8004850:	461a      	mov	r2, r3
 8004852:	4b8b      	ldr	r3, [pc, #556]	; (8004a80 <UART_SetConfig+0x384>)
 8004854:	fba3 1302 	umull	r1, r3, r3, r2
 8004858:	095b      	lsrs	r3, r3, #5
 800485a:	2164      	movs	r1, #100	; 0x64
 800485c:	fb01 f303 	mul.w	r3, r1, r3
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	3332      	adds	r3, #50	; 0x32
 8004866:	4a86      	ldr	r2, [pc, #536]	; (8004a80 <UART_SetConfig+0x384>)
 8004868:	fba2 2303 	umull	r2, r3, r2, r3
 800486c:	095b      	lsrs	r3, r3, #5
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004874:	4498      	add	r8, r3
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	461d      	mov	r5, r3
 800487a:	f04f 0600 	mov.w	r6, #0
 800487e:	46a9      	mov	r9, r5
 8004880:	46b2      	mov	sl, r6
 8004882:	eb19 0309 	adds.w	r3, r9, r9
 8004886:	eb4a 040a 	adc.w	r4, sl, sl
 800488a:	4699      	mov	r9, r3
 800488c:	46a2      	mov	sl, r4
 800488e:	eb19 0905 	adds.w	r9, r9, r5
 8004892:	eb4a 0a06 	adc.w	sl, sl, r6
 8004896:	f04f 0100 	mov.w	r1, #0
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048aa:	4689      	mov	r9, r1
 80048ac:	4692      	mov	sl, r2
 80048ae:	eb19 0005 	adds.w	r0, r9, r5
 80048b2:	eb4a 0106 	adc.w	r1, sl, r6
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	461d      	mov	r5, r3
 80048bc:	f04f 0600 	mov.w	r6, #0
 80048c0:	196b      	adds	r3, r5, r5
 80048c2:	eb46 0406 	adc.w	r4, r6, r6
 80048c6:	461a      	mov	r2, r3
 80048c8:	4623      	mov	r3, r4
 80048ca:	f7fc f96b 	bl	8000ba4 <__aeabi_uldivmod>
 80048ce:	4603      	mov	r3, r0
 80048d0:	460c      	mov	r4, r1
 80048d2:	461a      	mov	r2, r3
 80048d4:	4b6a      	ldr	r3, [pc, #424]	; (8004a80 <UART_SetConfig+0x384>)
 80048d6:	fba3 1302 	umull	r1, r3, r3, r2
 80048da:	095b      	lsrs	r3, r3, #5
 80048dc:	2164      	movs	r1, #100	; 0x64
 80048de:	fb01 f303 	mul.w	r3, r1, r3
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	3332      	adds	r3, #50	; 0x32
 80048e8:	4a65      	ldr	r2, [pc, #404]	; (8004a80 <UART_SetConfig+0x384>)
 80048ea:	fba2 2303 	umull	r2, r3, r2, r3
 80048ee:	095b      	lsrs	r3, r3, #5
 80048f0:	f003 0207 	and.w	r2, r3, #7
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4442      	add	r2, r8
 80048fa:	609a      	str	r2, [r3, #8]
 80048fc:	e26f      	b.n	8004dde <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048fe:	f7fe fa79 	bl	8002df4 <HAL_RCC_GetPCLK1Freq>
 8004902:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	461d      	mov	r5, r3
 8004908:	f04f 0600 	mov.w	r6, #0
 800490c:	46a8      	mov	r8, r5
 800490e:	46b1      	mov	r9, r6
 8004910:	eb18 0308 	adds.w	r3, r8, r8
 8004914:	eb49 0409 	adc.w	r4, r9, r9
 8004918:	4698      	mov	r8, r3
 800491a:	46a1      	mov	r9, r4
 800491c:	eb18 0805 	adds.w	r8, r8, r5
 8004920:	eb49 0906 	adc.w	r9, r9, r6
 8004924:	f04f 0100 	mov.w	r1, #0
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004930:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004934:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004938:	4688      	mov	r8, r1
 800493a:	4691      	mov	r9, r2
 800493c:	eb18 0005 	adds.w	r0, r8, r5
 8004940:	eb49 0106 	adc.w	r1, r9, r6
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	461d      	mov	r5, r3
 800494a:	f04f 0600 	mov.w	r6, #0
 800494e:	196b      	adds	r3, r5, r5
 8004950:	eb46 0406 	adc.w	r4, r6, r6
 8004954:	461a      	mov	r2, r3
 8004956:	4623      	mov	r3, r4
 8004958:	f7fc f924 	bl	8000ba4 <__aeabi_uldivmod>
 800495c:	4603      	mov	r3, r0
 800495e:	460c      	mov	r4, r1
 8004960:	461a      	mov	r2, r3
 8004962:	4b47      	ldr	r3, [pc, #284]	; (8004a80 <UART_SetConfig+0x384>)
 8004964:	fba3 2302 	umull	r2, r3, r3, r2
 8004968:	095b      	lsrs	r3, r3, #5
 800496a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	461d      	mov	r5, r3
 8004972:	f04f 0600 	mov.w	r6, #0
 8004976:	46a9      	mov	r9, r5
 8004978:	46b2      	mov	sl, r6
 800497a:	eb19 0309 	adds.w	r3, r9, r9
 800497e:	eb4a 040a 	adc.w	r4, sl, sl
 8004982:	4699      	mov	r9, r3
 8004984:	46a2      	mov	sl, r4
 8004986:	eb19 0905 	adds.w	r9, r9, r5
 800498a:	eb4a 0a06 	adc.w	sl, sl, r6
 800498e:	f04f 0100 	mov.w	r1, #0
 8004992:	f04f 0200 	mov.w	r2, #0
 8004996:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800499a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800499e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049a2:	4689      	mov	r9, r1
 80049a4:	4692      	mov	sl, r2
 80049a6:	eb19 0005 	adds.w	r0, r9, r5
 80049aa:	eb4a 0106 	adc.w	r1, sl, r6
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	461d      	mov	r5, r3
 80049b4:	f04f 0600 	mov.w	r6, #0
 80049b8:	196b      	adds	r3, r5, r5
 80049ba:	eb46 0406 	adc.w	r4, r6, r6
 80049be:	461a      	mov	r2, r3
 80049c0:	4623      	mov	r3, r4
 80049c2:	f7fc f8ef 	bl	8000ba4 <__aeabi_uldivmod>
 80049c6:	4603      	mov	r3, r0
 80049c8:	460c      	mov	r4, r1
 80049ca:	461a      	mov	r2, r3
 80049cc:	4b2c      	ldr	r3, [pc, #176]	; (8004a80 <UART_SetConfig+0x384>)
 80049ce:	fba3 1302 	umull	r1, r3, r3, r2
 80049d2:	095b      	lsrs	r3, r3, #5
 80049d4:	2164      	movs	r1, #100	; 0x64
 80049d6:	fb01 f303 	mul.w	r3, r1, r3
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	3332      	adds	r3, #50	; 0x32
 80049e0:	4a27      	ldr	r2, [pc, #156]	; (8004a80 <UART_SetConfig+0x384>)
 80049e2:	fba2 2303 	umull	r2, r3, r2, r3
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049ee:	4498      	add	r8, r3
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	461d      	mov	r5, r3
 80049f4:	f04f 0600 	mov.w	r6, #0
 80049f8:	46a9      	mov	r9, r5
 80049fa:	46b2      	mov	sl, r6
 80049fc:	eb19 0309 	adds.w	r3, r9, r9
 8004a00:	eb4a 040a 	adc.w	r4, sl, sl
 8004a04:	4699      	mov	r9, r3
 8004a06:	46a2      	mov	sl, r4
 8004a08:	eb19 0905 	adds.w	r9, r9, r5
 8004a0c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004a10:	f04f 0100 	mov.w	r1, #0
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a24:	4689      	mov	r9, r1
 8004a26:	4692      	mov	sl, r2
 8004a28:	eb19 0005 	adds.w	r0, r9, r5
 8004a2c:	eb4a 0106 	adc.w	r1, sl, r6
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	461d      	mov	r5, r3
 8004a36:	f04f 0600 	mov.w	r6, #0
 8004a3a:	196b      	adds	r3, r5, r5
 8004a3c:	eb46 0406 	adc.w	r4, r6, r6
 8004a40:	461a      	mov	r2, r3
 8004a42:	4623      	mov	r3, r4
 8004a44:	f7fc f8ae 	bl	8000ba4 <__aeabi_uldivmod>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	460c      	mov	r4, r1
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	4b0c      	ldr	r3, [pc, #48]	; (8004a80 <UART_SetConfig+0x384>)
 8004a50:	fba3 1302 	umull	r1, r3, r3, r2
 8004a54:	095b      	lsrs	r3, r3, #5
 8004a56:	2164      	movs	r1, #100	; 0x64
 8004a58:	fb01 f303 	mul.w	r3, r1, r3
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	3332      	adds	r3, #50	; 0x32
 8004a62:	4a07      	ldr	r2, [pc, #28]	; (8004a80 <UART_SetConfig+0x384>)
 8004a64:	fba2 2303 	umull	r2, r3, r2, r3
 8004a68:	095b      	lsrs	r3, r3, #5
 8004a6a:	f003 0207 	and.w	r2, r3, #7
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4442      	add	r2, r8
 8004a74:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004a76:	e1b2      	b.n	8004dde <UART_SetConfig+0x6e2>
 8004a78:	40011000 	.word	0x40011000
 8004a7c:	40011400 	.word	0x40011400
 8004a80:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4ad7      	ldr	r2, [pc, #860]	; (8004de8 <UART_SetConfig+0x6ec>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d005      	beq.n	8004a9a <UART_SetConfig+0x39e>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4ad6      	ldr	r2, [pc, #856]	; (8004dec <UART_SetConfig+0x6f0>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	f040 80d1 	bne.w	8004c3c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a9a:	f7fe f9bf 	bl	8002e1c <HAL_RCC_GetPCLK2Freq>
 8004a9e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	469a      	mov	sl, r3
 8004aa4:	f04f 0b00 	mov.w	fp, #0
 8004aa8:	46d0      	mov	r8, sl
 8004aaa:	46d9      	mov	r9, fp
 8004aac:	eb18 0308 	adds.w	r3, r8, r8
 8004ab0:	eb49 0409 	adc.w	r4, r9, r9
 8004ab4:	4698      	mov	r8, r3
 8004ab6:	46a1      	mov	r9, r4
 8004ab8:	eb18 080a 	adds.w	r8, r8, sl
 8004abc:	eb49 090b 	adc.w	r9, r9, fp
 8004ac0:	f04f 0100 	mov.w	r1, #0
 8004ac4:	f04f 0200 	mov.w	r2, #0
 8004ac8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004acc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004ad0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ad4:	4688      	mov	r8, r1
 8004ad6:	4691      	mov	r9, r2
 8004ad8:	eb1a 0508 	adds.w	r5, sl, r8
 8004adc:	eb4b 0609 	adc.w	r6, fp, r9
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	f04f 0200 	mov.w	r2, #0
 8004aea:	f04f 0300 	mov.w	r3, #0
 8004aee:	f04f 0400 	mov.w	r4, #0
 8004af2:	0094      	lsls	r4, r2, #2
 8004af4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004af8:	008b      	lsls	r3, r1, #2
 8004afa:	461a      	mov	r2, r3
 8004afc:	4623      	mov	r3, r4
 8004afe:	4628      	mov	r0, r5
 8004b00:	4631      	mov	r1, r6
 8004b02:	f7fc f84f 	bl	8000ba4 <__aeabi_uldivmod>
 8004b06:	4603      	mov	r3, r0
 8004b08:	460c      	mov	r4, r1
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	4bb8      	ldr	r3, [pc, #736]	; (8004df0 <UART_SetConfig+0x6f4>)
 8004b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b12:	095b      	lsrs	r3, r3, #5
 8004b14:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	469b      	mov	fp, r3
 8004b1c:	f04f 0c00 	mov.w	ip, #0
 8004b20:	46d9      	mov	r9, fp
 8004b22:	46e2      	mov	sl, ip
 8004b24:	eb19 0309 	adds.w	r3, r9, r9
 8004b28:	eb4a 040a 	adc.w	r4, sl, sl
 8004b2c:	4699      	mov	r9, r3
 8004b2e:	46a2      	mov	sl, r4
 8004b30:	eb19 090b 	adds.w	r9, r9, fp
 8004b34:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b38:	f04f 0100 	mov.w	r1, #0
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b4c:	4689      	mov	r9, r1
 8004b4e:	4692      	mov	sl, r2
 8004b50:	eb1b 0509 	adds.w	r5, fp, r9
 8004b54:	eb4c 060a 	adc.w	r6, ip, sl
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	f04f 0200 	mov.w	r2, #0
 8004b62:	f04f 0300 	mov.w	r3, #0
 8004b66:	f04f 0400 	mov.w	r4, #0
 8004b6a:	0094      	lsls	r4, r2, #2
 8004b6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b70:	008b      	lsls	r3, r1, #2
 8004b72:	461a      	mov	r2, r3
 8004b74:	4623      	mov	r3, r4
 8004b76:	4628      	mov	r0, r5
 8004b78:	4631      	mov	r1, r6
 8004b7a:	f7fc f813 	bl	8000ba4 <__aeabi_uldivmod>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	460c      	mov	r4, r1
 8004b82:	461a      	mov	r2, r3
 8004b84:	4b9a      	ldr	r3, [pc, #616]	; (8004df0 <UART_SetConfig+0x6f4>)
 8004b86:	fba3 1302 	umull	r1, r3, r3, r2
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	2164      	movs	r1, #100	; 0x64
 8004b8e:	fb01 f303 	mul.w	r3, r1, r3
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	011b      	lsls	r3, r3, #4
 8004b96:	3332      	adds	r3, #50	; 0x32
 8004b98:	4a95      	ldr	r2, [pc, #596]	; (8004df0 <UART_SetConfig+0x6f4>)
 8004b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9e:	095b      	lsrs	r3, r3, #5
 8004ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ba4:	4498      	add	r8, r3
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	469b      	mov	fp, r3
 8004baa:	f04f 0c00 	mov.w	ip, #0
 8004bae:	46d9      	mov	r9, fp
 8004bb0:	46e2      	mov	sl, ip
 8004bb2:	eb19 0309 	adds.w	r3, r9, r9
 8004bb6:	eb4a 040a 	adc.w	r4, sl, sl
 8004bba:	4699      	mov	r9, r3
 8004bbc:	46a2      	mov	sl, r4
 8004bbe:	eb19 090b 	adds.w	r9, r9, fp
 8004bc2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004bc6:	f04f 0100 	mov.w	r1, #0
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bd2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004bd6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bda:	4689      	mov	r9, r1
 8004bdc:	4692      	mov	sl, r2
 8004bde:	eb1b 0509 	adds.w	r5, fp, r9
 8004be2:	eb4c 060a 	adc.w	r6, ip, sl
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	4619      	mov	r1, r3
 8004bec:	f04f 0200 	mov.w	r2, #0
 8004bf0:	f04f 0300 	mov.w	r3, #0
 8004bf4:	f04f 0400 	mov.w	r4, #0
 8004bf8:	0094      	lsls	r4, r2, #2
 8004bfa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004bfe:	008b      	lsls	r3, r1, #2
 8004c00:	461a      	mov	r2, r3
 8004c02:	4623      	mov	r3, r4
 8004c04:	4628      	mov	r0, r5
 8004c06:	4631      	mov	r1, r6
 8004c08:	f7fb ffcc 	bl	8000ba4 <__aeabi_uldivmod>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	460c      	mov	r4, r1
 8004c10:	461a      	mov	r2, r3
 8004c12:	4b77      	ldr	r3, [pc, #476]	; (8004df0 <UART_SetConfig+0x6f4>)
 8004c14:	fba3 1302 	umull	r1, r3, r3, r2
 8004c18:	095b      	lsrs	r3, r3, #5
 8004c1a:	2164      	movs	r1, #100	; 0x64
 8004c1c:	fb01 f303 	mul.w	r3, r1, r3
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	011b      	lsls	r3, r3, #4
 8004c24:	3332      	adds	r3, #50	; 0x32
 8004c26:	4a72      	ldr	r2, [pc, #456]	; (8004df0 <UART_SetConfig+0x6f4>)
 8004c28:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	f003 020f 	and.w	r2, r3, #15
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4442      	add	r2, r8
 8004c38:	609a      	str	r2, [r3, #8]
 8004c3a:	e0d0      	b.n	8004dde <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c3c:	f7fe f8da 	bl	8002df4 <HAL_RCC_GetPCLK1Freq>
 8004c40:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	469a      	mov	sl, r3
 8004c46:	f04f 0b00 	mov.w	fp, #0
 8004c4a:	46d0      	mov	r8, sl
 8004c4c:	46d9      	mov	r9, fp
 8004c4e:	eb18 0308 	adds.w	r3, r8, r8
 8004c52:	eb49 0409 	adc.w	r4, r9, r9
 8004c56:	4698      	mov	r8, r3
 8004c58:	46a1      	mov	r9, r4
 8004c5a:	eb18 080a 	adds.w	r8, r8, sl
 8004c5e:	eb49 090b 	adc.w	r9, r9, fp
 8004c62:	f04f 0100 	mov.w	r1, #0
 8004c66:	f04f 0200 	mov.w	r2, #0
 8004c6a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c6e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c72:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c76:	4688      	mov	r8, r1
 8004c78:	4691      	mov	r9, r2
 8004c7a:	eb1a 0508 	adds.w	r5, sl, r8
 8004c7e:	eb4b 0609 	adc.w	r6, fp, r9
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	4619      	mov	r1, r3
 8004c88:	f04f 0200 	mov.w	r2, #0
 8004c8c:	f04f 0300 	mov.w	r3, #0
 8004c90:	f04f 0400 	mov.w	r4, #0
 8004c94:	0094      	lsls	r4, r2, #2
 8004c96:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c9a:	008b      	lsls	r3, r1, #2
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	4623      	mov	r3, r4
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	4631      	mov	r1, r6
 8004ca4:	f7fb ff7e 	bl	8000ba4 <__aeabi_uldivmod>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	460c      	mov	r4, r1
 8004cac:	461a      	mov	r2, r3
 8004cae:	4b50      	ldr	r3, [pc, #320]	; (8004df0 <UART_SetConfig+0x6f4>)
 8004cb0:	fba3 2302 	umull	r2, r3, r3, r2
 8004cb4:	095b      	lsrs	r3, r3, #5
 8004cb6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	469b      	mov	fp, r3
 8004cbe:	f04f 0c00 	mov.w	ip, #0
 8004cc2:	46d9      	mov	r9, fp
 8004cc4:	46e2      	mov	sl, ip
 8004cc6:	eb19 0309 	adds.w	r3, r9, r9
 8004cca:	eb4a 040a 	adc.w	r4, sl, sl
 8004cce:	4699      	mov	r9, r3
 8004cd0:	46a2      	mov	sl, r4
 8004cd2:	eb19 090b 	adds.w	r9, r9, fp
 8004cd6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004cda:	f04f 0100 	mov.w	r1, #0
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ce6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cee:	4689      	mov	r9, r1
 8004cf0:	4692      	mov	sl, r2
 8004cf2:	eb1b 0509 	adds.w	r5, fp, r9
 8004cf6:	eb4c 060a 	adc.w	r6, ip, sl
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	4619      	mov	r1, r3
 8004d00:	f04f 0200 	mov.w	r2, #0
 8004d04:	f04f 0300 	mov.w	r3, #0
 8004d08:	f04f 0400 	mov.w	r4, #0
 8004d0c:	0094      	lsls	r4, r2, #2
 8004d0e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d12:	008b      	lsls	r3, r1, #2
 8004d14:	461a      	mov	r2, r3
 8004d16:	4623      	mov	r3, r4
 8004d18:	4628      	mov	r0, r5
 8004d1a:	4631      	mov	r1, r6
 8004d1c:	f7fb ff42 	bl	8000ba4 <__aeabi_uldivmod>
 8004d20:	4603      	mov	r3, r0
 8004d22:	460c      	mov	r4, r1
 8004d24:	461a      	mov	r2, r3
 8004d26:	4b32      	ldr	r3, [pc, #200]	; (8004df0 <UART_SetConfig+0x6f4>)
 8004d28:	fba3 1302 	umull	r1, r3, r3, r2
 8004d2c:	095b      	lsrs	r3, r3, #5
 8004d2e:	2164      	movs	r1, #100	; 0x64
 8004d30:	fb01 f303 	mul.w	r3, r1, r3
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	011b      	lsls	r3, r3, #4
 8004d38:	3332      	adds	r3, #50	; 0x32
 8004d3a:	4a2d      	ldr	r2, [pc, #180]	; (8004df0 <UART_SetConfig+0x6f4>)
 8004d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d40:	095b      	lsrs	r3, r3, #5
 8004d42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d46:	4498      	add	r8, r3
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	469b      	mov	fp, r3
 8004d4c:	f04f 0c00 	mov.w	ip, #0
 8004d50:	46d9      	mov	r9, fp
 8004d52:	46e2      	mov	sl, ip
 8004d54:	eb19 0309 	adds.w	r3, r9, r9
 8004d58:	eb4a 040a 	adc.w	r4, sl, sl
 8004d5c:	4699      	mov	r9, r3
 8004d5e:	46a2      	mov	sl, r4
 8004d60:	eb19 090b 	adds.w	r9, r9, fp
 8004d64:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d68:	f04f 0100 	mov.w	r1, #0
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d7c:	4689      	mov	r9, r1
 8004d7e:	4692      	mov	sl, r2
 8004d80:	eb1b 0509 	adds.w	r5, fp, r9
 8004d84:	eb4c 060a 	adc.w	r6, ip, sl
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	f04f 0200 	mov.w	r2, #0
 8004d92:	f04f 0300 	mov.w	r3, #0
 8004d96:	f04f 0400 	mov.w	r4, #0
 8004d9a:	0094      	lsls	r4, r2, #2
 8004d9c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004da0:	008b      	lsls	r3, r1, #2
 8004da2:	461a      	mov	r2, r3
 8004da4:	4623      	mov	r3, r4
 8004da6:	4628      	mov	r0, r5
 8004da8:	4631      	mov	r1, r6
 8004daa:	f7fb fefb 	bl	8000ba4 <__aeabi_uldivmod>
 8004dae:	4603      	mov	r3, r0
 8004db0:	460c      	mov	r4, r1
 8004db2:	461a      	mov	r2, r3
 8004db4:	4b0e      	ldr	r3, [pc, #56]	; (8004df0 <UART_SetConfig+0x6f4>)
 8004db6:	fba3 1302 	umull	r1, r3, r3, r2
 8004dba:	095b      	lsrs	r3, r3, #5
 8004dbc:	2164      	movs	r1, #100	; 0x64
 8004dbe:	fb01 f303 	mul.w	r3, r1, r3
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	011b      	lsls	r3, r3, #4
 8004dc6:	3332      	adds	r3, #50	; 0x32
 8004dc8:	4a09      	ldr	r2, [pc, #36]	; (8004df0 <UART_SetConfig+0x6f4>)
 8004dca:	fba2 2303 	umull	r2, r3, r2, r3
 8004dce:	095b      	lsrs	r3, r3, #5
 8004dd0:	f003 020f 	and.w	r2, r3, #15
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4442      	add	r2, r8
 8004dda:	609a      	str	r2, [r3, #8]
}
 8004ddc:	e7ff      	b.n	8004dde <UART_SetConfig+0x6e2>
 8004dde:	bf00      	nop
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de8:	40011000 	.word	0x40011000
 8004dec:	40011400 	.word	0x40011400
 8004df0:	51eb851f 	.word	0x51eb851f
 8004df4:	00000000 	.word	0x00000000

08004df8 <_Z12FastMathInitv>:
#include <cstdint>

float sineTable[FAST_MATH_TABLE_SIZE];

void FastMathInit()
{
 8004df8:	b590      	push	{r4, r7, lr}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
	double x = 0.0f;
 8004dfe:	f04f 0300 	mov.w	r3, #0
 8004e02:	f04f 0400 	mov.w	r4, #0
 8004e06:	e9c7 3402 	strd	r3, r4, [r7, #8]

	for (uint32_t i = 0; i < FAST_MATH_TABLE_SIZE; i++)
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	607b      	str	r3, [r7, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d81e      	bhi.n	8004e56 <_Z12FastMathInitv+0x5e>
	{
		sineTable[i] = (float) sin(x);
 8004e18:	ed97 0b02 	vldr	d0, [r7, #8]
 8004e1c:	f000 f944 	bl	80050a8 <sin>
 8004e20:	ec54 3b10 	vmov	r3, r4, d0
 8004e24:	4618      	mov	r0, r3
 8004e26:	4621      	mov	r1, r4
 8004e28:	f7fb fe6c 	bl	8000b04 <__aeabi_d2f>
 8004e2c:	4601      	mov	r1, r0
 8004e2e:	4a0e      	ldr	r2, [pc, #56]	; (8004e68 <_Z12FastMathInitv+0x70>)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	6019      	str	r1, [r3, #0]

		x += (M_PI * 2.0) / (double) FAST_MATH_TABLE_SIZE;
 8004e38:	a309      	add	r3, pc, #36	; (adr r3, 8004e60 <_Z12FastMathInitv+0x68>)
 8004e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e42:	f7fb f9e7 	bl	8000214 <__adddf3>
 8004e46:	4603      	mov	r3, r0
 8004e48:	460c      	mov	r4, r1
 8004e4a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	for (uint32_t i = 0; i < FAST_MATH_TABLE_SIZE; i++)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	3301      	adds	r3, #1
 8004e52:	607b      	str	r3, [r7, #4]
 8004e54:	e7db      	b.n	8004e0e <_Z12FastMathInitv+0x16>
	}
}
 8004e56:	bf00      	nop
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd90      	pop	{r4, r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	8d1cfee8 	.word	0x8d1cfee8
 8004e64:	3f59238d 	.word	0x3f59238d
 8004e68:	20000028 	.word	0x20000028

08004e6c <HAL_TIM_PeriodElapsedCallback>:
uint16_t SO2 = 0;
uint16_t ADC3Raw[3] = { 0, 0, 0 };
uint8_t adcIdx = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a42      	ldr	r2, [pc, #264]	; (8004f84 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d143      	bne.n	8004f06 <HAL_TIM_PeriodElapsedCallback+0x9a>
	{
		__HAL_TIM_DISABLE_IT(&htim8, TIM_IT_UPDATE);
 8004e7e:	4b42      	ldr	r3, [pc, #264]	; (8004f88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68da      	ldr	r2, [r3, #12]
 8004e84:	4b40      	ldr	r3, [pc, #256]	; (8004f88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 0201 	bic.w	r2, r2, #1
 8004e8c:	60da      	str	r2, [r3, #12]
		__HAL_TIM_DISABLE(&htim8);
 8004e8e:	4b3e      	ldr	r3, [pc, #248]	; (8004f88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6a1a      	ldr	r2, [r3, #32]
 8004e94:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e98:	4013      	ands	r3, r2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	bf0c      	ite	eq
 8004e9e:	2301      	moveq	r3, #1
 8004ea0:	2300      	movne	r3, #0
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d014      	beq.n	8004ed2 <HAL_TIM_PeriodElapsedCallback+0x66>
 8004ea8:	4b37      	ldr	r3, [pc, #220]	; (8004f88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6a1a      	ldr	r2, [r3, #32]
 8004eae:	f240 4344 	movw	r3, #1092	; 0x444
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	bf0c      	ite	eq
 8004eb8:	2301      	moveq	r3, #1
 8004eba:	2300      	movne	r3, #0
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d007      	beq.n	8004ed2 <HAL_TIM_PeriodElapsedCallback+0x66>
 8004ec2:	4b31      	ldr	r3, [pc, #196]	; (8004f88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	4b2f      	ldr	r3, [pc, #188]	; (8004f88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0201 	bic.w	r2, r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim8, 0x0);
 8004ed2:	4b2d      	ldr	r3, [pc, #180]	; (8004f88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_ENABLE_IT(&htim8, TIM_IT_UPDATE);
 8004eda:	4b2b      	ldr	r3, [pc, #172]	; (8004f88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68da      	ldr	r2, [r3, #12]
 8004ee0:	4b29      	ldr	r3, [pc, #164]	; (8004f88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f042 0201 	orr.w	r2, r2, #1
 8004ee8:	60da      	str	r2, [r3, #12]
		__HAL_TIM_ENABLE(&htim8);
 8004eea:	4b27      	ldr	r3, [pc, #156]	; (8004f88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	4b25      	ldr	r3, [pc, #148]	; (8004f88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f042 0201 	orr.w	r2, r2, #1
 8004ef8:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(TP0_GPIO_Port, TP0_Pin);
 8004efa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004efe:	4823      	ldr	r0, [pc, #140]	; (8004f8c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8004f00:	f7fd fe1b 	bl	8002b3a <HAL_GPIO_TogglePin>
		HAL_ADC_Start(&hadc2);
		HAL_ADC_Start(&hadc3);

		HAL_GPIO_TogglePin(TP1_GPIO_Port, TP1_Pin);
	}
}
 8004f04:	e03a      	b.n	8004f7c <HAL_TIM_PeriodElapsedCallback+0x110>
	else if (htim->Instance == TIM8)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a21      	ldr	r2, [pc, #132]	; (8004f90 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d135      	bne.n	8004f7c <HAL_TIM_PeriodElapsedCallback+0x110>
		HAL_GPIO_TogglePin(TP1_GPIO_Port, TP1_Pin);
 8004f10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f14:	481d      	ldr	r0, [pc, #116]	; (8004f8c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8004f16:	f7fd fe10 	bl	8002b3a <HAL_GPIO_TogglePin>
		SO1 = HAL_ADC_GetValue(&hadc1);
 8004f1a:	481e      	ldr	r0, [pc, #120]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004f1c:	f7fd f8f8 	bl	8002110 <HAL_ADC_GetValue>
 8004f20:	4603      	mov	r3, r0
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	4b1c      	ldr	r3, [pc, #112]	; (8004f98 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8004f26:	801a      	strh	r2, [r3, #0]
		SO2 = HAL_ADC_GetValue(&hadc2);
 8004f28:	481c      	ldr	r0, [pc, #112]	; (8004f9c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8004f2a:	f7fd f8f1 	bl	8002110 <HAL_ADC_GetValue>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	4b1b      	ldr	r3, [pc, #108]	; (8004fa0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004f34:	801a      	strh	r2, [r3, #0]
		ADC3Raw[adcIdx++] = HAL_ADC_GetValue(&hadc3);
 8004f36:	481b      	ldr	r0, [pc, #108]	; (8004fa4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004f38:	f7fd f8ea 	bl	8002110 <HAL_ADC_GetValue>
 8004f3c:	4b1a      	ldr	r3, [pc, #104]	; (8004fa8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	1c5a      	adds	r2, r3, #1
 8004f42:	b2d1      	uxtb	r1, r2
 8004f44:	4a18      	ldr	r2, [pc, #96]	; (8004fa8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004f46:	7011      	strb	r1, [r2, #0]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	b281      	uxth	r1, r0
 8004f4c:	4b17      	ldr	r3, [pc, #92]	; (8004fac <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004f4e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		if (adcIdx == 3)
 8004f52:	4b15      	ldr	r3, [pc, #84]	; (8004fa8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	2b03      	cmp	r3, #3
 8004f58:	d102      	bne.n	8004f60 <HAL_TIM_PeriodElapsedCallback+0xf4>
			adcIdx = 0;
 8004f5a:	4b13      	ldr	r3, [pc, #76]	; (8004fa8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start(&hadc1);
 8004f60:	480c      	ldr	r0, [pc, #48]	; (8004f94 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004f62:	f7fd f80f 	bl	8001f84 <HAL_ADC_Start>
		HAL_ADC_Start(&hadc2);
 8004f66:	480d      	ldr	r0, [pc, #52]	; (8004f9c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8004f68:	f7fd f80c 	bl	8001f84 <HAL_ADC_Start>
		HAL_ADC_Start(&hadc3);
 8004f6c:	480d      	ldr	r0, [pc, #52]	; (8004fa4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004f6e:	f7fd f809 	bl	8001f84 <HAL_ADC_Start>
		HAL_GPIO_TogglePin(TP1_GPIO_Port, TP1_Pin);
 8004f72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f76:	4805      	ldr	r0, [pc, #20]	; (8004f8c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8004f78:	f7fd fddf 	bl	8002b3a <HAL_GPIO_TogglePin>
}
 8004f7c:	bf00      	nop
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	40010000 	.word	0x40010000
 8004f88:	20004168 	.word	0x20004168
 8004f8c:	40020800 	.word	0x40020800
 8004f90:	40010400 	.word	0x40010400
 8004f94:	20004078 	.word	0x20004078
 8004f98:	20004024 	.word	0x20004024
 8004f9c:	20004030 	.word	0x20004030
 8004fa0:	20004026 	.word	0x20004026
 8004fa4:	200040c0 	.word	0x200040c0
 8004fa8:	2000402e 	.word	0x2000402e
 8004fac:	20004028 	.word	0x20004028

08004fb0 <_Z15StartOnBoardLEDv>:

void StartOnBoardLED()
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8004fb4:	210c      	movs	r1, #12
 8004fb6:	4802      	ldr	r0, [pc, #8]	; (8004fc0 <_Z15StartOnBoardLEDv+0x10>)
 8004fb8:	f7fe fc26 	bl	8003808 <HAL_TIM_PWM_Start>
}
 8004fbc:	bf00      	nop
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	200041e8 	.word	0x200041e8

08004fc4 <_Z13SetOnBoardLEDm>:

void SetOnBoardLED(uint32_t duty)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
	htim2.Instance->CCR4 = duty;
 8004fcc:	4b04      	ldr	r3, [pc, #16]	; (8004fe0 <_Z13SetOnBoardLEDm+0x1c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	200041e8 	.word	0x200041e8

08004fe4 <_Z17StartControlTimerv>:

void StartControlTimer()
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim1);
 8004fe8:	4803      	ldr	r0, [pc, #12]	; (8004ff8 <_Z17StartControlTimerv+0x14>)
 8004fea:	f7fe fbb4 	bl	8003756 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 8004fee:	4803      	ldr	r0, [pc, #12]	; (8004ffc <_Z17StartControlTimerv+0x18>)
 8004ff0:	f7fe fbb1 	bl	8003756 <HAL_TIM_Base_Start_IT>
}
 8004ff4:	bf00      	nop
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	200041a8 	.word	0x200041a8
 8004ffc:	20004168 	.word	0x20004168

08005000 <_Z16StartInverterPWMv>:

void StartInverterPWM()
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8005004:	2100      	movs	r1, #0
 8005006:	480c      	ldr	r0, [pc, #48]	; (8005038 <_Z16StartInverterPWMv+0x38>)
 8005008:	f7fe fbfe 	bl	8003808 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800500c:	2104      	movs	r1, #4
 800500e:	480a      	ldr	r0, [pc, #40]	; (8005038 <_Z16StartInverterPWMv+0x38>)
 8005010:	f7fe fbfa 	bl	8003808 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8005014:	2108      	movs	r1, #8
 8005016:	4808      	ldr	r0, [pc, #32]	; (8005038 <_Z16StartInverterPWMv+0x38>)
 8005018:	f7fe fbf6 	bl	8003808 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800501c:	2100      	movs	r1, #0
 800501e:	4806      	ldr	r0, [pc, #24]	; (8005038 <_Z16StartInverterPWMv+0x38>)
 8005020:	f7ff f9ed 	bl	80043fe <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8005024:	2104      	movs	r1, #4
 8005026:	4804      	ldr	r0, [pc, #16]	; (8005038 <_Z16StartInverterPWMv+0x38>)
 8005028:	f7ff f9e9 	bl	80043fe <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800502c:	2108      	movs	r1, #8
 800502e:	4802      	ldr	r0, [pc, #8]	; (8005038 <_Z16StartInverterPWMv+0x38>)
 8005030:	f7ff f9e5 	bl	80043fe <HAL_TIMEx_PWMN_Start>
}
 8005034:	bf00      	nop
 8005036:	bd80      	pop	{r7, pc}
 8005038:	200041a8 	.word	0x200041a8

0800503c <_Z8StartADCv>:
	TIM1->CCR2 = bDuty;
	TIM1->CCR3 = cDuty;
}

void StartADC()
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_CAL_GPIO_Port, DC_CAL_Pin, GPIO_PIN_RESET);
 8005040:	2200      	movs	r2, #0
 8005042:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005046:	4807      	ldr	r0, [pc, #28]	; (8005064 <_Z8StartADCv+0x28>)
 8005048:	f7fd fd5e 	bl	8002b08 <HAL_GPIO_WritePin>
	HAL_ADC_Start(&hadc1);
 800504c:	4806      	ldr	r0, [pc, #24]	; (8005068 <_Z8StartADCv+0x2c>)
 800504e:	f7fc ff99 	bl	8001f84 <HAL_ADC_Start>
	HAL_ADC_Start(&hadc2);
 8005052:	4806      	ldr	r0, [pc, #24]	; (800506c <_Z8StartADCv+0x30>)
 8005054:	f7fc ff96 	bl	8001f84 <HAL_ADC_Start>
	HAL_ADC_Start(&hadc3);
 8005058:	4805      	ldr	r0, [pc, #20]	; (8005070 <_Z8StartADCv+0x34>)
 800505a:	f7fc ff93 	bl	8001f84 <HAL_ADC_Start>
}
 800505e:	bf00      	nop
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	40020800 	.word	0x40020800
 8005068:	20004078 	.word	0x20004078
 800506c:	20004030 	.word	0x20004030
 8005070:	200040c0 	.word	0x200040c0

08005074 <_Z13OffGateDriverv>:
{
	HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, GPIO_PIN_SET);
}

void OffGateDriver()
{
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, GPIO_PIN_RESET);
 8005078:	2200      	movs	r2, #0
 800507a:	2180      	movs	r1, #128	; 0x80
 800507c:	4802      	ldr	r0, [pc, #8]	; (8005088 <_Z13OffGateDriverv+0x14>)
 800507e:	f7fd fd43 	bl	8002b08 <HAL_GPIO_WritePin>
}
 8005082:	bf00      	nop
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	40020800 	.word	0x40020800

0800508c <_Z11Delaymillism>:
#include <Util/util.hpp>

void Delaymillis(uint32_t ms)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7fc ff0f 	bl	8001eb8 <HAL_Delay>
}
 800509a:	bf00      	nop
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	0000      	movs	r0, r0
 80050a4:	0000      	movs	r0, r0
	...

080050a8 <sin>:
 80050a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80050aa:	ec51 0b10 	vmov	r0, r1, d0
 80050ae:	4a20      	ldr	r2, [pc, #128]	; (8005130 <sin+0x88>)
 80050b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80050b4:	4293      	cmp	r3, r2
 80050b6:	dc07      	bgt.n	80050c8 <sin+0x20>
 80050b8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8005128 <sin+0x80>
 80050bc:	2000      	movs	r0, #0
 80050be:	f000 fe37 	bl	8005d30 <__kernel_sin>
 80050c2:	ec51 0b10 	vmov	r0, r1, d0
 80050c6:	e007      	b.n	80050d8 <sin+0x30>
 80050c8:	4a1a      	ldr	r2, [pc, #104]	; (8005134 <sin+0x8c>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	dd09      	ble.n	80050e2 <sin+0x3a>
 80050ce:	ee10 2a10 	vmov	r2, s0
 80050d2:	460b      	mov	r3, r1
 80050d4:	f7fb f89c 	bl	8000210 <__aeabi_dsub>
 80050d8:	ec41 0b10 	vmov	d0, r0, r1
 80050dc:	b005      	add	sp, #20
 80050de:	f85d fb04 	ldr.w	pc, [sp], #4
 80050e2:	4668      	mov	r0, sp
 80050e4:	f000 f828 	bl	8005138 <__ieee754_rem_pio2>
 80050e8:	f000 0003 	and.w	r0, r0, #3
 80050ec:	2801      	cmp	r0, #1
 80050ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80050f2:	ed9d 0b00 	vldr	d0, [sp]
 80050f6:	d004      	beq.n	8005102 <sin+0x5a>
 80050f8:	2802      	cmp	r0, #2
 80050fa:	d005      	beq.n	8005108 <sin+0x60>
 80050fc:	b970      	cbnz	r0, 800511c <sin+0x74>
 80050fe:	2001      	movs	r0, #1
 8005100:	e7dd      	b.n	80050be <sin+0x16>
 8005102:	f000 fa0d 	bl	8005520 <__kernel_cos>
 8005106:	e7dc      	b.n	80050c2 <sin+0x1a>
 8005108:	2001      	movs	r0, #1
 800510a:	f000 fe11 	bl	8005d30 <__kernel_sin>
 800510e:	ec53 2b10 	vmov	r2, r3, d0
 8005112:	ee10 0a10 	vmov	r0, s0
 8005116:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800511a:	e7dd      	b.n	80050d8 <sin+0x30>
 800511c:	f000 fa00 	bl	8005520 <__kernel_cos>
 8005120:	e7f5      	b.n	800510e <sin+0x66>
 8005122:	bf00      	nop
 8005124:	f3af 8000 	nop.w
	...
 8005130:	3fe921fb 	.word	0x3fe921fb
 8005134:	7fefffff 	.word	0x7fefffff

08005138 <__ieee754_rem_pio2>:
 8005138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800513c:	ec57 6b10 	vmov	r6, r7, d0
 8005140:	4bc3      	ldr	r3, [pc, #780]	; (8005450 <__ieee754_rem_pio2+0x318>)
 8005142:	b08d      	sub	sp, #52	; 0x34
 8005144:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005148:	4598      	cmp	r8, r3
 800514a:	4604      	mov	r4, r0
 800514c:	9704      	str	r7, [sp, #16]
 800514e:	dc07      	bgt.n	8005160 <__ieee754_rem_pio2+0x28>
 8005150:	2200      	movs	r2, #0
 8005152:	2300      	movs	r3, #0
 8005154:	ed84 0b00 	vstr	d0, [r4]
 8005158:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800515c:	2500      	movs	r5, #0
 800515e:	e027      	b.n	80051b0 <__ieee754_rem_pio2+0x78>
 8005160:	4bbc      	ldr	r3, [pc, #752]	; (8005454 <__ieee754_rem_pio2+0x31c>)
 8005162:	4598      	cmp	r8, r3
 8005164:	dc75      	bgt.n	8005252 <__ieee754_rem_pio2+0x11a>
 8005166:	9b04      	ldr	r3, [sp, #16]
 8005168:	4dbb      	ldr	r5, [pc, #748]	; (8005458 <__ieee754_rem_pio2+0x320>)
 800516a:	2b00      	cmp	r3, #0
 800516c:	ee10 0a10 	vmov	r0, s0
 8005170:	a3a9      	add	r3, pc, #676	; (adr r3, 8005418 <__ieee754_rem_pio2+0x2e0>)
 8005172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005176:	4639      	mov	r1, r7
 8005178:	dd36      	ble.n	80051e8 <__ieee754_rem_pio2+0xb0>
 800517a:	f7fb f849 	bl	8000210 <__aeabi_dsub>
 800517e:	45a8      	cmp	r8, r5
 8005180:	4606      	mov	r6, r0
 8005182:	460f      	mov	r7, r1
 8005184:	d018      	beq.n	80051b8 <__ieee754_rem_pio2+0x80>
 8005186:	a3a6      	add	r3, pc, #664	; (adr r3, 8005420 <__ieee754_rem_pio2+0x2e8>)
 8005188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518c:	f7fb f840 	bl	8000210 <__aeabi_dsub>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	e9c4 2300 	strd	r2, r3, [r4]
 8005198:	4630      	mov	r0, r6
 800519a:	4639      	mov	r1, r7
 800519c:	f7fb f838 	bl	8000210 <__aeabi_dsub>
 80051a0:	a39f      	add	r3, pc, #636	; (adr r3, 8005420 <__ieee754_rem_pio2+0x2e8>)
 80051a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a6:	f7fb f833 	bl	8000210 <__aeabi_dsub>
 80051aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80051ae:	2501      	movs	r5, #1
 80051b0:	4628      	mov	r0, r5
 80051b2:	b00d      	add	sp, #52	; 0x34
 80051b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051b8:	a39b      	add	r3, pc, #620	; (adr r3, 8005428 <__ieee754_rem_pio2+0x2f0>)
 80051ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051be:	f7fb f827 	bl	8000210 <__aeabi_dsub>
 80051c2:	a39b      	add	r3, pc, #620	; (adr r3, 8005430 <__ieee754_rem_pio2+0x2f8>)
 80051c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c8:	4606      	mov	r6, r0
 80051ca:	460f      	mov	r7, r1
 80051cc:	f7fb f820 	bl	8000210 <__aeabi_dsub>
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	e9c4 2300 	strd	r2, r3, [r4]
 80051d8:	4630      	mov	r0, r6
 80051da:	4639      	mov	r1, r7
 80051dc:	f7fb f818 	bl	8000210 <__aeabi_dsub>
 80051e0:	a393      	add	r3, pc, #588	; (adr r3, 8005430 <__ieee754_rem_pio2+0x2f8>)
 80051e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e6:	e7de      	b.n	80051a6 <__ieee754_rem_pio2+0x6e>
 80051e8:	f7fb f814 	bl	8000214 <__adddf3>
 80051ec:	45a8      	cmp	r8, r5
 80051ee:	4606      	mov	r6, r0
 80051f0:	460f      	mov	r7, r1
 80051f2:	d016      	beq.n	8005222 <__ieee754_rem_pio2+0xea>
 80051f4:	a38a      	add	r3, pc, #552	; (adr r3, 8005420 <__ieee754_rem_pio2+0x2e8>)
 80051f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fa:	f7fb f80b 	bl	8000214 <__adddf3>
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	e9c4 2300 	strd	r2, r3, [r4]
 8005206:	4630      	mov	r0, r6
 8005208:	4639      	mov	r1, r7
 800520a:	f7fb f801 	bl	8000210 <__aeabi_dsub>
 800520e:	a384      	add	r3, pc, #528	; (adr r3, 8005420 <__ieee754_rem_pio2+0x2e8>)
 8005210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005214:	f7fa fffe 	bl	8000214 <__adddf3>
 8005218:	f04f 35ff 	mov.w	r5, #4294967295
 800521c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005220:	e7c6      	b.n	80051b0 <__ieee754_rem_pio2+0x78>
 8005222:	a381      	add	r3, pc, #516	; (adr r3, 8005428 <__ieee754_rem_pio2+0x2f0>)
 8005224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005228:	f7fa fff4 	bl	8000214 <__adddf3>
 800522c:	a380      	add	r3, pc, #512	; (adr r3, 8005430 <__ieee754_rem_pio2+0x2f8>)
 800522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005232:	4606      	mov	r6, r0
 8005234:	460f      	mov	r7, r1
 8005236:	f7fa ffed 	bl	8000214 <__adddf3>
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	e9c4 2300 	strd	r2, r3, [r4]
 8005242:	4630      	mov	r0, r6
 8005244:	4639      	mov	r1, r7
 8005246:	f7fa ffe3 	bl	8000210 <__aeabi_dsub>
 800524a:	a379      	add	r3, pc, #484	; (adr r3, 8005430 <__ieee754_rem_pio2+0x2f8>)
 800524c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005250:	e7e0      	b.n	8005214 <__ieee754_rem_pio2+0xdc>
 8005252:	4b82      	ldr	r3, [pc, #520]	; (800545c <__ieee754_rem_pio2+0x324>)
 8005254:	4598      	cmp	r8, r3
 8005256:	f300 80d0 	bgt.w	80053fa <__ieee754_rem_pio2+0x2c2>
 800525a:	f000 fe23 	bl	8005ea4 <fabs>
 800525e:	ec57 6b10 	vmov	r6, r7, d0
 8005262:	ee10 0a10 	vmov	r0, s0
 8005266:	a374      	add	r3, pc, #464	; (adr r3, 8005438 <__ieee754_rem_pio2+0x300>)
 8005268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526c:	4639      	mov	r1, r7
 800526e:	f7fb f987 	bl	8000580 <__aeabi_dmul>
 8005272:	2200      	movs	r2, #0
 8005274:	4b7a      	ldr	r3, [pc, #488]	; (8005460 <__ieee754_rem_pio2+0x328>)
 8005276:	f7fa ffcd 	bl	8000214 <__adddf3>
 800527a:	f7fb fc1b 	bl	8000ab4 <__aeabi_d2iz>
 800527e:	4605      	mov	r5, r0
 8005280:	f7fb f914 	bl	80004ac <__aeabi_i2d>
 8005284:	a364      	add	r3, pc, #400	; (adr r3, 8005418 <__ieee754_rem_pio2+0x2e0>)
 8005286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800528e:	f7fb f977 	bl	8000580 <__aeabi_dmul>
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	4630      	mov	r0, r6
 8005298:	4639      	mov	r1, r7
 800529a:	f7fa ffb9 	bl	8000210 <__aeabi_dsub>
 800529e:	a360      	add	r3, pc, #384	; (adr r3, 8005420 <__ieee754_rem_pio2+0x2e8>)
 80052a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a4:	4682      	mov	sl, r0
 80052a6:	468b      	mov	fp, r1
 80052a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052ac:	f7fb f968 	bl	8000580 <__aeabi_dmul>
 80052b0:	2d1f      	cmp	r5, #31
 80052b2:	4606      	mov	r6, r0
 80052b4:	460f      	mov	r7, r1
 80052b6:	dc0c      	bgt.n	80052d2 <__ieee754_rem_pio2+0x19a>
 80052b8:	1e6a      	subs	r2, r5, #1
 80052ba:	4b6a      	ldr	r3, [pc, #424]	; (8005464 <__ieee754_rem_pio2+0x32c>)
 80052bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052c0:	4543      	cmp	r3, r8
 80052c2:	d006      	beq.n	80052d2 <__ieee754_rem_pio2+0x19a>
 80052c4:	4632      	mov	r2, r6
 80052c6:	463b      	mov	r3, r7
 80052c8:	4650      	mov	r0, sl
 80052ca:	4659      	mov	r1, fp
 80052cc:	f7fa ffa0 	bl	8000210 <__aeabi_dsub>
 80052d0:	e00e      	b.n	80052f0 <__ieee754_rem_pio2+0x1b8>
 80052d2:	4632      	mov	r2, r6
 80052d4:	463b      	mov	r3, r7
 80052d6:	4650      	mov	r0, sl
 80052d8:	4659      	mov	r1, fp
 80052da:	f7fa ff99 	bl	8000210 <__aeabi_dsub>
 80052de:	ea4f 5328 	mov.w	r3, r8, asr #20
 80052e2:	9305      	str	r3, [sp, #20]
 80052e4:	9a05      	ldr	r2, [sp, #20]
 80052e6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b10      	cmp	r3, #16
 80052ee:	dc02      	bgt.n	80052f6 <__ieee754_rem_pio2+0x1be>
 80052f0:	e9c4 0100 	strd	r0, r1, [r4]
 80052f4:	e039      	b.n	800536a <__ieee754_rem_pio2+0x232>
 80052f6:	a34c      	add	r3, pc, #304	; (adr r3, 8005428 <__ieee754_rem_pio2+0x2f0>)
 80052f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005300:	f7fb f93e 	bl	8000580 <__aeabi_dmul>
 8005304:	4606      	mov	r6, r0
 8005306:	460f      	mov	r7, r1
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	4650      	mov	r0, sl
 800530e:	4659      	mov	r1, fp
 8005310:	f7fa ff7e 	bl	8000210 <__aeabi_dsub>
 8005314:	4602      	mov	r2, r0
 8005316:	460b      	mov	r3, r1
 8005318:	4680      	mov	r8, r0
 800531a:	4689      	mov	r9, r1
 800531c:	4650      	mov	r0, sl
 800531e:	4659      	mov	r1, fp
 8005320:	f7fa ff76 	bl	8000210 <__aeabi_dsub>
 8005324:	4632      	mov	r2, r6
 8005326:	463b      	mov	r3, r7
 8005328:	f7fa ff72 	bl	8000210 <__aeabi_dsub>
 800532c:	a340      	add	r3, pc, #256	; (adr r3, 8005430 <__ieee754_rem_pio2+0x2f8>)
 800532e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005332:	4606      	mov	r6, r0
 8005334:	460f      	mov	r7, r1
 8005336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800533a:	f7fb f921 	bl	8000580 <__aeabi_dmul>
 800533e:	4632      	mov	r2, r6
 8005340:	463b      	mov	r3, r7
 8005342:	f7fa ff65 	bl	8000210 <__aeabi_dsub>
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4606      	mov	r6, r0
 800534c:	460f      	mov	r7, r1
 800534e:	4640      	mov	r0, r8
 8005350:	4649      	mov	r1, r9
 8005352:	f7fa ff5d 	bl	8000210 <__aeabi_dsub>
 8005356:	9a05      	ldr	r2, [sp, #20]
 8005358:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b31      	cmp	r3, #49	; 0x31
 8005360:	dc20      	bgt.n	80053a4 <__ieee754_rem_pio2+0x26c>
 8005362:	e9c4 0100 	strd	r0, r1, [r4]
 8005366:	46c2      	mov	sl, r8
 8005368:	46cb      	mov	fp, r9
 800536a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800536e:	4650      	mov	r0, sl
 8005370:	4642      	mov	r2, r8
 8005372:	464b      	mov	r3, r9
 8005374:	4659      	mov	r1, fp
 8005376:	f7fa ff4b 	bl	8000210 <__aeabi_dsub>
 800537a:	463b      	mov	r3, r7
 800537c:	4632      	mov	r2, r6
 800537e:	f7fa ff47 	bl	8000210 <__aeabi_dsub>
 8005382:	9b04      	ldr	r3, [sp, #16]
 8005384:	2b00      	cmp	r3, #0
 8005386:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800538a:	f6bf af11 	bge.w	80051b0 <__ieee754_rem_pio2+0x78>
 800538e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005392:	6063      	str	r3, [r4, #4]
 8005394:	f8c4 8000 	str.w	r8, [r4]
 8005398:	60a0      	str	r0, [r4, #8]
 800539a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800539e:	60e3      	str	r3, [r4, #12]
 80053a0:	426d      	negs	r5, r5
 80053a2:	e705      	b.n	80051b0 <__ieee754_rem_pio2+0x78>
 80053a4:	a326      	add	r3, pc, #152	; (adr r3, 8005440 <__ieee754_rem_pio2+0x308>)
 80053a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053ae:	f7fb f8e7 	bl	8000580 <__aeabi_dmul>
 80053b2:	4606      	mov	r6, r0
 80053b4:	460f      	mov	r7, r1
 80053b6:	4602      	mov	r2, r0
 80053b8:	460b      	mov	r3, r1
 80053ba:	4640      	mov	r0, r8
 80053bc:	4649      	mov	r1, r9
 80053be:	f7fa ff27 	bl	8000210 <__aeabi_dsub>
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	4682      	mov	sl, r0
 80053c8:	468b      	mov	fp, r1
 80053ca:	4640      	mov	r0, r8
 80053cc:	4649      	mov	r1, r9
 80053ce:	f7fa ff1f 	bl	8000210 <__aeabi_dsub>
 80053d2:	4632      	mov	r2, r6
 80053d4:	463b      	mov	r3, r7
 80053d6:	f7fa ff1b 	bl	8000210 <__aeabi_dsub>
 80053da:	a31b      	add	r3, pc, #108	; (adr r3, 8005448 <__ieee754_rem_pio2+0x310>)
 80053dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e0:	4606      	mov	r6, r0
 80053e2:	460f      	mov	r7, r1
 80053e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053e8:	f7fb f8ca 	bl	8000580 <__aeabi_dmul>
 80053ec:	4632      	mov	r2, r6
 80053ee:	463b      	mov	r3, r7
 80053f0:	f7fa ff0e 	bl	8000210 <__aeabi_dsub>
 80053f4:	4606      	mov	r6, r0
 80053f6:	460f      	mov	r7, r1
 80053f8:	e764      	b.n	80052c4 <__ieee754_rem_pio2+0x18c>
 80053fa:	4b1b      	ldr	r3, [pc, #108]	; (8005468 <__ieee754_rem_pio2+0x330>)
 80053fc:	4598      	cmp	r8, r3
 80053fe:	dd35      	ble.n	800546c <__ieee754_rem_pio2+0x334>
 8005400:	ee10 2a10 	vmov	r2, s0
 8005404:	463b      	mov	r3, r7
 8005406:	4630      	mov	r0, r6
 8005408:	4639      	mov	r1, r7
 800540a:	f7fa ff01 	bl	8000210 <__aeabi_dsub>
 800540e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005412:	e9c4 0100 	strd	r0, r1, [r4]
 8005416:	e6a1      	b.n	800515c <__ieee754_rem_pio2+0x24>
 8005418:	54400000 	.word	0x54400000
 800541c:	3ff921fb 	.word	0x3ff921fb
 8005420:	1a626331 	.word	0x1a626331
 8005424:	3dd0b461 	.word	0x3dd0b461
 8005428:	1a600000 	.word	0x1a600000
 800542c:	3dd0b461 	.word	0x3dd0b461
 8005430:	2e037073 	.word	0x2e037073
 8005434:	3ba3198a 	.word	0x3ba3198a
 8005438:	6dc9c883 	.word	0x6dc9c883
 800543c:	3fe45f30 	.word	0x3fe45f30
 8005440:	2e000000 	.word	0x2e000000
 8005444:	3ba3198a 	.word	0x3ba3198a
 8005448:	252049c1 	.word	0x252049c1
 800544c:	397b839a 	.word	0x397b839a
 8005450:	3fe921fb 	.word	0x3fe921fb
 8005454:	4002d97b 	.word	0x4002d97b
 8005458:	3ff921fb 	.word	0x3ff921fb
 800545c:	413921fb 	.word	0x413921fb
 8005460:	3fe00000 	.word	0x3fe00000
 8005464:	08006158 	.word	0x08006158
 8005468:	7fefffff 	.word	0x7fefffff
 800546c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005470:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8005474:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005478:	4630      	mov	r0, r6
 800547a:	460f      	mov	r7, r1
 800547c:	f7fb fb1a 	bl	8000ab4 <__aeabi_d2iz>
 8005480:	f7fb f814 	bl	80004ac <__aeabi_i2d>
 8005484:	4602      	mov	r2, r0
 8005486:	460b      	mov	r3, r1
 8005488:	4630      	mov	r0, r6
 800548a:	4639      	mov	r1, r7
 800548c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005490:	f7fa febe 	bl	8000210 <__aeabi_dsub>
 8005494:	2200      	movs	r2, #0
 8005496:	4b1f      	ldr	r3, [pc, #124]	; (8005514 <__ieee754_rem_pio2+0x3dc>)
 8005498:	f7fb f872 	bl	8000580 <__aeabi_dmul>
 800549c:	460f      	mov	r7, r1
 800549e:	4606      	mov	r6, r0
 80054a0:	f7fb fb08 	bl	8000ab4 <__aeabi_d2iz>
 80054a4:	f7fb f802 	bl	80004ac <__aeabi_i2d>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4630      	mov	r0, r6
 80054ae:	4639      	mov	r1, r7
 80054b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80054b4:	f7fa feac 	bl	8000210 <__aeabi_dsub>
 80054b8:	2200      	movs	r2, #0
 80054ba:	4b16      	ldr	r3, [pc, #88]	; (8005514 <__ieee754_rem_pio2+0x3dc>)
 80054bc:	f7fb f860 	bl	8000580 <__aeabi_dmul>
 80054c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80054c4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80054c8:	f04f 0803 	mov.w	r8, #3
 80054cc:	2600      	movs	r6, #0
 80054ce:	2700      	movs	r7, #0
 80054d0:	4632      	mov	r2, r6
 80054d2:	463b      	mov	r3, r7
 80054d4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80054d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80054dc:	f7fb fab8 	bl	8000a50 <__aeabi_dcmpeq>
 80054e0:	b9b0      	cbnz	r0, 8005510 <__ieee754_rem_pio2+0x3d8>
 80054e2:	4b0d      	ldr	r3, [pc, #52]	; (8005518 <__ieee754_rem_pio2+0x3e0>)
 80054e4:	9301      	str	r3, [sp, #4]
 80054e6:	2302      	movs	r3, #2
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	462a      	mov	r2, r5
 80054ec:	4643      	mov	r3, r8
 80054ee:	4621      	mov	r1, r4
 80054f0:	a806      	add	r0, sp, #24
 80054f2:	f000 f8dd 	bl	80056b0 <__kernel_rem_pio2>
 80054f6:	9b04      	ldr	r3, [sp, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	4605      	mov	r5, r0
 80054fc:	f6bf ae58 	bge.w	80051b0 <__ieee754_rem_pio2+0x78>
 8005500:	6863      	ldr	r3, [r4, #4]
 8005502:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005506:	6063      	str	r3, [r4, #4]
 8005508:	68e3      	ldr	r3, [r4, #12]
 800550a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800550e:	e746      	b.n	800539e <__ieee754_rem_pio2+0x266>
 8005510:	46d0      	mov	r8, sl
 8005512:	e7dd      	b.n	80054d0 <__ieee754_rem_pio2+0x398>
 8005514:	41700000 	.word	0x41700000
 8005518:	080061d8 	.word	0x080061d8
 800551c:	00000000 	.word	0x00000000

08005520 <__kernel_cos>:
 8005520:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005524:	ec59 8b10 	vmov	r8, r9, d0
 8005528:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800552c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8005530:	ed2d 8b02 	vpush	{d8}
 8005534:	eeb0 8a41 	vmov.f32	s16, s2
 8005538:	eef0 8a61 	vmov.f32	s17, s3
 800553c:	da07      	bge.n	800554e <__kernel_cos+0x2e>
 800553e:	ee10 0a10 	vmov	r0, s0
 8005542:	4649      	mov	r1, r9
 8005544:	f7fb fab6 	bl	8000ab4 <__aeabi_d2iz>
 8005548:	2800      	cmp	r0, #0
 800554a:	f000 8089 	beq.w	8005660 <__kernel_cos+0x140>
 800554e:	4642      	mov	r2, r8
 8005550:	464b      	mov	r3, r9
 8005552:	4640      	mov	r0, r8
 8005554:	4649      	mov	r1, r9
 8005556:	f7fb f813 	bl	8000580 <__aeabi_dmul>
 800555a:	2200      	movs	r2, #0
 800555c:	4b4e      	ldr	r3, [pc, #312]	; (8005698 <__kernel_cos+0x178>)
 800555e:	4604      	mov	r4, r0
 8005560:	460d      	mov	r5, r1
 8005562:	f7fb f80d 	bl	8000580 <__aeabi_dmul>
 8005566:	a340      	add	r3, pc, #256	; (adr r3, 8005668 <__kernel_cos+0x148>)
 8005568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556c:	4682      	mov	sl, r0
 800556e:	468b      	mov	fp, r1
 8005570:	4620      	mov	r0, r4
 8005572:	4629      	mov	r1, r5
 8005574:	f7fb f804 	bl	8000580 <__aeabi_dmul>
 8005578:	a33d      	add	r3, pc, #244	; (adr r3, 8005670 <__kernel_cos+0x150>)
 800557a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557e:	f7fa fe49 	bl	8000214 <__adddf3>
 8005582:	4622      	mov	r2, r4
 8005584:	462b      	mov	r3, r5
 8005586:	f7fa fffb 	bl	8000580 <__aeabi_dmul>
 800558a:	a33b      	add	r3, pc, #236	; (adr r3, 8005678 <__kernel_cos+0x158>)
 800558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005590:	f7fa fe3e 	bl	8000210 <__aeabi_dsub>
 8005594:	4622      	mov	r2, r4
 8005596:	462b      	mov	r3, r5
 8005598:	f7fa fff2 	bl	8000580 <__aeabi_dmul>
 800559c:	a338      	add	r3, pc, #224	; (adr r3, 8005680 <__kernel_cos+0x160>)
 800559e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a2:	f7fa fe37 	bl	8000214 <__adddf3>
 80055a6:	4622      	mov	r2, r4
 80055a8:	462b      	mov	r3, r5
 80055aa:	f7fa ffe9 	bl	8000580 <__aeabi_dmul>
 80055ae:	a336      	add	r3, pc, #216	; (adr r3, 8005688 <__kernel_cos+0x168>)
 80055b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b4:	f7fa fe2c 	bl	8000210 <__aeabi_dsub>
 80055b8:	4622      	mov	r2, r4
 80055ba:	462b      	mov	r3, r5
 80055bc:	f7fa ffe0 	bl	8000580 <__aeabi_dmul>
 80055c0:	a333      	add	r3, pc, #204	; (adr r3, 8005690 <__kernel_cos+0x170>)
 80055c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c6:	f7fa fe25 	bl	8000214 <__adddf3>
 80055ca:	4622      	mov	r2, r4
 80055cc:	462b      	mov	r3, r5
 80055ce:	f7fa ffd7 	bl	8000580 <__aeabi_dmul>
 80055d2:	4622      	mov	r2, r4
 80055d4:	462b      	mov	r3, r5
 80055d6:	f7fa ffd3 	bl	8000580 <__aeabi_dmul>
 80055da:	ec53 2b18 	vmov	r2, r3, d8
 80055de:	4604      	mov	r4, r0
 80055e0:	460d      	mov	r5, r1
 80055e2:	4640      	mov	r0, r8
 80055e4:	4649      	mov	r1, r9
 80055e6:	f7fa ffcb 	bl	8000580 <__aeabi_dmul>
 80055ea:	460b      	mov	r3, r1
 80055ec:	4602      	mov	r2, r0
 80055ee:	4629      	mov	r1, r5
 80055f0:	4620      	mov	r0, r4
 80055f2:	f7fa fe0d 	bl	8000210 <__aeabi_dsub>
 80055f6:	4b29      	ldr	r3, [pc, #164]	; (800569c <__kernel_cos+0x17c>)
 80055f8:	429e      	cmp	r6, r3
 80055fa:	4680      	mov	r8, r0
 80055fc:	4689      	mov	r9, r1
 80055fe:	dc11      	bgt.n	8005624 <__kernel_cos+0x104>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4650      	mov	r0, sl
 8005606:	4659      	mov	r1, fp
 8005608:	f7fa fe02 	bl	8000210 <__aeabi_dsub>
 800560c:	460b      	mov	r3, r1
 800560e:	4924      	ldr	r1, [pc, #144]	; (80056a0 <__kernel_cos+0x180>)
 8005610:	4602      	mov	r2, r0
 8005612:	2000      	movs	r0, #0
 8005614:	f7fa fdfc 	bl	8000210 <__aeabi_dsub>
 8005618:	ecbd 8b02 	vpop	{d8}
 800561c:	ec41 0b10 	vmov	d0, r0, r1
 8005620:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005624:	4b1f      	ldr	r3, [pc, #124]	; (80056a4 <__kernel_cos+0x184>)
 8005626:	491e      	ldr	r1, [pc, #120]	; (80056a0 <__kernel_cos+0x180>)
 8005628:	429e      	cmp	r6, r3
 800562a:	bfcc      	ite	gt
 800562c:	4d1e      	ldrgt	r5, [pc, #120]	; (80056a8 <__kernel_cos+0x188>)
 800562e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8005632:	2400      	movs	r4, #0
 8005634:	4622      	mov	r2, r4
 8005636:	462b      	mov	r3, r5
 8005638:	2000      	movs	r0, #0
 800563a:	f7fa fde9 	bl	8000210 <__aeabi_dsub>
 800563e:	4622      	mov	r2, r4
 8005640:	4606      	mov	r6, r0
 8005642:	460f      	mov	r7, r1
 8005644:	462b      	mov	r3, r5
 8005646:	4650      	mov	r0, sl
 8005648:	4659      	mov	r1, fp
 800564a:	f7fa fde1 	bl	8000210 <__aeabi_dsub>
 800564e:	4642      	mov	r2, r8
 8005650:	464b      	mov	r3, r9
 8005652:	f7fa fddd 	bl	8000210 <__aeabi_dsub>
 8005656:	4602      	mov	r2, r0
 8005658:	460b      	mov	r3, r1
 800565a:	4630      	mov	r0, r6
 800565c:	4639      	mov	r1, r7
 800565e:	e7d9      	b.n	8005614 <__kernel_cos+0xf4>
 8005660:	2000      	movs	r0, #0
 8005662:	490f      	ldr	r1, [pc, #60]	; (80056a0 <__kernel_cos+0x180>)
 8005664:	e7d8      	b.n	8005618 <__kernel_cos+0xf8>
 8005666:	bf00      	nop
 8005668:	be8838d4 	.word	0xbe8838d4
 800566c:	bda8fae9 	.word	0xbda8fae9
 8005670:	bdb4b1c4 	.word	0xbdb4b1c4
 8005674:	3e21ee9e 	.word	0x3e21ee9e
 8005678:	809c52ad 	.word	0x809c52ad
 800567c:	3e927e4f 	.word	0x3e927e4f
 8005680:	19cb1590 	.word	0x19cb1590
 8005684:	3efa01a0 	.word	0x3efa01a0
 8005688:	16c15177 	.word	0x16c15177
 800568c:	3f56c16c 	.word	0x3f56c16c
 8005690:	5555554c 	.word	0x5555554c
 8005694:	3fa55555 	.word	0x3fa55555
 8005698:	3fe00000 	.word	0x3fe00000
 800569c:	3fd33332 	.word	0x3fd33332
 80056a0:	3ff00000 	.word	0x3ff00000
 80056a4:	3fe90000 	.word	0x3fe90000
 80056a8:	3fd20000 	.word	0x3fd20000
 80056ac:	00000000 	.word	0x00000000

080056b0 <__kernel_rem_pio2>:
 80056b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b4:	ed2d 8b02 	vpush	{d8}
 80056b8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80056bc:	1ed4      	subs	r4, r2, #3
 80056be:	9308      	str	r3, [sp, #32]
 80056c0:	9101      	str	r1, [sp, #4]
 80056c2:	4bc5      	ldr	r3, [pc, #788]	; (80059d8 <__kernel_rem_pio2+0x328>)
 80056c4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80056c6:	9009      	str	r0, [sp, #36]	; 0x24
 80056c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80056cc:	9304      	str	r3, [sp, #16]
 80056ce:	9b08      	ldr	r3, [sp, #32]
 80056d0:	3b01      	subs	r3, #1
 80056d2:	9307      	str	r3, [sp, #28]
 80056d4:	2318      	movs	r3, #24
 80056d6:	fb94 f4f3 	sdiv	r4, r4, r3
 80056da:	f06f 0317 	mvn.w	r3, #23
 80056de:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80056e2:	fb04 3303 	mla	r3, r4, r3, r3
 80056e6:	eb03 0a02 	add.w	sl, r3, r2
 80056ea:	9b04      	ldr	r3, [sp, #16]
 80056ec:	9a07      	ldr	r2, [sp, #28]
 80056ee:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80059c8 <__kernel_rem_pio2+0x318>
 80056f2:	eb03 0802 	add.w	r8, r3, r2
 80056f6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80056f8:	1aa7      	subs	r7, r4, r2
 80056fa:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80056fe:	ae22      	add	r6, sp, #136	; 0x88
 8005700:	2500      	movs	r5, #0
 8005702:	4545      	cmp	r5, r8
 8005704:	dd13      	ble.n	800572e <__kernel_rem_pio2+0x7e>
 8005706:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80059c8 <__kernel_rem_pio2+0x318>
 800570a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800570e:	2600      	movs	r6, #0
 8005710:	9b04      	ldr	r3, [sp, #16]
 8005712:	429e      	cmp	r6, r3
 8005714:	dc32      	bgt.n	800577c <__kernel_rem_pio2+0xcc>
 8005716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005718:	9302      	str	r3, [sp, #8]
 800571a:	9b08      	ldr	r3, [sp, #32]
 800571c:	199d      	adds	r5, r3, r6
 800571e:	ab22      	add	r3, sp, #136	; 0x88
 8005720:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005724:	9306      	str	r3, [sp, #24]
 8005726:	ec59 8b18 	vmov	r8, r9, d8
 800572a:	2700      	movs	r7, #0
 800572c:	e01f      	b.n	800576e <__kernel_rem_pio2+0xbe>
 800572e:	42ef      	cmn	r7, r5
 8005730:	d407      	bmi.n	8005742 <__kernel_rem_pio2+0x92>
 8005732:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005736:	f7fa feb9 	bl	80004ac <__aeabi_i2d>
 800573a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800573e:	3501      	adds	r5, #1
 8005740:	e7df      	b.n	8005702 <__kernel_rem_pio2+0x52>
 8005742:	ec51 0b18 	vmov	r0, r1, d8
 8005746:	e7f8      	b.n	800573a <__kernel_rem_pio2+0x8a>
 8005748:	9906      	ldr	r1, [sp, #24]
 800574a:	9d02      	ldr	r5, [sp, #8]
 800574c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8005750:	9106      	str	r1, [sp, #24]
 8005752:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8005756:	9502      	str	r5, [sp, #8]
 8005758:	f7fa ff12 	bl	8000580 <__aeabi_dmul>
 800575c:	4602      	mov	r2, r0
 800575e:	460b      	mov	r3, r1
 8005760:	4640      	mov	r0, r8
 8005762:	4649      	mov	r1, r9
 8005764:	f7fa fd56 	bl	8000214 <__adddf3>
 8005768:	3701      	adds	r7, #1
 800576a:	4680      	mov	r8, r0
 800576c:	4689      	mov	r9, r1
 800576e:	9b07      	ldr	r3, [sp, #28]
 8005770:	429f      	cmp	r7, r3
 8005772:	dde9      	ble.n	8005748 <__kernel_rem_pio2+0x98>
 8005774:	e8eb 8902 	strd	r8, r9, [fp], #8
 8005778:	3601      	adds	r6, #1
 800577a:	e7c9      	b.n	8005710 <__kernel_rem_pio2+0x60>
 800577c:	9b04      	ldr	r3, [sp, #16]
 800577e:	aa0e      	add	r2, sp, #56	; 0x38
 8005780:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005784:	930c      	str	r3, [sp, #48]	; 0x30
 8005786:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005788:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800578c:	9c04      	ldr	r4, [sp, #16]
 800578e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005790:	ab9a      	add	r3, sp, #616	; 0x268
 8005792:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8005796:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800579a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800579e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80057a2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80057a6:	ab9a      	add	r3, sp, #616	; 0x268
 80057a8:	445b      	add	r3, fp
 80057aa:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80057ae:	2500      	movs	r5, #0
 80057b0:	1b63      	subs	r3, r4, r5
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	dc78      	bgt.n	80058a8 <__kernel_rem_pio2+0x1f8>
 80057b6:	4650      	mov	r0, sl
 80057b8:	ec49 8b10 	vmov	d0, r8, r9
 80057bc:	f000 fc00 	bl	8005fc0 <scalbn>
 80057c0:	ec57 6b10 	vmov	r6, r7, d0
 80057c4:	2200      	movs	r2, #0
 80057c6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80057ca:	ee10 0a10 	vmov	r0, s0
 80057ce:	4639      	mov	r1, r7
 80057d0:	f7fa fed6 	bl	8000580 <__aeabi_dmul>
 80057d4:	ec41 0b10 	vmov	d0, r0, r1
 80057d8:	f000 fb6e 	bl	8005eb8 <floor>
 80057dc:	2200      	movs	r2, #0
 80057de:	ec51 0b10 	vmov	r0, r1, d0
 80057e2:	4b7e      	ldr	r3, [pc, #504]	; (80059dc <__kernel_rem_pio2+0x32c>)
 80057e4:	f7fa fecc 	bl	8000580 <__aeabi_dmul>
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	4630      	mov	r0, r6
 80057ee:	4639      	mov	r1, r7
 80057f0:	f7fa fd0e 	bl	8000210 <__aeabi_dsub>
 80057f4:	460f      	mov	r7, r1
 80057f6:	4606      	mov	r6, r0
 80057f8:	f7fb f95c 	bl	8000ab4 <__aeabi_d2iz>
 80057fc:	9006      	str	r0, [sp, #24]
 80057fe:	f7fa fe55 	bl	80004ac <__aeabi_i2d>
 8005802:	4602      	mov	r2, r0
 8005804:	460b      	mov	r3, r1
 8005806:	4630      	mov	r0, r6
 8005808:	4639      	mov	r1, r7
 800580a:	f7fa fd01 	bl	8000210 <__aeabi_dsub>
 800580e:	f1ba 0f00 	cmp.w	sl, #0
 8005812:	4606      	mov	r6, r0
 8005814:	460f      	mov	r7, r1
 8005816:	dd6c      	ble.n	80058f2 <__kernel_rem_pio2+0x242>
 8005818:	1e62      	subs	r2, r4, #1
 800581a:	ab0e      	add	r3, sp, #56	; 0x38
 800581c:	f1ca 0118 	rsb	r1, sl, #24
 8005820:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005824:	9d06      	ldr	r5, [sp, #24]
 8005826:	fa40 f301 	asr.w	r3, r0, r1
 800582a:	441d      	add	r5, r3
 800582c:	408b      	lsls	r3, r1
 800582e:	1ac0      	subs	r0, r0, r3
 8005830:	ab0e      	add	r3, sp, #56	; 0x38
 8005832:	9506      	str	r5, [sp, #24]
 8005834:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005838:	f1ca 0317 	rsb	r3, sl, #23
 800583c:	fa40 f303 	asr.w	r3, r0, r3
 8005840:	9302      	str	r3, [sp, #8]
 8005842:	9b02      	ldr	r3, [sp, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	dd62      	ble.n	800590e <__kernel_rem_pio2+0x25e>
 8005848:	9b06      	ldr	r3, [sp, #24]
 800584a:	2200      	movs	r2, #0
 800584c:	3301      	adds	r3, #1
 800584e:	9306      	str	r3, [sp, #24]
 8005850:	4615      	mov	r5, r2
 8005852:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005856:	4294      	cmp	r4, r2
 8005858:	f300 8095 	bgt.w	8005986 <__kernel_rem_pio2+0x2d6>
 800585c:	f1ba 0f00 	cmp.w	sl, #0
 8005860:	dd07      	ble.n	8005872 <__kernel_rem_pio2+0x1c2>
 8005862:	f1ba 0f01 	cmp.w	sl, #1
 8005866:	f000 80a2 	beq.w	80059ae <__kernel_rem_pio2+0x2fe>
 800586a:	f1ba 0f02 	cmp.w	sl, #2
 800586e:	f000 80c1 	beq.w	80059f4 <__kernel_rem_pio2+0x344>
 8005872:	9b02      	ldr	r3, [sp, #8]
 8005874:	2b02      	cmp	r3, #2
 8005876:	d14a      	bne.n	800590e <__kernel_rem_pio2+0x25e>
 8005878:	4632      	mov	r2, r6
 800587a:	463b      	mov	r3, r7
 800587c:	2000      	movs	r0, #0
 800587e:	4958      	ldr	r1, [pc, #352]	; (80059e0 <__kernel_rem_pio2+0x330>)
 8005880:	f7fa fcc6 	bl	8000210 <__aeabi_dsub>
 8005884:	4606      	mov	r6, r0
 8005886:	460f      	mov	r7, r1
 8005888:	2d00      	cmp	r5, #0
 800588a:	d040      	beq.n	800590e <__kernel_rem_pio2+0x25e>
 800588c:	4650      	mov	r0, sl
 800588e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80059d0 <__kernel_rem_pio2+0x320>
 8005892:	f000 fb95 	bl	8005fc0 <scalbn>
 8005896:	4630      	mov	r0, r6
 8005898:	4639      	mov	r1, r7
 800589a:	ec53 2b10 	vmov	r2, r3, d0
 800589e:	f7fa fcb7 	bl	8000210 <__aeabi_dsub>
 80058a2:	4606      	mov	r6, r0
 80058a4:	460f      	mov	r7, r1
 80058a6:	e032      	b.n	800590e <__kernel_rem_pio2+0x25e>
 80058a8:	2200      	movs	r2, #0
 80058aa:	4b4e      	ldr	r3, [pc, #312]	; (80059e4 <__kernel_rem_pio2+0x334>)
 80058ac:	4640      	mov	r0, r8
 80058ae:	4649      	mov	r1, r9
 80058b0:	f7fa fe66 	bl	8000580 <__aeabi_dmul>
 80058b4:	f7fb f8fe 	bl	8000ab4 <__aeabi_d2iz>
 80058b8:	f7fa fdf8 	bl	80004ac <__aeabi_i2d>
 80058bc:	2200      	movs	r2, #0
 80058be:	4b4a      	ldr	r3, [pc, #296]	; (80059e8 <__kernel_rem_pio2+0x338>)
 80058c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058c4:	f7fa fe5c 	bl	8000580 <__aeabi_dmul>
 80058c8:	4602      	mov	r2, r0
 80058ca:	460b      	mov	r3, r1
 80058cc:	4640      	mov	r0, r8
 80058ce:	4649      	mov	r1, r9
 80058d0:	f7fa fc9e 	bl	8000210 <__aeabi_dsub>
 80058d4:	f7fb f8ee 	bl	8000ab4 <__aeabi_d2iz>
 80058d8:	ab0e      	add	r3, sp, #56	; 0x38
 80058da:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80058de:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80058e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058e6:	f7fa fc95 	bl	8000214 <__adddf3>
 80058ea:	3501      	adds	r5, #1
 80058ec:	4680      	mov	r8, r0
 80058ee:	4689      	mov	r9, r1
 80058f0:	e75e      	b.n	80057b0 <__kernel_rem_pio2+0x100>
 80058f2:	d105      	bne.n	8005900 <__kernel_rem_pio2+0x250>
 80058f4:	1e63      	subs	r3, r4, #1
 80058f6:	aa0e      	add	r2, sp, #56	; 0x38
 80058f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80058fc:	15c3      	asrs	r3, r0, #23
 80058fe:	e79f      	b.n	8005840 <__kernel_rem_pio2+0x190>
 8005900:	2200      	movs	r2, #0
 8005902:	4b3a      	ldr	r3, [pc, #232]	; (80059ec <__kernel_rem_pio2+0x33c>)
 8005904:	f7fb f8c2 	bl	8000a8c <__aeabi_dcmpge>
 8005908:	2800      	cmp	r0, #0
 800590a:	d139      	bne.n	8005980 <__kernel_rem_pio2+0x2d0>
 800590c:	9002      	str	r0, [sp, #8]
 800590e:	2200      	movs	r2, #0
 8005910:	2300      	movs	r3, #0
 8005912:	4630      	mov	r0, r6
 8005914:	4639      	mov	r1, r7
 8005916:	f7fb f89b 	bl	8000a50 <__aeabi_dcmpeq>
 800591a:	2800      	cmp	r0, #0
 800591c:	f000 80c7 	beq.w	8005aae <__kernel_rem_pio2+0x3fe>
 8005920:	1e65      	subs	r5, r4, #1
 8005922:	462b      	mov	r3, r5
 8005924:	2200      	movs	r2, #0
 8005926:	9904      	ldr	r1, [sp, #16]
 8005928:	428b      	cmp	r3, r1
 800592a:	da6a      	bge.n	8005a02 <__kernel_rem_pio2+0x352>
 800592c:	2a00      	cmp	r2, #0
 800592e:	f000 8088 	beq.w	8005a42 <__kernel_rem_pio2+0x392>
 8005932:	ab0e      	add	r3, sp, #56	; 0x38
 8005934:	f1aa 0a18 	sub.w	sl, sl, #24
 8005938:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 80b4 	beq.w	8005aaa <__kernel_rem_pio2+0x3fa>
 8005942:	4650      	mov	r0, sl
 8005944:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80059d0 <__kernel_rem_pio2+0x320>
 8005948:	f000 fb3a 	bl	8005fc0 <scalbn>
 800594c:	00ec      	lsls	r4, r5, #3
 800594e:	ab72      	add	r3, sp, #456	; 0x1c8
 8005950:	191e      	adds	r6, r3, r4
 8005952:	ec59 8b10 	vmov	r8, r9, d0
 8005956:	f106 0a08 	add.w	sl, r6, #8
 800595a:	462f      	mov	r7, r5
 800595c:	2f00      	cmp	r7, #0
 800595e:	f280 80df 	bge.w	8005b20 <__kernel_rem_pio2+0x470>
 8005962:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80059c8 <__kernel_rem_pio2+0x318>
 8005966:	f04f 0a00 	mov.w	sl, #0
 800596a:	eba5 030a 	sub.w	r3, r5, sl
 800596e:	2b00      	cmp	r3, #0
 8005970:	f2c0 810a 	blt.w	8005b88 <__kernel_rem_pio2+0x4d8>
 8005974:	f8df b078 	ldr.w	fp, [pc, #120]	; 80059f0 <__kernel_rem_pio2+0x340>
 8005978:	ec59 8b18 	vmov	r8, r9, d8
 800597c:	2700      	movs	r7, #0
 800597e:	e0f5      	b.n	8005b6c <__kernel_rem_pio2+0x4bc>
 8005980:	2302      	movs	r3, #2
 8005982:	9302      	str	r3, [sp, #8]
 8005984:	e760      	b.n	8005848 <__kernel_rem_pio2+0x198>
 8005986:	ab0e      	add	r3, sp, #56	; 0x38
 8005988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800598c:	b94d      	cbnz	r5, 80059a2 <__kernel_rem_pio2+0x2f2>
 800598e:	b12b      	cbz	r3, 800599c <__kernel_rem_pio2+0x2ec>
 8005990:	a80e      	add	r0, sp, #56	; 0x38
 8005992:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005996:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800599a:	2301      	movs	r3, #1
 800599c:	3201      	adds	r2, #1
 800599e:	461d      	mov	r5, r3
 80059a0:	e759      	b.n	8005856 <__kernel_rem_pio2+0x1a6>
 80059a2:	a80e      	add	r0, sp, #56	; 0x38
 80059a4:	1acb      	subs	r3, r1, r3
 80059a6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80059aa:	462b      	mov	r3, r5
 80059ac:	e7f6      	b.n	800599c <__kernel_rem_pio2+0x2ec>
 80059ae:	1e62      	subs	r2, r4, #1
 80059b0:	ab0e      	add	r3, sp, #56	; 0x38
 80059b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80059ba:	a90e      	add	r1, sp, #56	; 0x38
 80059bc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80059c0:	e757      	b.n	8005872 <__kernel_rem_pio2+0x1c2>
 80059c2:	bf00      	nop
 80059c4:	f3af 8000 	nop.w
	...
 80059d4:	3ff00000 	.word	0x3ff00000
 80059d8:	08006320 	.word	0x08006320
 80059dc:	40200000 	.word	0x40200000
 80059e0:	3ff00000 	.word	0x3ff00000
 80059e4:	3e700000 	.word	0x3e700000
 80059e8:	41700000 	.word	0x41700000
 80059ec:	3fe00000 	.word	0x3fe00000
 80059f0:	080062e0 	.word	0x080062e0
 80059f4:	1e62      	subs	r2, r4, #1
 80059f6:	ab0e      	add	r3, sp, #56	; 0x38
 80059f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059fc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005a00:	e7db      	b.n	80059ba <__kernel_rem_pio2+0x30a>
 8005a02:	a90e      	add	r1, sp, #56	; 0x38
 8005a04:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	e78b      	b.n	8005926 <__kernel_rem_pio2+0x276>
 8005a0e:	3301      	adds	r3, #1
 8005a10:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005a14:	2900      	cmp	r1, #0
 8005a16:	d0fa      	beq.n	8005a0e <__kernel_rem_pio2+0x35e>
 8005a18:	9a08      	ldr	r2, [sp, #32]
 8005a1a:	4422      	add	r2, r4
 8005a1c:	00d2      	lsls	r2, r2, #3
 8005a1e:	a922      	add	r1, sp, #136	; 0x88
 8005a20:	18e3      	adds	r3, r4, r3
 8005a22:	9206      	str	r2, [sp, #24]
 8005a24:	440a      	add	r2, r1
 8005a26:	9302      	str	r3, [sp, #8]
 8005a28:	f10b 0108 	add.w	r1, fp, #8
 8005a2c:	f102 0308 	add.w	r3, r2, #8
 8005a30:	1c66      	adds	r6, r4, #1
 8005a32:	910a      	str	r1, [sp, #40]	; 0x28
 8005a34:	2500      	movs	r5, #0
 8005a36:	930d      	str	r3, [sp, #52]	; 0x34
 8005a38:	9b02      	ldr	r3, [sp, #8]
 8005a3a:	42b3      	cmp	r3, r6
 8005a3c:	da04      	bge.n	8005a48 <__kernel_rem_pio2+0x398>
 8005a3e:	461c      	mov	r4, r3
 8005a40:	e6a6      	b.n	8005790 <__kernel_rem_pio2+0xe0>
 8005a42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a44:	2301      	movs	r3, #1
 8005a46:	e7e3      	b.n	8005a10 <__kernel_rem_pio2+0x360>
 8005a48:	9b06      	ldr	r3, [sp, #24]
 8005a4a:	18ef      	adds	r7, r5, r3
 8005a4c:	ab22      	add	r3, sp, #136	; 0x88
 8005a4e:	441f      	add	r7, r3
 8005a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a52:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005a56:	f7fa fd29 	bl	80004ac <__aeabi_i2d>
 8005a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a5c:	461c      	mov	r4, r3
 8005a5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a60:	e9c7 0100 	strd	r0, r1, [r7]
 8005a64:	eb03 0b05 	add.w	fp, r3, r5
 8005a68:	2700      	movs	r7, #0
 8005a6a:	f04f 0800 	mov.w	r8, #0
 8005a6e:	f04f 0900 	mov.w	r9, #0
 8005a72:	9b07      	ldr	r3, [sp, #28]
 8005a74:	429f      	cmp	r7, r3
 8005a76:	dd08      	ble.n	8005a8a <__kernel_rem_pio2+0x3da>
 8005a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a7a:	aa72      	add	r2, sp, #456	; 0x1c8
 8005a7c:	18eb      	adds	r3, r5, r3
 8005a7e:	4413      	add	r3, r2
 8005a80:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8005a84:	3601      	adds	r6, #1
 8005a86:	3508      	adds	r5, #8
 8005a88:	e7d6      	b.n	8005a38 <__kernel_rem_pio2+0x388>
 8005a8a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005a8e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005a92:	f7fa fd75 	bl	8000580 <__aeabi_dmul>
 8005a96:	4602      	mov	r2, r0
 8005a98:	460b      	mov	r3, r1
 8005a9a:	4640      	mov	r0, r8
 8005a9c:	4649      	mov	r1, r9
 8005a9e:	f7fa fbb9 	bl	8000214 <__adddf3>
 8005aa2:	3701      	adds	r7, #1
 8005aa4:	4680      	mov	r8, r0
 8005aa6:	4689      	mov	r9, r1
 8005aa8:	e7e3      	b.n	8005a72 <__kernel_rem_pio2+0x3c2>
 8005aaa:	3d01      	subs	r5, #1
 8005aac:	e741      	b.n	8005932 <__kernel_rem_pio2+0x282>
 8005aae:	f1ca 0000 	rsb	r0, sl, #0
 8005ab2:	ec47 6b10 	vmov	d0, r6, r7
 8005ab6:	f000 fa83 	bl	8005fc0 <scalbn>
 8005aba:	ec57 6b10 	vmov	r6, r7, d0
 8005abe:	2200      	movs	r2, #0
 8005ac0:	4b99      	ldr	r3, [pc, #612]	; (8005d28 <__kernel_rem_pio2+0x678>)
 8005ac2:	ee10 0a10 	vmov	r0, s0
 8005ac6:	4639      	mov	r1, r7
 8005ac8:	f7fa ffe0 	bl	8000a8c <__aeabi_dcmpge>
 8005acc:	b1f8      	cbz	r0, 8005b0e <__kernel_rem_pio2+0x45e>
 8005ace:	2200      	movs	r2, #0
 8005ad0:	4b96      	ldr	r3, [pc, #600]	; (8005d2c <__kernel_rem_pio2+0x67c>)
 8005ad2:	4630      	mov	r0, r6
 8005ad4:	4639      	mov	r1, r7
 8005ad6:	f7fa fd53 	bl	8000580 <__aeabi_dmul>
 8005ada:	f7fa ffeb 	bl	8000ab4 <__aeabi_d2iz>
 8005ade:	4680      	mov	r8, r0
 8005ae0:	f7fa fce4 	bl	80004ac <__aeabi_i2d>
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	4b90      	ldr	r3, [pc, #576]	; (8005d28 <__kernel_rem_pio2+0x678>)
 8005ae8:	f7fa fd4a 	bl	8000580 <__aeabi_dmul>
 8005aec:	460b      	mov	r3, r1
 8005aee:	4602      	mov	r2, r0
 8005af0:	4639      	mov	r1, r7
 8005af2:	4630      	mov	r0, r6
 8005af4:	f7fa fb8c 	bl	8000210 <__aeabi_dsub>
 8005af8:	f7fa ffdc 	bl	8000ab4 <__aeabi_d2iz>
 8005afc:	1c65      	adds	r5, r4, #1
 8005afe:	ab0e      	add	r3, sp, #56	; 0x38
 8005b00:	f10a 0a18 	add.w	sl, sl, #24
 8005b04:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005b08:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005b0c:	e719      	b.n	8005942 <__kernel_rem_pio2+0x292>
 8005b0e:	4630      	mov	r0, r6
 8005b10:	4639      	mov	r1, r7
 8005b12:	f7fa ffcf 	bl	8000ab4 <__aeabi_d2iz>
 8005b16:	ab0e      	add	r3, sp, #56	; 0x38
 8005b18:	4625      	mov	r5, r4
 8005b1a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005b1e:	e710      	b.n	8005942 <__kernel_rem_pio2+0x292>
 8005b20:	ab0e      	add	r3, sp, #56	; 0x38
 8005b22:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005b26:	f7fa fcc1 	bl	80004ac <__aeabi_i2d>
 8005b2a:	4642      	mov	r2, r8
 8005b2c:	464b      	mov	r3, r9
 8005b2e:	f7fa fd27 	bl	8000580 <__aeabi_dmul>
 8005b32:	2200      	movs	r2, #0
 8005b34:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8005b38:	4b7c      	ldr	r3, [pc, #496]	; (8005d2c <__kernel_rem_pio2+0x67c>)
 8005b3a:	4640      	mov	r0, r8
 8005b3c:	4649      	mov	r1, r9
 8005b3e:	f7fa fd1f 	bl	8000580 <__aeabi_dmul>
 8005b42:	3f01      	subs	r7, #1
 8005b44:	4680      	mov	r8, r0
 8005b46:	4689      	mov	r9, r1
 8005b48:	e708      	b.n	800595c <__kernel_rem_pio2+0x2ac>
 8005b4a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8005b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b52:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8005b56:	f7fa fd13 	bl	8000580 <__aeabi_dmul>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	4640      	mov	r0, r8
 8005b60:	4649      	mov	r1, r9
 8005b62:	f7fa fb57 	bl	8000214 <__adddf3>
 8005b66:	3701      	adds	r7, #1
 8005b68:	4680      	mov	r8, r0
 8005b6a:	4689      	mov	r9, r1
 8005b6c:	9b04      	ldr	r3, [sp, #16]
 8005b6e:	429f      	cmp	r7, r3
 8005b70:	dc01      	bgt.n	8005b76 <__kernel_rem_pio2+0x4c6>
 8005b72:	45ba      	cmp	sl, r7
 8005b74:	dae9      	bge.n	8005b4a <__kernel_rem_pio2+0x49a>
 8005b76:	ab4a      	add	r3, sp, #296	; 0x128
 8005b78:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005b7c:	e9c3 8900 	strd	r8, r9, [r3]
 8005b80:	f10a 0a01 	add.w	sl, sl, #1
 8005b84:	3e08      	subs	r6, #8
 8005b86:	e6f0      	b.n	800596a <__kernel_rem_pio2+0x2ba>
 8005b88:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005b8a:	2b03      	cmp	r3, #3
 8005b8c:	d85b      	bhi.n	8005c46 <__kernel_rem_pio2+0x596>
 8005b8e:	e8df f003 	tbb	[pc, r3]
 8005b92:	264a      	.short	0x264a
 8005b94:	0226      	.short	0x0226
 8005b96:	ab9a      	add	r3, sp, #616	; 0x268
 8005b98:	441c      	add	r4, r3
 8005b9a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005b9e:	46a2      	mov	sl, r4
 8005ba0:	46ab      	mov	fp, r5
 8005ba2:	f1bb 0f00 	cmp.w	fp, #0
 8005ba6:	dc6c      	bgt.n	8005c82 <__kernel_rem_pio2+0x5d2>
 8005ba8:	46a2      	mov	sl, r4
 8005baa:	46ab      	mov	fp, r5
 8005bac:	f1bb 0f01 	cmp.w	fp, #1
 8005bb0:	f300 8086 	bgt.w	8005cc0 <__kernel_rem_pio2+0x610>
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	2d01      	cmp	r5, #1
 8005bba:	f300 80a0 	bgt.w	8005cfe <__kernel_rem_pio2+0x64e>
 8005bbe:	9b02      	ldr	r3, [sp, #8]
 8005bc0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005bc4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f040 809e 	bne.w	8005d0a <__kernel_rem_pio2+0x65a>
 8005bce:	9b01      	ldr	r3, [sp, #4]
 8005bd0:	e9c3 7800 	strd	r7, r8, [r3]
 8005bd4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005bd8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005bdc:	e033      	b.n	8005c46 <__kernel_rem_pio2+0x596>
 8005bde:	3408      	adds	r4, #8
 8005be0:	ab4a      	add	r3, sp, #296	; 0x128
 8005be2:	441c      	add	r4, r3
 8005be4:	462e      	mov	r6, r5
 8005be6:	2000      	movs	r0, #0
 8005be8:	2100      	movs	r1, #0
 8005bea:	2e00      	cmp	r6, #0
 8005bec:	da3a      	bge.n	8005c64 <__kernel_rem_pio2+0x5b4>
 8005bee:	9b02      	ldr	r3, [sp, #8]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d03d      	beq.n	8005c70 <__kernel_rem_pio2+0x5c0>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005bfa:	9c01      	ldr	r4, [sp, #4]
 8005bfc:	e9c4 2300 	strd	r2, r3, [r4]
 8005c00:	4602      	mov	r2, r0
 8005c02:	460b      	mov	r3, r1
 8005c04:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005c08:	f7fa fb02 	bl	8000210 <__aeabi_dsub>
 8005c0c:	ae4c      	add	r6, sp, #304	; 0x130
 8005c0e:	2401      	movs	r4, #1
 8005c10:	42a5      	cmp	r5, r4
 8005c12:	da30      	bge.n	8005c76 <__kernel_rem_pio2+0x5c6>
 8005c14:	9b02      	ldr	r3, [sp, #8]
 8005c16:	b113      	cbz	r3, 8005c1e <__kernel_rem_pio2+0x56e>
 8005c18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	9b01      	ldr	r3, [sp, #4]
 8005c20:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005c24:	e00f      	b.n	8005c46 <__kernel_rem_pio2+0x596>
 8005c26:	ab9a      	add	r3, sp, #616	; 0x268
 8005c28:	441c      	add	r4, r3
 8005c2a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005c2e:	2000      	movs	r0, #0
 8005c30:	2100      	movs	r1, #0
 8005c32:	2d00      	cmp	r5, #0
 8005c34:	da10      	bge.n	8005c58 <__kernel_rem_pio2+0x5a8>
 8005c36:	9b02      	ldr	r3, [sp, #8]
 8005c38:	b113      	cbz	r3, 8005c40 <__kernel_rem_pio2+0x590>
 8005c3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c3e:	4619      	mov	r1, r3
 8005c40:	9b01      	ldr	r3, [sp, #4]
 8005c42:	e9c3 0100 	strd	r0, r1, [r3]
 8005c46:	9b06      	ldr	r3, [sp, #24]
 8005c48:	f003 0007 	and.w	r0, r3, #7
 8005c4c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005c50:	ecbd 8b02 	vpop	{d8}
 8005c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c58:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005c5c:	f7fa fada 	bl	8000214 <__adddf3>
 8005c60:	3d01      	subs	r5, #1
 8005c62:	e7e6      	b.n	8005c32 <__kernel_rem_pio2+0x582>
 8005c64:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005c68:	f7fa fad4 	bl	8000214 <__adddf3>
 8005c6c:	3e01      	subs	r6, #1
 8005c6e:	e7bc      	b.n	8005bea <__kernel_rem_pio2+0x53a>
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	e7c1      	b.n	8005bfa <__kernel_rem_pio2+0x54a>
 8005c76:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005c7a:	f7fa facb 	bl	8000214 <__adddf3>
 8005c7e:	3401      	adds	r4, #1
 8005c80:	e7c6      	b.n	8005c10 <__kernel_rem_pio2+0x560>
 8005c82:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8005c86:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005c8a:	4640      	mov	r0, r8
 8005c8c:	ec53 2b17 	vmov	r2, r3, d7
 8005c90:	4649      	mov	r1, r9
 8005c92:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005c96:	f7fa fabd 	bl	8000214 <__adddf3>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	4606      	mov	r6, r0
 8005ca0:	460f      	mov	r7, r1
 8005ca2:	4640      	mov	r0, r8
 8005ca4:	4649      	mov	r1, r9
 8005ca6:	f7fa fab3 	bl	8000210 <__aeabi_dsub>
 8005caa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cae:	f7fa fab1 	bl	8000214 <__adddf3>
 8005cb2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005cb6:	e9ca 0100 	strd	r0, r1, [sl]
 8005cba:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8005cbe:	e770      	b.n	8005ba2 <__kernel_rem_pio2+0x4f2>
 8005cc0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8005cc4:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005cc8:	4630      	mov	r0, r6
 8005cca:	ec53 2b17 	vmov	r2, r3, d7
 8005cce:	4639      	mov	r1, r7
 8005cd0:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005cd4:	f7fa fa9e 	bl	8000214 <__adddf3>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	460b      	mov	r3, r1
 8005cdc:	4680      	mov	r8, r0
 8005cde:	4689      	mov	r9, r1
 8005ce0:	4630      	mov	r0, r6
 8005ce2:	4639      	mov	r1, r7
 8005ce4:	f7fa fa94 	bl	8000210 <__aeabi_dsub>
 8005ce8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cec:	f7fa fa92 	bl	8000214 <__adddf3>
 8005cf0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005cf4:	e9ca 0100 	strd	r0, r1, [sl]
 8005cf8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8005cfc:	e756      	b.n	8005bac <__kernel_rem_pio2+0x4fc>
 8005cfe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005d02:	f7fa fa87 	bl	8000214 <__adddf3>
 8005d06:	3d01      	subs	r5, #1
 8005d08:	e756      	b.n	8005bb8 <__kernel_rem_pio2+0x508>
 8005d0a:	9b01      	ldr	r3, [sp, #4]
 8005d0c:	9a01      	ldr	r2, [sp, #4]
 8005d0e:	601f      	str	r7, [r3, #0]
 8005d10:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8005d14:	605c      	str	r4, [r3, #4]
 8005d16:	609d      	str	r5, [r3, #8]
 8005d18:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005d1c:	60d3      	str	r3, [r2, #12]
 8005d1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d22:	6110      	str	r0, [r2, #16]
 8005d24:	6153      	str	r3, [r2, #20]
 8005d26:	e78e      	b.n	8005c46 <__kernel_rem_pio2+0x596>
 8005d28:	41700000 	.word	0x41700000
 8005d2c:	3e700000 	.word	0x3e700000

08005d30 <__kernel_sin>:
 8005d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d34:	ec55 4b10 	vmov	r4, r5, d0
 8005d38:	b085      	sub	sp, #20
 8005d3a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005d3e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005d42:	ed8d 1b00 	vstr	d1, [sp]
 8005d46:	9002      	str	r0, [sp, #8]
 8005d48:	da06      	bge.n	8005d58 <__kernel_sin+0x28>
 8005d4a:	ee10 0a10 	vmov	r0, s0
 8005d4e:	4629      	mov	r1, r5
 8005d50:	f7fa feb0 	bl	8000ab4 <__aeabi_d2iz>
 8005d54:	2800      	cmp	r0, #0
 8005d56:	d051      	beq.n	8005dfc <__kernel_sin+0xcc>
 8005d58:	4622      	mov	r2, r4
 8005d5a:	462b      	mov	r3, r5
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	4629      	mov	r1, r5
 8005d60:	f7fa fc0e 	bl	8000580 <__aeabi_dmul>
 8005d64:	4682      	mov	sl, r0
 8005d66:	468b      	mov	fp, r1
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	4629      	mov	r1, r5
 8005d70:	f7fa fc06 	bl	8000580 <__aeabi_dmul>
 8005d74:	a341      	add	r3, pc, #260	; (adr r3, 8005e7c <__kernel_sin+0x14c>)
 8005d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7a:	4680      	mov	r8, r0
 8005d7c:	4689      	mov	r9, r1
 8005d7e:	4650      	mov	r0, sl
 8005d80:	4659      	mov	r1, fp
 8005d82:	f7fa fbfd 	bl	8000580 <__aeabi_dmul>
 8005d86:	a33f      	add	r3, pc, #252	; (adr r3, 8005e84 <__kernel_sin+0x154>)
 8005d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8c:	f7fa fa40 	bl	8000210 <__aeabi_dsub>
 8005d90:	4652      	mov	r2, sl
 8005d92:	465b      	mov	r3, fp
 8005d94:	f7fa fbf4 	bl	8000580 <__aeabi_dmul>
 8005d98:	a33c      	add	r3, pc, #240	; (adr r3, 8005e8c <__kernel_sin+0x15c>)
 8005d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9e:	f7fa fa39 	bl	8000214 <__adddf3>
 8005da2:	4652      	mov	r2, sl
 8005da4:	465b      	mov	r3, fp
 8005da6:	f7fa fbeb 	bl	8000580 <__aeabi_dmul>
 8005daa:	a33a      	add	r3, pc, #232	; (adr r3, 8005e94 <__kernel_sin+0x164>)
 8005dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db0:	f7fa fa2e 	bl	8000210 <__aeabi_dsub>
 8005db4:	4652      	mov	r2, sl
 8005db6:	465b      	mov	r3, fp
 8005db8:	f7fa fbe2 	bl	8000580 <__aeabi_dmul>
 8005dbc:	a337      	add	r3, pc, #220	; (adr r3, 8005e9c <__kernel_sin+0x16c>)
 8005dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc2:	f7fa fa27 	bl	8000214 <__adddf3>
 8005dc6:	9b02      	ldr	r3, [sp, #8]
 8005dc8:	4606      	mov	r6, r0
 8005dca:	460f      	mov	r7, r1
 8005dcc:	b9db      	cbnz	r3, 8005e06 <__kernel_sin+0xd6>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	4650      	mov	r0, sl
 8005dd4:	4659      	mov	r1, fp
 8005dd6:	f7fa fbd3 	bl	8000580 <__aeabi_dmul>
 8005dda:	a325      	add	r3, pc, #148	; (adr r3, 8005e70 <__kernel_sin+0x140>)
 8005ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de0:	f7fa fa16 	bl	8000210 <__aeabi_dsub>
 8005de4:	4642      	mov	r2, r8
 8005de6:	464b      	mov	r3, r9
 8005de8:	f7fa fbca 	bl	8000580 <__aeabi_dmul>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	4620      	mov	r0, r4
 8005df2:	4629      	mov	r1, r5
 8005df4:	f7fa fa0e 	bl	8000214 <__adddf3>
 8005df8:	4604      	mov	r4, r0
 8005dfa:	460d      	mov	r5, r1
 8005dfc:	ec45 4b10 	vmov	d0, r4, r5
 8005e00:	b005      	add	sp, #20
 8005e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e06:	2200      	movs	r2, #0
 8005e08:	4b1b      	ldr	r3, [pc, #108]	; (8005e78 <__kernel_sin+0x148>)
 8005e0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e0e:	f7fa fbb7 	bl	8000580 <__aeabi_dmul>
 8005e12:	4632      	mov	r2, r6
 8005e14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e18:	463b      	mov	r3, r7
 8005e1a:	4640      	mov	r0, r8
 8005e1c:	4649      	mov	r1, r9
 8005e1e:	f7fa fbaf 	bl	8000580 <__aeabi_dmul>
 8005e22:	4602      	mov	r2, r0
 8005e24:	460b      	mov	r3, r1
 8005e26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e2a:	f7fa f9f1 	bl	8000210 <__aeabi_dsub>
 8005e2e:	4652      	mov	r2, sl
 8005e30:	465b      	mov	r3, fp
 8005e32:	f7fa fba5 	bl	8000580 <__aeabi_dmul>
 8005e36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e3a:	f7fa f9e9 	bl	8000210 <__aeabi_dsub>
 8005e3e:	a30c      	add	r3, pc, #48	; (adr r3, 8005e70 <__kernel_sin+0x140>)
 8005e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e44:	4606      	mov	r6, r0
 8005e46:	460f      	mov	r7, r1
 8005e48:	4640      	mov	r0, r8
 8005e4a:	4649      	mov	r1, r9
 8005e4c:	f7fa fb98 	bl	8000580 <__aeabi_dmul>
 8005e50:	4602      	mov	r2, r0
 8005e52:	460b      	mov	r3, r1
 8005e54:	4630      	mov	r0, r6
 8005e56:	4639      	mov	r1, r7
 8005e58:	f7fa f9dc 	bl	8000214 <__adddf3>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	4620      	mov	r0, r4
 8005e62:	4629      	mov	r1, r5
 8005e64:	f7fa f9d4 	bl	8000210 <__aeabi_dsub>
 8005e68:	e7c6      	b.n	8005df8 <__kernel_sin+0xc8>
 8005e6a:	bf00      	nop
 8005e6c:	f3af 8000 	nop.w
 8005e70:	55555549 	.word	0x55555549
 8005e74:	3fc55555 	.word	0x3fc55555
 8005e78:	3fe00000 	.word	0x3fe00000
 8005e7c:	5acfd57c 	.word	0x5acfd57c
 8005e80:	3de5d93a 	.word	0x3de5d93a
 8005e84:	8a2b9ceb 	.word	0x8a2b9ceb
 8005e88:	3e5ae5e6 	.word	0x3e5ae5e6
 8005e8c:	57b1fe7d 	.word	0x57b1fe7d
 8005e90:	3ec71de3 	.word	0x3ec71de3
 8005e94:	19c161d5 	.word	0x19c161d5
 8005e98:	3f2a01a0 	.word	0x3f2a01a0
 8005e9c:	1110f8a6 	.word	0x1110f8a6
 8005ea0:	3f811111 	.word	0x3f811111

08005ea4 <fabs>:
 8005ea4:	ec51 0b10 	vmov	r0, r1, d0
 8005ea8:	ee10 2a10 	vmov	r2, s0
 8005eac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005eb0:	ec43 2b10 	vmov	d0, r2, r3
 8005eb4:	4770      	bx	lr
	...

08005eb8 <floor>:
 8005eb8:	ec51 0b10 	vmov	r0, r1, d0
 8005ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005ec4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005ec8:	2e13      	cmp	r6, #19
 8005eca:	460c      	mov	r4, r1
 8005ecc:	ee10 5a10 	vmov	r5, s0
 8005ed0:	4680      	mov	r8, r0
 8005ed2:	dc34      	bgt.n	8005f3e <floor+0x86>
 8005ed4:	2e00      	cmp	r6, #0
 8005ed6:	da16      	bge.n	8005f06 <floor+0x4e>
 8005ed8:	a335      	add	r3, pc, #212	; (adr r3, 8005fb0 <floor+0xf8>)
 8005eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ede:	f7fa f999 	bl	8000214 <__adddf3>
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	f7fa fddb 	bl	8000aa0 <__aeabi_dcmpgt>
 8005eea:	b148      	cbz	r0, 8005f00 <floor+0x48>
 8005eec:	2c00      	cmp	r4, #0
 8005eee:	da59      	bge.n	8005fa4 <floor+0xec>
 8005ef0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005ef4:	4a30      	ldr	r2, [pc, #192]	; (8005fb8 <floor+0x100>)
 8005ef6:	432b      	orrs	r3, r5
 8005ef8:	2500      	movs	r5, #0
 8005efa:	42ab      	cmp	r3, r5
 8005efc:	bf18      	it	ne
 8005efe:	4614      	movne	r4, r2
 8005f00:	4621      	mov	r1, r4
 8005f02:	4628      	mov	r0, r5
 8005f04:	e025      	b.n	8005f52 <floor+0x9a>
 8005f06:	4f2d      	ldr	r7, [pc, #180]	; (8005fbc <floor+0x104>)
 8005f08:	4137      	asrs	r7, r6
 8005f0a:	ea01 0307 	and.w	r3, r1, r7
 8005f0e:	4303      	orrs	r3, r0
 8005f10:	d01f      	beq.n	8005f52 <floor+0x9a>
 8005f12:	a327      	add	r3, pc, #156	; (adr r3, 8005fb0 <floor+0xf8>)
 8005f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f18:	f7fa f97c 	bl	8000214 <__adddf3>
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	2300      	movs	r3, #0
 8005f20:	f7fa fdbe 	bl	8000aa0 <__aeabi_dcmpgt>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	d0eb      	beq.n	8005f00 <floor+0x48>
 8005f28:	2c00      	cmp	r4, #0
 8005f2a:	bfbe      	ittt	lt
 8005f2c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005f30:	fa43 f606 	asrlt.w	r6, r3, r6
 8005f34:	19a4      	addlt	r4, r4, r6
 8005f36:	ea24 0407 	bic.w	r4, r4, r7
 8005f3a:	2500      	movs	r5, #0
 8005f3c:	e7e0      	b.n	8005f00 <floor+0x48>
 8005f3e:	2e33      	cmp	r6, #51	; 0x33
 8005f40:	dd0b      	ble.n	8005f5a <floor+0xa2>
 8005f42:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005f46:	d104      	bne.n	8005f52 <floor+0x9a>
 8005f48:	ee10 2a10 	vmov	r2, s0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	f7fa f961 	bl	8000214 <__adddf3>
 8005f52:	ec41 0b10 	vmov	d0, r0, r1
 8005f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f5a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f62:	fa23 f707 	lsr.w	r7, r3, r7
 8005f66:	4207      	tst	r7, r0
 8005f68:	d0f3      	beq.n	8005f52 <floor+0x9a>
 8005f6a:	a311      	add	r3, pc, #68	; (adr r3, 8005fb0 <floor+0xf8>)
 8005f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f70:	f7fa f950 	bl	8000214 <__adddf3>
 8005f74:	2200      	movs	r2, #0
 8005f76:	2300      	movs	r3, #0
 8005f78:	f7fa fd92 	bl	8000aa0 <__aeabi_dcmpgt>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	d0bf      	beq.n	8005f00 <floor+0x48>
 8005f80:	2c00      	cmp	r4, #0
 8005f82:	da02      	bge.n	8005f8a <floor+0xd2>
 8005f84:	2e14      	cmp	r6, #20
 8005f86:	d103      	bne.n	8005f90 <floor+0xd8>
 8005f88:	3401      	adds	r4, #1
 8005f8a:	ea25 0507 	bic.w	r5, r5, r7
 8005f8e:	e7b7      	b.n	8005f00 <floor+0x48>
 8005f90:	2301      	movs	r3, #1
 8005f92:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005f96:	fa03 f606 	lsl.w	r6, r3, r6
 8005f9a:	4435      	add	r5, r6
 8005f9c:	4545      	cmp	r5, r8
 8005f9e:	bf38      	it	cc
 8005fa0:	18e4      	addcc	r4, r4, r3
 8005fa2:	e7f2      	b.n	8005f8a <floor+0xd2>
 8005fa4:	2500      	movs	r5, #0
 8005fa6:	462c      	mov	r4, r5
 8005fa8:	e7aa      	b.n	8005f00 <floor+0x48>
 8005faa:	bf00      	nop
 8005fac:	f3af 8000 	nop.w
 8005fb0:	8800759c 	.word	0x8800759c
 8005fb4:	7e37e43c 	.word	0x7e37e43c
 8005fb8:	bff00000 	.word	0xbff00000
 8005fbc:	000fffff 	.word	0x000fffff

08005fc0 <scalbn>:
 8005fc0:	b570      	push	{r4, r5, r6, lr}
 8005fc2:	ec55 4b10 	vmov	r4, r5, d0
 8005fc6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005fca:	4606      	mov	r6, r0
 8005fcc:	462b      	mov	r3, r5
 8005fce:	b9aa      	cbnz	r2, 8005ffc <scalbn+0x3c>
 8005fd0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005fd4:	4323      	orrs	r3, r4
 8005fd6:	d03b      	beq.n	8006050 <scalbn+0x90>
 8005fd8:	4b31      	ldr	r3, [pc, #196]	; (80060a0 <scalbn+0xe0>)
 8005fda:	4629      	mov	r1, r5
 8005fdc:	2200      	movs	r2, #0
 8005fde:	ee10 0a10 	vmov	r0, s0
 8005fe2:	f7fa facd 	bl	8000580 <__aeabi_dmul>
 8005fe6:	4b2f      	ldr	r3, [pc, #188]	; (80060a4 <scalbn+0xe4>)
 8005fe8:	429e      	cmp	r6, r3
 8005fea:	4604      	mov	r4, r0
 8005fec:	460d      	mov	r5, r1
 8005fee:	da12      	bge.n	8006016 <scalbn+0x56>
 8005ff0:	a327      	add	r3, pc, #156	; (adr r3, 8006090 <scalbn+0xd0>)
 8005ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff6:	f7fa fac3 	bl	8000580 <__aeabi_dmul>
 8005ffa:	e009      	b.n	8006010 <scalbn+0x50>
 8005ffc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006000:	428a      	cmp	r2, r1
 8006002:	d10c      	bne.n	800601e <scalbn+0x5e>
 8006004:	ee10 2a10 	vmov	r2, s0
 8006008:	4620      	mov	r0, r4
 800600a:	4629      	mov	r1, r5
 800600c:	f7fa f902 	bl	8000214 <__adddf3>
 8006010:	4604      	mov	r4, r0
 8006012:	460d      	mov	r5, r1
 8006014:	e01c      	b.n	8006050 <scalbn+0x90>
 8006016:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800601a:	460b      	mov	r3, r1
 800601c:	3a36      	subs	r2, #54	; 0x36
 800601e:	4432      	add	r2, r6
 8006020:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006024:	428a      	cmp	r2, r1
 8006026:	dd0b      	ble.n	8006040 <scalbn+0x80>
 8006028:	ec45 4b11 	vmov	d1, r4, r5
 800602c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006098 <scalbn+0xd8>
 8006030:	f000 f83c 	bl	80060ac <copysign>
 8006034:	a318      	add	r3, pc, #96	; (adr r3, 8006098 <scalbn+0xd8>)
 8006036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603a:	ec51 0b10 	vmov	r0, r1, d0
 800603e:	e7da      	b.n	8005ff6 <scalbn+0x36>
 8006040:	2a00      	cmp	r2, #0
 8006042:	dd08      	ble.n	8006056 <scalbn+0x96>
 8006044:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006048:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800604c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006050:	ec45 4b10 	vmov	d0, r4, r5
 8006054:	bd70      	pop	{r4, r5, r6, pc}
 8006056:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800605a:	da0d      	bge.n	8006078 <scalbn+0xb8>
 800605c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006060:	429e      	cmp	r6, r3
 8006062:	ec45 4b11 	vmov	d1, r4, r5
 8006066:	dce1      	bgt.n	800602c <scalbn+0x6c>
 8006068:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006090 <scalbn+0xd0>
 800606c:	f000 f81e 	bl	80060ac <copysign>
 8006070:	a307      	add	r3, pc, #28	; (adr r3, 8006090 <scalbn+0xd0>)
 8006072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006076:	e7e0      	b.n	800603a <scalbn+0x7a>
 8006078:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800607c:	3236      	adds	r2, #54	; 0x36
 800607e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006082:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006086:	4620      	mov	r0, r4
 8006088:	4629      	mov	r1, r5
 800608a:	2200      	movs	r2, #0
 800608c:	4b06      	ldr	r3, [pc, #24]	; (80060a8 <scalbn+0xe8>)
 800608e:	e7b2      	b.n	8005ff6 <scalbn+0x36>
 8006090:	c2f8f359 	.word	0xc2f8f359
 8006094:	01a56e1f 	.word	0x01a56e1f
 8006098:	8800759c 	.word	0x8800759c
 800609c:	7e37e43c 	.word	0x7e37e43c
 80060a0:	43500000 	.word	0x43500000
 80060a4:	ffff3cb0 	.word	0xffff3cb0
 80060a8:	3c900000 	.word	0x3c900000

080060ac <copysign>:
 80060ac:	ec51 0b10 	vmov	r0, r1, d0
 80060b0:	ee11 0a90 	vmov	r0, s3
 80060b4:	ee10 2a10 	vmov	r2, s0
 80060b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80060bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80060c0:	ea41 0300 	orr.w	r3, r1, r0
 80060c4:	ec43 2b10 	vmov	d0, r2, r3
 80060c8:	4770      	bx	lr
	...

080060cc <__libc_init_array>:
 80060cc:	b570      	push	{r4, r5, r6, lr}
 80060ce:	4e0d      	ldr	r6, [pc, #52]	; (8006104 <__libc_init_array+0x38>)
 80060d0:	4c0d      	ldr	r4, [pc, #52]	; (8006108 <__libc_init_array+0x3c>)
 80060d2:	1ba4      	subs	r4, r4, r6
 80060d4:	10a4      	asrs	r4, r4, #2
 80060d6:	2500      	movs	r5, #0
 80060d8:	42a5      	cmp	r5, r4
 80060da:	d109      	bne.n	80060f0 <__libc_init_array+0x24>
 80060dc:	4e0b      	ldr	r6, [pc, #44]	; (800610c <__libc_init_array+0x40>)
 80060de:	4c0c      	ldr	r4, [pc, #48]	; (8006110 <__libc_init_array+0x44>)
 80060e0:	f000 f820 	bl	8006124 <_init>
 80060e4:	1ba4      	subs	r4, r4, r6
 80060e6:	10a4      	asrs	r4, r4, #2
 80060e8:	2500      	movs	r5, #0
 80060ea:	42a5      	cmp	r5, r4
 80060ec:	d105      	bne.n	80060fa <__libc_init_array+0x2e>
 80060ee:	bd70      	pop	{r4, r5, r6, pc}
 80060f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060f4:	4798      	blx	r3
 80060f6:	3501      	adds	r5, #1
 80060f8:	e7ee      	b.n	80060d8 <__libc_init_array+0xc>
 80060fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060fe:	4798      	blx	r3
 8006100:	3501      	adds	r5, #1
 8006102:	e7f2      	b.n	80060ea <__libc_init_array+0x1e>
 8006104:	08006338 	.word	0x08006338
 8006108:	08006338 	.word	0x08006338
 800610c:	08006338 	.word	0x08006338
 8006110:	0800633c 	.word	0x0800633c

08006114 <memset>:
 8006114:	4402      	add	r2, r0
 8006116:	4603      	mov	r3, r0
 8006118:	4293      	cmp	r3, r2
 800611a:	d100      	bne.n	800611e <memset+0xa>
 800611c:	4770      	bx	lr
 800611e:	f803 1b01 	strb.w	r1, [r3], #1
 8006122:	e7f9      	b.n	8006118 <memset+0x4>

08006124 <_init>:
 8006124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006126:	bf00      	nop
 8006128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800612a:	bc08      	pop	{r3}
 800612c:	469e      	mov	lr, r3
 800612e:	4770      	bx	lr

08006130 <_fini>:
 8006130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006132:	bf00      	nop
 8006134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006136:	bc08      	pop	{r3}
 8006138:	469e      	mov	lr, r3
 800613a:	4770      	bx	lr
